<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_zhc_crm_pp">
    <title>Using the C SDK</title>
    <shortdesc>The Couchbase C SDK (<codeph>libcouchbase</codeph>) enables C and C++ programs to access
        a Couchbase cluster. The C SDK is also commonly used as a core dependency of SDKs written in
        other language to provide a common implementation and high performance.</shortdesc>
    <conbody>
        <section>
            <title>Features</title>
            <p>
                <note>See the full feature matrix to see which features are available for which
                    versions.</note>
                <ul id="ul_uny_zlc_bv">
                    <li>Cross-Platform: Officially supported on <i>Linux</i>, <i>Mac OS X</i>, and
                        <i>Microsoft Windows</i> (though it is also known to run on other
                        platforms).</li>
                    <li>Key-Value (CRUD) operations (<apiname>lcb_get3</apiname>,
                        <apiname>lcb_store3</apiname>, etc.)</li>
                    <li>N1QL query operations (<apiname>lcb_n1ql_query</apiname>)</li>
                    <li>Map Reduce (view) query operations (<apiname>lcb_view_query</apiname>)</li>
                    <li>Secure SSL connections (Couchbase Enterprise only)</li>
                    <li>Pluggable non-blocking event loops such as <b>libevent</b> and <b>libuv</b>-
                        integrate with your own non-blocking application, or use
                        <apiname>lcb_wait</apiname> in blocking code</li>
                </ul>
            </p>
        </section>
        <section><title>Install Couchbase</title>Lorem ipsum dolor sit amet, consectetur adipiscing
            elit. Nunc iaculis justo sed justo feugiat pulvinar. Vestibulum ante ipsum primis in
            faucibus orci luctus et ultrices posuere cubilia Curae; Nullam eget hendrerit nisl. Nunc
            feugiat tellus arcu, at fringilla lacus dignissim ac. Aliquam vel tellus vitae leo
            pharetra cursus non id erat. In non erat rutrum, pharetra justo ut, dictum metus. Donec
            ac venenatis lacus. Fusce elementum dignissim ornare. In leo mauris, scelerisque mollis
            erat sit amet, malesuada consectetur odio. Donec aliquam ipsum non congue ultrices.
            Maecenas tortor leo, blandit ut aliquet non, varius nec odio. Pellentesque purus ex,
            maximus ut fringilla ut, dapibus eget dolor. Aenean mattis, ante non eleifend posuere,
            tortor nunc vehicula ex, ac porttitor libero ex id turpis.<p>Suspendisse rhoncus enim
                libero. Mauris vitae faucibus justo. Maecenas magna neque, hendrerit sed mauris in,
                aliquam feugiat neque. Morbi euismod massa quis dapibus consequat. Morbi auctor nec
                lacus a iaculis. Nunc eu sodales felis. Donec ac erat ipsum. Aliquam eget magna
                ante. Etiam non suscipit eros. Proin suscipit suscipit libero ac dictum. Vivamus
                vitae dui ut est cursus fringilla et nec turpis. Sed ultrices odio a egestas
                convallis. Morbi mattis eleifend felis. Sed at sem metus. Quisque dignissim dapibus
                erat at pretium. Duis gravida lacus ex, quis consectetur nisi imperdiet
                et.</p><p>Etiam aliquet orci augue, in pharetra turpis mattis et. Nulla vel ex eu
                    purus tincidunt viverra. Nam et facilisis erat. Praesent augue tellus, aliquam sed
                    commodo et, laoreet a nisi. Curabitur ornare nulla id mollis condimentum. Sed luctus
                    sagittis lectus, sed viverra ipsum dapibus eget. Proin ultricies purus eget elit
                    venenatis tempus at ac velit. Donec id massa tortor. Praesent sagittis non ipsum
                    porttitor commodo. Pellentesque ac vulputate enim. Aliquam vestibulum magna quis
                    dolor bibendum, sit amet rutrum nisi dignissim. Donec nisi leo, mollis eu consequat
                    sit amet, dignissim consequat arcu. Vivamus in nisl vitae sapien dapibus dictum
                    vitae vel risus. Aenean vel augue nibh. Pellentesque habitant morbi tristique
                    senectus et netus et malesuada fames ac turpis egestas. Suspendisse vitae ipsum
                    placerat, varius ligula tincidunt, hendrerit dui.</p></section>
        <section><title>Installation the SDK</title>We recommend installing via your system's native
            package format when possible. The following one-liners can be used to install the binary
            versions of the
            SDK:<codeblock spectitle="Linux">wget http://packages.couchbase.com/clients/c/couchbase-csdk-setup &amp;&amp; sudo perl couchbase-csdk-setup</codeblock><codeblock spectitle="Mac OS X">brew update &amp;&amp; brew install libcouchbase</codeblock>The
            full <xref href="download-install.dita#c-download-install">Download and API
                Reference</xref> section has installation instructions for Microsoft Windows as well
            as additional installation methods for all platforms (including source and older binary
            versions)</section>
        <section>
            <title>Documentation and examples</title>
            <p>
                <ul id="ul_hyq_xnc_bv">
                    <li>A reference guide (this manual) is suitable for a general overview and
                        learning how to use the library.</li>
                    <li>The API documentation (<xref href="download-install.dita#c-download-install"
                        >Download and API Reference</xref>) is generated from comments in the
                        header and covers all the APIs of the library.</li>
                    <li>Small standalone examples can be found in the <xref
                        href="https://github.com/couchbase/libcouchbase/tree/master/example"
                        format="html" scope="external">github repository</xref></li>
                    <li>Other Couchbase SDKs are written on top of the C SDK and show more complex
                        usage of the library's features:<ul id="ul_i2y_l4c_bv">
                            <li><xref href="https://github.com/couchbase/couchbase-python-client"
                                format="html" scope="external">Python SDK</xref></li>
                            <li><xref href="https://github.com/couchbase/couchnode" format="html"
                                scope="external">Node.js SDK</xref></li>
                        </ul></li>
                    <li>The library's own <codeph>cbc</codeph> (<xref
                        href="https://github.com/couchbase/libcouchbase/blob/master/tools/cbc.cc"
                        format="html" scope="external"/>) and <codeph>cbc-pillowfight</codeph>
                        (<xref
                            href="https://github.com/couchbase/libcouchbase/blob/master/tools/cbc-pillowfight.cc"
                            format="html" scope="external"/>) utilities. Note that these tools may
                        use internal APIs not intended for public use.</li>
                    <li>C++11 wrapper (<xref
                        href="https://github.com/couchbaselabs/libcouchbase-cxx" format="html"
                        scope="external"/>)</li>
                </ul>
            </p>
        </section>
        <section><title>Hello Couchbase</title>A simple example below (requires version 2.5.6 or
            higher to function). Error checking is omitted for
            brevity.<codeblock>#include &lt;libcouchbase/couchbase.h>

static void
opCallback(lcb_t instance, int cbtype, const lcb_RESPBASE *rb) {
    fprintf(stderr, "%.*s: %s... ", (int)rb->nkey, rb->key, lcb_strcbtype(cbtype));
    if (rb->rc != LCB_SUCCESS) {
        fprintf(stderr, "%s\n", lcb_strerror(NULL, rb->rc));
    } else {
        fprintf(stderr, "OK");
        if (cbtype == LCB_CALLBACK_GET) {
            const lcb_RESPGET *rg = (const lcb_RESPGET *)rb;
            fprintf(stderr, "... Value: %.*s\n", (int)rg->nvalue, rg->value);
        } else {
            fprintf(stderr, "\n");
        }
    }
}

int main(int argc, char **argv)
{
    assert(lcb_version_g >= 0x020506 &amp;&amp; "This example requires 2.5.6 or greater");

    lcb_t instance = NULL;
    lcb_create_st crst;
    memset(&amp;crst, 0, sizeof crst);
    crst.version = 3;
    crst.v.v3.connstr = "couchbase://localhost";
    lcb_create(&amp;instance, &amp;crst);
    lcb_connect(instance);
    lcb_wait(instance);

    lcb_install_callback3(instance, LCB_CALLBACK_GET, opCallback);
    lcb_install_callback3(instance, LCB_CALLBACK_STORE, opCallback);

    lcb_CMDSTORE scmd = { 0 };
    LCB_CMD_SET_KEY(&amp;scmd, "key", 3);
    LCB_CMD_SET_VALUE(&amp;scmd, "true", 4);
    scmd.operation = LCB_SET;
    lcb_store3(instance, NULL, &amp;scmd);
    lcb_wait(instance);

    lcb_CMDGET gcmd = { 0 };
    LCB_CMD_SET_KEY(&amp;gcmd, "key", 3);
    lcb_get3(instance, NULL, &amp;gcmd);
    lcb_wait(instance);
    lcb_destroy(instance);

    return 0;
}</codeblock></section>
        <section>
            <title>Scheduling, Blocking and non-blocking</title>
            <p>The library is designed to be non-blocking. As opposed to a blocking API where API
                calls themselves perform the operations and return results, the C SDK's non-blocking
                API <i>schedules</i> the operation, with the result of the operation being passed to
                a callback which is invoked when ready. The readiness and completion of an operation
                will only happen when the library has had a chance to send the operation to the
                server and await a response from the network.</p>
            <p>Most operations in the library do not <i>executre</i>the operation immediately, but
                rather <i>schedule</i> it to be executed when it is possible to perform network
                I/O.</p>
            <p>The <apiname>lcb_wait()</apiname> function will instruct the library to send all
                scheduled operations to the cluster and await the results for those operations. As
                results become available, designated callbacks (specified using
                <apiname>lcb_install_callback3()</apiname>) are invoked with the results.</p>
            <p>If your application is built on top of an event loop (for example, <i>libev</i>) you
                can integrate the C SDK to perform its I/O within the context of your event loop,
                avoiding the need to block for I/O with <apiname>lcb_wait()</apiname>.</p>
        </section>
        <section>
            <title>Library Handle</title>
            <p>Almost all operations within the library are done with a library handle of type
                <apiname>lcb_t</apiname>. The <apiname>lcb_t</apiname> is a handle representing
                a connection to a single bucket (though it is possible to access other buckets as
                well for certain operations).</p>
            <p>An <apiname>lcb_t</apiname> is created using the <apiname>lcb_create()</apiname>
                function. Once created the handle must be connected:
                <apiname>lcb_connect()</apiname> schedules the connection and
                <apiname>lcb_wait</apiname> waits for the connection to complete. Once
                <apiname>lcb_wait</apiname> returns, <apiname>lcb_get_bootstrap_status</apiname>
                may be used to determine if the connection completed successfully.</p>
            <p>Once the handle has been successfully connected it may then be used for data
                access.</p>
            <p>When the library handle is no longer needed, it can be destroyed via
                <apiname>lcb_destroy()</apiname>.</p>
        </section>
        <section>
            <title>Data Access</title>
            <p>Once the handle has been connected, it may be used to access data using the KV, N1QL,
                and MapReduce APIs.</p>
        </section>
    </conbody>
</concept>
