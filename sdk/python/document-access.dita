<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_s2j_svk_55">
 <title>Creating, Updating and Retrieving Data</title>
 <shortdesc></shortdesc>
 <conbody>
        <p><!--This is the previously described CRUD page--></p>
        <codeblock>cb = Bucket('couchbase://localhost')
cb.upsert('newdoc', {'field1': 'value1'}
contents = cb.get('newdoc').value</codeblock>
        <section><p>The first step in using a database involves storing data into it.</p><p>In
                Couchbase, documents are typically updated using one of the <i>upsert</i>,
                    <i>insert</i>, and <i>replace</i> methods. These methods will all write a JSON
                document with a given document ID (key) to the database. The update methods differ
                in behavior in respect to the existing state of the document:</p><ul
                id="ul_wjj_zlm_zs">
                <li><i>insert</i> will only create the document if the given ID is not found within
                    the database.</li>
                <li><i>replace</i> will only replace the document if the given ID already exists
                    within the database.</li>
                <li><i>upsert</i> will always replace the document, ignoring whether the ID has
                    already existed or not.</li>
            </ul> Since Couchbase’s KV store may be thought of as a distributed hashmap or
            dictionary, the following code samples are explanatory of Couchbase’ update operations <codeblock outputclass="language-python">KV_STORE = {}

def insert(doc_id, value):
    if doc_id not in KV_STORE:
        KV_STORE[doc_id] = value
    else:
        raise KeyAlreadyExists()

def replace(doc_id, value):
    if doc_id in KV_STORE:
        KV_STORE[doc_id] = value
    else:
        raise KeyNotFound()

def upsert(doc_id, value):
    KV_STORE[doc_id] = value</codeblock>
            <title>Document IDs (keys)</title><p>Document IDs are assigned by application. A valid
                document ID must:</p><p>
                <ul id="ul_rht_rnm_zs">
                    <li>Conform to UTF-8 encoding</li>
                    <li>Be no longer than 250 bytes<note>Note the difference between bytes and
                            characters. Most non-Latin characters occupy more than a single
                            byte</note></li>
                </ul>
            </p>You are free to choose any ID for your document, so long as they conform to the
            above restrictions. Unlike some other database, Couchbase does not automatically
            generate IDs for you (but see [counter pattern]).</section>
        <section><title>Updating documents</title><p>The API exposes methods reflecting the
                different ways to update documents.</p><p>Any update operation requires the document
                itself and document’s ID as
                input.<codeblock>from __future__ import print_function

from couchbase.bucket import Bucket
import couchbase.exceptions as E

cb = Bucket('couchbase://10.0.0.31/default')

# This always works!
print('Upserting')
cb.upsert('docid', {'property': 'value'})
print('Getting item back. Value is:',
      cb.get('docid').value)
print('...')

print('Will try to insert the document. Should fail because the item already exists..')
try:
    cb.insert('docid', {'property': 'value'})
except E.KeyExistsError:
    print('Insert failed because item already exists!')
print('...')

print('Replacing the document. This should work because the item already exists')
cb.replace('docid', {'property': 'new_value'})
print('Getting document again. Should contain the new contents:',
      cb.get('docid').value)
print('...')

print('Removing document.')
# Remove the item, then try to replace it!
cb.remove('docid')
print('Replacing document again. Should fail because document no longer exists')
try:
    cb.replace('docid', {'property': 'another value'})
except E.NotFoundError:
    print('Get failed since item does not exist')</codeblock></p>The
            Python SDK will automatically convert the document to JSON before storing it on the
            server (and will return an error if the document cannot be converted to JSON). As such,
            the document may be any Python object which can be serialized to JSON. This includes any
            numeric type, <codeph>str</codeph>, <codeph>list</codeph>, <codeph>tuple</codeph> and
                <codeph>dict</codeph> types.<p>Other Python types can also be stored using explicit
                Pickle serialization (see [non-JSON Documents])</p></section>
        <section>
            <title>Retrieving documents</title>
            <p>Documents can be retrieved using their IDs. Retrieving a document by ID is extremely
                fast. The following query takes about 1
                millisecond.<codeblock>rv = cb.get('docid')
print rv.value</codeblock></p>
        </section>
        <section>
            <title>Document API return value</title>
            <p>Python SDK document operations return a <codeph>Result</codeph> object (or a subclass
                thereof). The result object contains general operation information and item metadata
                retrieved from the server. Typically a <i>subclass</i> of <codeph>Result</codeph>
                will be returned which also contains operation-specific result information, such as
                the <codeph>value</codeph> field for a <apiname>get()</apiname> operation. The most
                common fields in a <apiname>Result</apiname> object are:</p>
            <table id="table_ivk_pcn_2q">
                <tgroup cols="2">
                    <thead>
                        <row>
                            <entry>Name</entry>
                            <entry>Description</entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry><codeph>value</codeph></entry>
                            <entry>For retrieval-type operations, this field contains the value of
                                the requested key.</entry>
                        </row>
                        <row>
                            <entry><codeph>rc</codeph></entry>
                            <entry>Contains the raw error code received from <i>libcouchbase</i>. If
                                this number is zero then the operation was successful; otherwise it
                                will be an error. The
                                    <apiname>CouchbaseError.rc_to_exctype()</apiname> class method
                                can be used to return the exception class which would have been
                                thrown.</entry>
                        </row>
                        <row>
                            <entry><codeph>success</codeph></entry>
                            <entry>This is a convenience property which is equivalent to <codeph>rc
                                    == 0</codeph></entry>
                        </row>
                        <row>
                            <entry><codeph>cas</codeph></entry>
                            <entry>An opaque object representing the resulting <xref
                                    href="../../developer-guide/cas-concurrency.dita#concept_iq4_bts_zs"
                                    >CAS</xref> value of the key that was operated on. This value is
                                not meant to be user facing, but should be passed directly to other
                                operations for locking purposes.</entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
            <p>Note that for Twisted APIs, these objects are not returned per se, but rather a
                    <apiname>Deferred</apiname> object is returned, and the appropriate
                    <apiname>Result</apiname> or <apiname>Failure</apiname> object is passed into
                the callback or errback, respectively.</p>
        </section>
    </conbody>
</concept>
