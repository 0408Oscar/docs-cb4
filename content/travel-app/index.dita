<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="travel-app">
	<title>Check out a sample web app</title>
	<shortdesc>Couchbase Travel is a sample web application that demonstrates how to interact with
		the Couchbase query service via the Node.js SDK. You can download the complete source code and
		then build and run the app. While the app runs, you can view the log of N1QL queries that it
		sends. The documentation for the travel app illustrates the data model and walks through the
		N1QL queries used to select flights.</shortdesc>
	<conbody>
		<p>The travel app is written in <xref href="https://nodejs.org" format="html" scope="external"
				>Node.js</xref> and incorporates the following frameworks:</p>
		<ul>
			<li>
				<xref href="http://expressjs.com" format="html" scope="external">Express</xref>
			</li>
			<li>
				<xref href="https://angularjs.org" format="html" scope="external">AngularJS</xref>
			</li>
			<li>
				<xref href="http://getbootstrap.com" format="html" scope="external">Bootstrap</xref>
			</li>
		</ul>
		<p>The application allows users to find flights by entering airports and travel dates. For the
			airport entries, the app uses a N1QL query bound to an Angular typeahead directive to
			suggest airport names based on the first few letters entered.</p>

		<section>
			<title>Building and running the travel app</title>
			<p>Couchbase Server and the sample travel app must be running on the same machine. To build
				and run the sample travel app:</p>
			<ol>
				<li>
					<p><xref href="../getting-started/installing.dita#installing">Install Couchbase
							Server 4.0</xref>.</p>
					<p>You do not need to set up the cluster after installation. The sample application takes care
						of this for you. If you have a Couchbase instance already installed and configured
						you can use it (that is, you don't need to reinstall Couchbase Server to try this
						app).</p>
				</li>

				<li><xref href="https://nodejs.org" format="html" scope="external">Install
						node.js</xref> on the machine that is running Couchbase Server.</li>
				
				<li><p>Install the Couchbase Node.js SDK:</p>
				<codeblock outputclass="language-bash">$ npm install couchbase</codeblock></li>

				<li>
					<p>In a terminal window on the machine that is running Couchbase Server, enter the following
						commands to install the sample application:</p>
					<codeblock outputclass="language-bash">$ mkdir ~/try-cb
$ git clone https://github.com/couchbaselabs/try-cb-nodejs.git ~/try-cb
$ cd ~/try-cb
$ sudo npm install node-gyp -g
$ npm install</codeblock>
					<p>The command sequence creates a new directory, clones the GitHub repository that
						contains the travel app, and installs dependencies.</p>
				</li>
				
				<li><p>If you already have a configured instance of Couchbase Server, edit the
							<filepath>config.json</filepath> file in the root of the cloned repository and
						change the <codeph>username</codeph> and <codeph>password</codeph> fields to match
						the credentials you entered when you set up Couchbase Server.</p>You can also
					configure the application to use a remote instance of Couchbase or multidimensional
					scaling (MDS) by editing the <codeph>endPoint</codeph>, <codeph>n1qlService</codeph>
					and <codeph>hostname</codeph> fields.</li>
				<li><p>Enter the following command:</p>
				<codeblock outputclass="language-bash">$ node app.js</codeblock>
					<p>The application automatically provisions a cluster by default on the installed Couchbase
						instance. The provisioning process outputs  messages to the terminal. Provisioning
						and starting the app can take up to 2 minutes to complete based on the speed of
						your environment. Upon completion, the app outputs a message with the app login
						URL. You'll see messages similar to these:</p>
					<codeblock>Amys-MacBook-Pro-6:try-cb amy$ node app.js
 ⇒ AUTOPROVISION: INITIATED
    COUCHBASE INSTANCE: localhost:8091 LOCATE
    COUCHBASE INSTANCE BUCKET: travel-sample CHECK IF PROVISIONED
     COUCHBASE INSTANCE: localhost:8091 LOCATED
     COUCHBASE INSTANCE BUCKET COUNT: 4 LISTED BELOW
      COUCHBASE INSTANCE BUCKET: beer-sample
      COUCHBASE INSTANCE BUCKET: default
      COUCHBASE INSTANCE BUCKET: joey
      COUCHBASE INSTANCE BUCKET: travel-sample
      COUCHBASE INSTANCE EXISTS: travel-sample PROVISIONED
 ⇐ AUTOPROVISION: ALREADY PROVISIONED. MOVING ON
LOGIN AT http://localhost:3000</codeblock>
				</li>
			</ol>
			
			<p>The travel app runs in this terminal window. You need to keep this window open so that the
				travel app continues running.</p>
			<p>When you are done using the travel app, terminate the process by typing control-C.</p>


		</section>
		<section>
			<title>Using the travel app</title>
			<ol>
				<li>
					<p>Open a browser and navigate to the login URL displayed when you started the
						app.</p>
					
					
				</li>
				
				<li><p>Sign in to Couchbase Travel:</p>
				<image href="images/travel-app-login.png" width="650px"></image></li>
				
				

				<li><p>Find a flight:</p>
					<image href="images/travel-app-screen.png" width="650px" />
					<p>In the <uicontrol>Airport or City</uicontrol> section, enter an airport code or
						city name in the <uicontrol>From</uicontrol> and <uicontrol>To</uicontrol>
						fields.</p>
					<p>For example, if you enter the airport code LHR, the name Heathrow pops up, and if
						you enter LAX, the name Los Angeles Intl pops up.</p>
				</li>

				<li>In the <uicontrol>Travel Dates</uicontrol> section, select
						<uicontrol>Leave</uicontrol> and <uicontrol>Return</uicontrol> dates by using the
					date picker that pops up when you click the date fields.</li>

				<li>
					<p>Click <uicontrol>Find Flights</uicontrol>.</p>
					<p>The app displays the available flights for the outbound and return legs of the
						trip.</p>
				</li>
			</ol>

		</section>

	</conbody>
</concept>
