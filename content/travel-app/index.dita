<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="travel-app">
	<title>Sample Apps</title>
	<shortdesc>Couchbase Travel is a sample web application that demonstrates how to interact with the
		Couchbase query service via the Node.js SDK. </shortdesc>
	<conbody>
		<p>You can download the complete source code and
			then build and run the app. While the app runs, you can view the log of N1QL queries that it
			sends. The documentation for the travel app illustrates the data model and walks through the
			N1QL queries used to select flights.</p>
		<p>The travel app is written in <xref href="https://nodejs.org" format="html" scope="external">Node.js</xref> and incorporates the following frameworks:</p>
		<ul>
			<li>
				<xref href="http://expressjs.com" format="html" scope="external">Express</xref>
			</li>
			<li>
				<xref href="https://angularjs.org" format="html" scope="external">AngularJS</xref>
			</li>
			<li>
				<xref href="http://getbootstrap.com" format="html" scope="external">Bootstrap</xref>
			</li>
		</ul>
		<p>The application allows users to find flights by entering airports and travel dates. For the
			airport entries, the app uses a N1QL query bound to an Angular type ahead directive to
			suggest airport names based on the first few letters entered.</p>
<p>If you want to try the sample app first, without having to build and run the sample code, take a
			look at the travel app hosted at <xref href="http://try.couchbase.com" format="com"
				scope="external"/>. See <xref href="#travel-app/using-travel-app" format="dita"/>
			for guidelines on how to use the travel app.</p>
		<section>
			<title>Building and Running the Travel App</title>
			<p>To start with, it's easiest if you run Couchbase Server and the travel sample app on the same
				machine. It's not required to run your development environment this way, and
				advanced "MDS" configurations are supported. It's just easier to start a development
				environment with components running locally. To build and run the sample travel app
				follow these steps:</p>
			<ol>
				<li><xref href="../getting-started/installing.dita#installing">Install Couchbase Server
						4.5</xref>.<p>You do not need to provision the cluster "manually" after
						installation. The sample application can take care of this for you. If you
						have a Couchbase instance already installed and configured, you can just use
						the application (that is, you don't need to reinstall Couchbase Server to
						try this app).</p></li>
				<li><xref href="https://nodejs.org" format="html" scope="external">Install node.js</xref> on the
					machine that is running Couchbase Server. This application uses ES6 features for
					provisioning (fat arrow functions, promises, classes). Please make sure the
					version of node.js you are installing is 4.0.0 or higher. </li>
				<li>In a terminal window on the machine that is running Couchbase Server, enter the
					following commands to install the sample
						application:<codeblock outputclass="language-bash">$ mkdir ~/try-cb
$ git clone https://github.com/couchbaselabs/try-cb-nodejs.git ~/try-cb
$ cd ~/try-cb
$ npm install</codeblock><p>The
						command sequence creates a new directory, clones the GitHub repository that
						contains the travel app, and installs dependencies.</p></li>
				<li>If you already have a configured instance of Couchbase Server, edit the
						<filepath>config.json</filepath> file in the root of the cloned repository
					and change the <codeph>username</codeph> and <codeph>password</codeph> fields to
					match the credentials you entered when you set up Couchbase Server.
					<!--You can also
					configure the application to use a remote instance of Couchbase or
					multidimensional scaling (MDS) by editing the <codeph>endPoint</codeph>,
						<codeph>n1qlService</codeph> and <codeph>hostname</codeph> fields.--></li>
				<li>To provision the travel-sample application and setup a cluster from the instance of
					Couchbase Server that you downloaded and installed, enter the following command
					from the <filepath>~/try-cb</filepath> directory:
						<codeblock outputclass="language-bash">$ npm run build</codeblock><p>Using a
						script defined in the <filepath>package.json</filepath> file under the
						"build" section for the application, npm automatically provisions a cluster
						on the installed Couchbase instance. The provisioning process outputs
						messages to the terminal. Provisioning and starting the app can take up to
						two minutes to complete based on the speed of your environment. Upon
						completion, the app outputs a message with the app login URL. You only need
						to run '<codeph>npm run build</codeph>' once, and if it's run again it will
						not re-provision the Couchbase instance. You'll see messages similar to this
						one:</p><codeblock>$ npm run build

> try-cb@0.1.0 build /Users/todd/Express/try
> node utils/provision.js

  PROVISION INITIALIZE SERVICES: 200
  PROVISION RENAMING: 200
  PROVISION INDEX STORAGE MODE: 200
  PROVISION SERVICES: 200
  PROVISION MEMORY: 200
  PROVISION ADMIN USER: 200
  PROVISION BUCKET: 202
    LOADING ITEMS:100%  of 31565 Items
    BUCKET: travel-sample LOADED.
  PROVISION FTS INDEX: 200
Cluster localhost:8091 provisioning complete.
   To login to couchbase: open a browser localhost:8091
   To run the travel-sample application, run 'npm start'</codeblock></li>
	 <li>Now, and at any point in the future whenever you want to run the travel-sample application,
					just run the following
					command:<codeblock outputclass="language-bash">$ npm start</codeblock> You will
					see a message like the following, telling you where to point your browser to use
					the
					application:<codeblock>npm start
> try-cb@0.1.0 start /Users/todd/Express/try
> node app.js

ENVIRONMENT: READY--LOGIN AT: http://localhost:3000	</codeblock></li>
			</ol>
			<p>The travel app runs in the terminal window, which you need to keep open. To stop using the
				app, terminate the process by typing <userinput>Ctrl-C</userinput>.</p>
		</section>
		<section id="using-travel-app">
			<title>Using the Travel App</title>
			<ol>
				<li>Open a browser and navigate to the login URL that was displayed when you started the
					app.</li>

				<li>Sign in to Couchbase Travel by providing your credentials: <image
						href="images/travel-app-login.png" width="650px" placement="break"/></li>



				<li>Find a flight: <image href="images/travel-app-screen.png" width="650px" placement="break"/>
					<p>In the <uicontrol>Airport or City</uicontrol> section, enter an airport code
						or city name in the <uicontrol>From</uicontrol> and
							<uicontrol>To</uicontrol> fields. </p></li>

				<li>In the <uicontrol>Travel Dates</uicontrol> section, select
						<uicontrol>Leave</uicontrol> and <uicontrol>Return</uicontrol> dates by using the
					date picker that pops up when you click the date fields.</li>

				<li>Click <uicontrol>Find Flights</uicontrol>.<p>The app displays the available flights for the
						outbound and return legs of the trip.</p></li>
			</ol>
		</section>
		<section><title>Travel App Data Model</title>
			<p>The data model for the travel app uses several distinct document types: airline, route,
				airport and landmark. The model for each kind of document contains: <ul>
					<li>A key that acts as a primary key</li>
					<li>An <codeph>id</codeph> field that identifies the document</li>
					<li>A <codeph>type</codeph> field that identifies the kind of document</li>
				</ul></p>
			<p>The following figure illustrates the relationship between the different kinds of documents. It
				shows the primary key, ID, and type fields that each document has, plus a few
				representative fields in each type of document.</p>
			<fig>
				<title>Documents in the travel app data model</title>
				<image href="images/travel-app-data-model.png"></image>
			</fig>
			<p><b>Airline Documents</b></p>
			<p><term>Airline documents</term> contain details about airlines such as the name of the airline,
				International Air Transport Association (IATA) two-character airline designator,
				International Civil Aviation Organization (ICAO) three-character airline designator,
				and the airline call sign.</p>
			<p>For airline documents, the value of the <codeph>type</codeph> field is
				<codeph>airline</codeph>.</p>
			
			<codeblock spectitle="Airline document model">airline_24 ←This is the key, which also acts as a primary key
{
				"active": "Y",
				"callsign": "AMERICAN",
				"country": "United States",
				"iata": "AA",
				"icao": "AAL",
				"id": "24",
				"name": "American Airlines",
				"type": "airline"              ←This is the type identifier for the document
				}</codeblock>
			<p><b> Route Documents</b></p>
			<p><term>Route documents</term> contain details about flights such as the name of the airline,
				departure airport, destination airport, number of stops during the flight, type of
				aircraft, flight number, and flight schedule. </p>
			<p>Route documents also contain a foreign key identifier, <codeph>airlineid</codeph>, that
				is used to retrieve the document that contains information about the airline that flies
				the route. The value of the <codeph>airlineid</codeph> field is identical to the key for
				the corresponding airline document.</p>
			<p>For route documents, the value of the <codeph>type</codeph> field is
				<codeph>route</codeph>.</p>
			
			<codeblock spectitle="Route document model">route_5966                         ←This is the key, which also acts as a primary key
				{
				"id": "5966",
				"type": "route",               ←This is the type identifier for the document
				"airline": "AA",
				"airlineid": "airline_24",     ←This is the foreign key identifier to an airline document
				"sourceairport": "MCO",
				"destinationairport": "SEA",
				"stops": "0",
				"equipment": "737",
				"schedule": [
				{"day": 1, "utc": "13:25:00", "flight": "AA788"}, 
				{"day": 4, "utc": "13:25:00", "flight": "AA419"},
				{"day": 5, "utc": "13:25:00", "flight": "AA519"}
				]
				}</codeblock>
			<p><b>Airport documents</b></p>
			<p><term>Airport documents</term> contain details about airports  such as name, location, time
				zone, ICAO four-character alphanumeric airport code, and Federal Aviation
				Administration (FAA) location identifier.</p>
			<p>For airport documents, the value of the <codeph>type</codeph> field is
				<codeph>airport</codeph>.</p>
			<codeblock spectitle="Airport document model">airport_3577                       ←This is the key, which also acts as a primary key
				{
				"travel-sample": {
				"airportname": "Seattle Tacoma Intl",
				"city": "Seattle",
				"country": "United States",
				"faa": "SEA",
				"geo": {
				"alt": 433,
				"lat": 47.449,
				"lon": -122.309306
				},
				"icao": "KSEA",
				"id": 3577,
				"type": "airport",         ←This is the type identifier for the document
				"tz": "America/Los_Angeles"
				}
				}</codeblock>
			<p><b>Landmark Documents</b></p>
			<p><term>Landmark documents</term> contain details about points of interest such as hotels. They
				include information such as name, location, price, contact information, and the kind
				of activity that the point of interest provides.</p>
			<p>For landmark documents, the value of the <codeph>type</codeph> field is
				<codeph>landmark</codeph>.</p>
			
			<codeblock spectitle="Landmark document model">landmark_21661                     ←This is the key, which also acts as a primary key
				{
				"activity": "sleep",
				"address": "12 Rue Boulainvilliers",
				"alt": null,
				"checkin": null,
				"checkout": null,
				"city": null,
				"content": "Small three star hotel (33 rooms).",
				"country": "France",
				"directions": null,
				"email": null,
				"fax": null,
				"geo": {
				"lat": 48.853,
				"lon": 2.27593
				},
				"hours": null,
				"id": 21661,
				"image": null,
				"name": "Hotel Eiffel Kennedy",
				"phone": "+33 1 45 24 45 75",
				"price": "~\u20ac150",
				"state": "Ile-de-France",
				"title": "Paris/16th arrondissement",
				"tollfree": null,
				"type": "landmark",            ←This is the type identifier for the document
				"url": "http://ww.eiffelkennedy.com"
				}</codeblock>
		</section>
		<section><title>Travel App Walk-through</title>
			<p>The travel app is a single-page web application built using a decoupled AngularJS
				front-end that communicates with the application by using REST endpoints.</p>
			<p><b>Architecture</b></p>
			<p>The application serves an HTML file named <filepath>index.html</filepath> from the public path
				in the Node.js application. This file contains references to various included script
				files for front-side JavaScript components such as Bootstrap, jQuery, and AngularJS.
				The Angular controller script named <codeph>script.js</codeph>, which you can find
				in the <filepath>/public/js/</filepath> directory, controls how the application
				interacts with the Node.js REST API in the server application.</p>
			
			<fig>
				<title>The Application Services</title>
				<image href="images/architecture-overview.png" width="650px" />
			</fig>
			<p><b>REST API</b></p>
			<p>The application uses these methods to populate data in the application:</p>
			<ul>
				<li><apiname>$scope.findFlights</apiname>, which is a REST API call to the
					<filepath>/api/flightPath/findAll</filepath> endpoint</li>
				<li><apiname>$scope.findAirports</apiname>, which is a REST API call to the
					<filepath>/api/airport/findAll</filepath> endpoint</li>
			</ul>
			<fig>
				<title>Front End Framework REST calls</title>
				<image href="images/angular-rest.png" width="350px" />
			</fig>
			<fig>
				<title>REST API for finding airports</title>
				<image href="images/architecture-airport.png" width="650px" />
			</fig>
			<p>The application attempts to find an airport based on the codes used for the
				<codeph>name</codeph> (case sensitive), and codes for Federal Aviation
				Administration (FAA) or International Civil Aviation Organization (ICAO). The travel
				app uses the data model and binds the input field for the <codeph>from</codeph>
				airport to an Angular typeahead directive, which is defined in the
				<filepath>index.html</filepath> file as follows:</p>
			<codeblock outputclass="language-markup" spectitle="Angular typeahead directive from /public/index.html file"><![CDATA[<input type="text" 
    placeholder="find airport"
    typeahead="data.airportname for data in findAirports($viewValue)"
    typeahead-min-length="3"
    typeahead-wait-ms="250"
    ng-model="fromName"
    ng-minlength="3"
    class="input-small form-control"
    name="from" required/>]]></codeblock>
			<p>In the Angular controller script, the <apiname>findAirports()</apiname> function is:</p>
			<codeblock outputclass="language-javascript" spectitle="findAirports() function from /public/js/scripts.js file">$scope.findAirports=function(val){
				return $http.get("/api/airport/findAll",{
				params:{search:val}
				}).then(function(response){
				return response.data;
				});
				}</codeblock>
			<p>The API call to the server application <filepath>/api/airport/findAll</filepath>
				function is defined in the <filepath>/routes/routes.js</filepath> file as:</p>
			<codeblock outputclass="language-javascript" spectitle="/api/airport/findAll function from /routes/routes.js file">//// ▶▶ airports ◀◀ ////
				app.get('/api/airport/findAll',function(req,res) {
				if (req.query.search) {
				airport.findAll(req.query.search, function (err, done) {
				if (err) {
				res.status = 400;
				res.send(err);
				return;
				}
				res.status = 202;
				res.send(done);
				});
				}else{
				res.status = 400;
				res.send({"airport":"bad request"});
				return;
				}
				});</codeblock>
			<p>The <filepath>/api/airport/findAll</filepath> route function in the
				<filepath>route.js</filepath> file points to the corresponding
				<apiname>findAll</apiname> function in the airport module in the<filepath>
					/model/airport.js</filepath> file. This method allows the user to search by FAA code,
				ICAO code or airport name. It then prepares a N1QL query based on the selection criteria
				and bucket information from the <filepath>/config.json</filepath> file. The query is
				passed to the Couchbase query service in the <filepath>/model/db.js</filepath> module
				that calls Couchbase.</p>
			<codeblock outputclass="language-javascript" spectitle="findAll() function from /model/airport.js file"><![CDATA[module.exports.findAll = function (queryStr, done) {
    var queryPrep;
    if (queryStr.length == 3) {
        queryPrep = "SELECT airportname FROM `" + config.couchbase.bucket + "` WHERE faa ='" + queryStr.toUpperCase() + "'";
    } else if (queryStr.length == 4 && (queryStr==queryStr.toUpperCase()||queryStr==queryStr.toLowerCase())) {
        queryPrep = "SELECT airportname FROM `" + config.couchbase.bucket + "` WHERE icao ='" + queryStr.toUpperCase() + "'";
    } else {
        queryPrep = "SELECT airportname FROM `" + config.couchbase.bucket + "` WHERE airportname LIKE '" + queryStr + "%'";
    }
    
    db.query(queryPrep, function (err, res) {
        if (err) {
            done(err, null);
            return;
        }
        if (res) {
            done(null, res);
            return;
        }
    });
}]]></codeblock>
			<p>Using the data model, if you enter <userinput>SEA</userinput>, <userinput>KSEA</userinput>, or
				<userinput>Seattle</userinput>, the typeahead directive gives you the option to
				select <uicontrol>Seattle Tacoma Intl.</uicontrol> To see the results of the query,
				watch the terminal window in which the Node application is running. The example is
				showing an output for the N1QL statements:</p>
			<codeblock>QUERY: SELECT airportname FROM `travel-sample` WHERE faa ='SEA'
				QUERY: SELECT airportname FROM `travel-sample` WHERE icao ='KSEA'
				QUERY: SELECT airportname FROM `travel-sample` WHERE airportname LIKE 'Seattle%'</codeblock>
			<p>You can enable or disable console logging for N1QL statements by changing the value of
				the <codeph>showQuery</codeph> property in the <filepath>/config.json</filepath> file to
				<codeph>true</codeph> or <codeph>false</codeph>.</p>
			<fig>
				<title>REST API for finding flight paths</title>
				<image href="images/architecture-flight-path.png" width="650px" />
			</fig>
			<p>After the airports are selected and a leave date is entered, the application tries to find
				route and schedule information for an airline that services the requested flight
				path. The call to the REST API <filepath>/api/flightPath/findAll</filepath> on the
				server is initiated when the user clicks the <uicontrol>Find Flights</uicontrol>
				button. The button is defined within the <codeph>travelForm</codeph> form element in
				the <filepath>index.html</filepath> file, as shown in the following code
				snippets:</p>
			<codeblock outputclass="language-markup" spectitle="travelForm form element from /public/index.html file"><![CDATA[<form class="form-horizontal" role="form" 
       name="travelForm" ng-submit="findFlights()" novalidate>]]></codeblock>
			<codeblock outputclass="language-markup" spectitle="Find Flights button element from /public/index.html file"><![CDATA[<button class="btn btn-primary pull-right btn-sm" 
         type="submit" ng-disabled="travelForm.$invalid">Find Flights</button>]]></codeblock>
			<p>The <codeph>travelForm</codeph> form element contains various Angular validation options
				that are used with the input directives. For more information about validation and the
				input directive see <xref href="https://docs.angularjs.org/api/ng/directive/input"
					format="html" scope="external"
					>https://docs.angularjs.org/api/ng/directive/input</xref>. After validating the input
				options, the Angular function in the <filepath>script.js</filepath> file is called to
				find flights.</p>
			<codeblock outputclass="language-javascript" spectitle="findFlights() function from /public/js/scripts.js file"><![CDATA[$scope.findFlights = function () {
    $scope.empty = true;
    $scope.rowCollectionLeave = [];
    $scope.rowCollectionRet = [];
    $http.get("/api/flightPath/findAll", {
        params: {from: this.fromName, to: this.toName, leave: this.leave}
    }).then(function (response) {
        if (response.data.length > 0) {
            $scope.empty = false;
        }
        for (var j = 0; j < response.data.length; j++) {
            $scope.rowCollectionLeave.push(response.data[j]);
        }
    });
    if (this.ret) {
        $http.get("/api/flightPath/findAll", {
            params: {from: this.toName, to: this.fromName, leave: this.ret}
        }).then(function (responseRet) {
            if (responseRet.data.length > 0) {
                $scope.retEmpty = false;
            }
            for (var j = 0; j < responseRet.data.length; j++) {
                $scope.rowCollectionRet.push(responseRet.data[j]);
            }
        });
    }
}]]></codeblock>
			<p>The <codeph>findFlights()</codeph> function checks the form input to determine whether the
				return option is enabled or disabled. It then calls the server REST API
				<filepath>/api/flightPath/findAll</filepath> function either once for a one way
				flight or twice for a round-trip flight. When it requests the return flight for a
				round trip, it uses the reverse <codeph>to</codeph> and <codeph>from</codeph>
				sequence. </p>
			<codeblock outputclass="language-javascript" spectitle="/api/flightPath/findAll function from /routes/routes.js file"><![CDATA[
//// ▶▶ flightPath ◀◀ ////
app.get('/api/flightPath/findAll',function(req,res){
    if(req.query.from && req.query.to && req.query.leave){
        flightPath.findAll(req.query.from, req.query.to,req.query.leave, function (err, done) {
            if (err) {
                res.status = 400;
                res.send(err);
                return;
            }
            res.status = 202;
            res.send(done);
        });
    }else{
        res.status = 400;
        res.send({"flightPath":"bad request"});
        return;
    }
});
]]></codeblock>
			<p>The <codeph>/api/flightPath/findAll</codeph> route function in the
				<filepath>route.js</filepath> file points to the corresponding
				<apiname>findAll</apiname> function in the <codeph>flightPath</codeph> module, found
				in the <filepath>/model/flghtPath.js</filepath> file. The <apiname>findAll</apiname>
				function performs several important steps for processing the request to find
				flights:</p>
			<ul>
				<li>It determines the FAA identifier for the <codeph>to</codeph> and <codeph>from</codeph>
					airports.</li>
				<li>It searches for routes and schedule information based on the source and destination airports
					and the requested dates. The collection of schedule documents is nested in the route
					document for each route. They are grouped by day of the week (1-7), and the requested
					dates are compared to the day of the week to see what flights are available on those
					particular dates. It returns a list of flights that includes data for the following
					fields: airline, flight, departure, from, to, and aircraft. </li>
			</ul>
			<p> This method in the <filepath>flightPath.js</filepath> module is: </p>
			<codeblock outputclass="language-javascript" spectitle="findAll function from the /model/flightPath.js file"><![CDATA[
module.exports.findAll = function (from, to, leave,done) {
    var queryPrep = "SELECT faa as fromAirport FROM `" + config.couchbase.bucket + "` WHERE airportname = '" + from +
        "' UNION SELECT faa as toAirport FROM `" + config.couchbase.bucket + "` WHERE airportname = '" + to + "'";
    db.query(queryPrep, function (err, res) {
        if (err) {
            done(err, null);
            return;
        }
        if (res) {
            var queryTo;
            var queryFrom;
            for(i=0;i<res.length;i++){
                if(res[i].toAirport){
                    queryTo=res[i].toAirport;
                }
                if(res[i].fromAirport){
                    queryFrom=res[i].fromAirport;
                }
            }
            queryPrep="SELECT a.name, s.flight, s.utc, r.sourceairport, r.destinationairport, r.equipment FROM `" + config.couchbase.bucket + "` r UNNEST r.schedule s JOIN `" + config.couchbase.bucket + "` a ON KEYS r.airlineid WHERE r.sourceairport='" + queryFrom + "' AND r.destinationairport='" + queryTo + "' AND s.day=" + convDate(leave) + " ORDER BY a.name";
            db.query(queryPrep,function (err, flightPaths) {
                         if (err) {
                             done(err, null);
                             return;
                         }
                         if (flightPaths) {
                             done(null, flightPaths);
                             return;
                         }
                     }
            );
        }
    });
}
]]></codeblock>
			<p> The Query can be seen in the terminal window that is running the node.js application: </p>
			<codeblock>QUERY: 
				SELECT a.name, s.flight, s.utc, r.sourceairport, r.destinationairport, r.equipment 
				FROM `travel-sample` r 
				UNNEST r.schedule s 
				JOIN `travel-sample` a 
				ON KEYS r.airlineid 
				WHERE r.sourceairport='SEA' AND r.destinationairport='MCO' AND s.day=6 
				ORDER BY a.name</codeblock>
			<p><b>N1QL Query Anatomy</b></p>
			<p>The Couchbase Query API is a powerful tool for efficient retrieval of information from a
				document data store. In the travel application, queries about flights are created by the
				<filepath>flightPath.js</filepath> module. Here's an example of a query that finds
				flights between Seattle-Tacoma International Airport (SEA) and Orlando International
				Airport (MCO), followed by a description of what's happening in the query:</p>
			
			<codeblock outputclass="language-sql">SELECT a.name, s.flight, s.utc, r.sourceairport, r.destinationairport, r.equipment 
				FROM `travel-sample` r 
				UNNEST r.schedule s
				JOIN `travel-sample` a ON KEYS r.airlineid 
				WHERE r.sourceairport='SEA' AND r.destinationairport='MCO' AND s.day=6 
				ORDER BY a.name</codeblock>
			
			<p>N1QL provides JOIN functionality, something previously not possible in a document
				database. For two documents to be joined in the result of a SELECT statement, one of
				them must contain a field whose value is equal to the Couchbase key of the other
				document. The following example shows two documents that demonstrate that requirement
				and a SELECT statement that joins them:</p>
			
			<codeblock>“keyA” is the Couchbase KV key for Doc A. 
				Doc A: { some fields }
				
				Doc B: { some fields “joinField”: “keyA" } 
				
				SELECT * FROM default b JOIN default a ON KEYS b.joinField</codeblock>
			
			<p>The data model for the travel application includes an <codeph>airlineid</codeph> field
				in each <codeph>route</codeph> document. That <codeph>airlineid</codeph> field is used
				as a foreign key identifier and corresponds to the key for an <codeph>airline</codeph>
				document. To select the airline name <codeph>a.name</codeph>, the query uses the
				following clause: <codeph>JOIN `travel-sample` a ON KEYS r.airlineid</codeph>.</p>
			
			<p>One of the most powerful features available in the Couchbase Query API is the ability to
				<codeph>UNNEST</codeph> or flatten,the results returned in the
				<codeph>SELECT</codeph> statement. In the data model for the travel application,
				each route document contains a nested collection of schedule documents. To alleviate
				a complicated JSON parsing code pattern for the return results, you can
				<codeph>UNNEST</codeph> the schedule documents, so they become the root-level
				fields in the returned results.</p>
			<p>Standard SQL syntax is used in the <codeph>WHERE</codeph> clause for the
				<codeph>SELECT</codeph> statement. The result set is ordered by the
				<codeph>a.name</codeph> field, which contains the airline name.</p>
	
</section>
	</conbody>
</concept>
