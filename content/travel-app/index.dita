<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="travel-app">
	<title>Check out a sample web app</title>
	<shortdesc>Couchbase Travel is a sample web application that demonstrates how to interact with the
		Couchbase query service via the Node.js SDK. You can download the complete source code and
		then build and run the app. While the app runs, you can view the log of N1QL queries that it
		sends. The documentation for the travel app illustrates the data model and walks through the
		N1QL queries used to select flights.</shortdesc>
	<conbody>
		<p>The travel app is written in <xref href="https://nodejs.org" format="html" scope="external"
				>Node.js</xref> and incorporates the following frameworks:</p>
		<ul>
			<li>
				<xref href="http://expressjs.com" format="html" scope="external">Express</xref>
			</li>
			<li>
				<xref href="https://angularjs.org" format="html" scope="external">AngularJS</xref>
			</li>
			<li>
				<xref href="http://getbootstrap.com" format="html" scope="external">Bootstrap</xref>
			</li>
		</ul>
		<p>The application allows users to find flights by entering airports and travel dates. For the
			airport entries, the app uses a N1QL query bound to an Angular typeahead directive to
			suggest airport names based on the first few letters entered.</p>

		<section>
			<title>Building and running the travel app</title>
			<p>Couchbase Server and the sample travel app must be running on the same machine. To build
				and run the sample travel app:</p>
			<ol>
				<li>
					<xref href="../getting-started/installing.dita#installing">Install Couchbase Server
						4.0</xref>, but <b>do not</b> install any sample data buckets and <b>do not</b> go
					through the setup screens or do any other setup.</li>

				<li><xref href="https://nodejs.org" format="html" scope="external">Install
						node.js</xref> on the machine that is running Couchbase Server.</li>

				<li> In a terminal window for the machine that is running Couchbase Server, enter the
					following commands: <codeblock>$ mkdir ~/try-cb
$ git clone https://github.com/ToddGreenstein/try-cb-nodejs.git ~/try-cb
$ cd ~/try-cb
$ npm install
$ node app.js</codeblock>
					<p>The command sequence creates a new directory, clones the GitHub repository that
						contains the travel app, installs dependencies, and starts the travel app.</p>
					<p>The travel app runs in this terminal window. You must keep this window open so
						that the travel app continues running.</p>
					<p>The app logs each query that it sends. Keep the terminal window visible when you
						use the app to see how the queries are formulated when you enter values in the
						fields.</p>
				</li>
				<li> Open a new terminal window and enter the following command: <codeblock>$ curl -v -X POST http://<varname>hostname</varname>:3000/api/status/provisionCB</codeblock>
					<p>In the URL, <varname>hostname</varname> represents the name or IP address of the
						computer that hosts Couchbase Server and the travel app. If you are running them
						on your local machine, you can use <codeph>localhost</codeph> for the host
						name.</p>
					<p>This command sends an HTTP request to an endpoint on the travel app that loads a
						sample data bucket and sets up the cluster. It assumes that the cluster and the
						travel app are running on the same server. It also sets the user name to
							<codeph>Administrator</codeph> and the password to
						<codeph>password</codeph>.</p>
				</li>
				<li>
					<p>Wait until the indexes are built.</p>
					<p>You need to wait until the index is built before using the travel app. The app
						outputs a series of messages during set up. When the index is built you will see a
						message similar to this:</p>
					<codeblock>INDEXES ONLINE: [ { '$1': 7 } ]
{ indexes: 'built' }</codeblock>
				</li>
				<li>When you are done using the travel app, terminate the process by typing
					control-C.</li>
			</ol>


		</section>
		<section>
			<title>Using the travel app</title>
			<ol>
				<li>
					<p>Open a browser and navigate to <xref href="http://127.0.0.1:3000" format="html"
							scope="external">http://127.0.0.1:3000</xref>.</p>
					<p>The Find a Flight form is displayed:</p>
					<image href="images/travel-app-screen.png" width="650px" />
				</li>

				<li>
					<p>In the <uicontrol>Airport or City</uicontrol> section, enter an airport code or
						city name in the <uicontrol>From</uicontrol> and <uicontrol>To</uicontrol>
						fields.</p>
					<p>For example, if you enter the airport code LHR, the name Heathrow pops up, and if
						you enter LAX, the name Los Angeles Intl pops up.</p>
				</li>

				<li>In the <uicontrol>Travel Dates</uicontrol> section, select
						<uicontrol>Leave</uicontrol> and <uicontrol>Return</uicontrol> dates by using the
					date picker that pops up when you click the date fields.</li>

				<li>
					<p>Click <uicontrol>Find Flights</uicontrol>.</p>
					<p>The app displays the available flights for the outbound and return legs of the
						trip.</p>
				</li>
			</ol>

		</section>

	</conbody>
</concept>
