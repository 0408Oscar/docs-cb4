<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_r1w_435_nq">
	<title>Execute N1QL</title>
	<conbody>
		<p>This method enables the client to execute a N1QL statement. It runs synchronously, so once
			execution of the statement in the request is started, results are streamed back to the
			client, terminating when execution of the statement finishes.</p>
	</conbody>


	<concept id="request-specification">
		<title>Request specification</title>
		<conbody>
			<p>The following sections describe how to specify requests.</p>
		</conbody>

		<concept id="request-format">
			<title>Request format</title>
			<conbody>

				<p>Here is the format for GET and POST requests.</p>
				<p>GET /query/service</p>
				<p>POST /query/service</p>

			</conbody>
		</concept>

		<concept id="concept_byg_w35_nq">
			<title>Request parameters</title>

			<conbody>

				<p>This table contains details of all the parameters that can be passed in a request to
					the /query/service endpoint: </p>

				<simpletable>
					<sthead>
						<stentry>Parameter name</stentry>
						<stentry>Value</stentry>
						<stentry>Description</stentry>
					</sthead>

					<strow>
						<stentry>
							<codeph>statement</codeph>
						</stentry>
						<stentry>string</stentry>
						<stentry>Required if <codeph>prepared</codeph> is not provided. Any valid N1QL
							statement for a POST request, or a read-only N1QL statement (such as SELECT or
							EXPLAIN) for a GET request. If both the <codeph>prepared</codeph> and
								<codeph>statement</codeph> parameters are present and non-empty, an error is
							returned.</stentry>
					</strow>

					<strow>
						<stentry>
							<codeph>prepared</codeph>
						</stentry>
						<stentry>string</stentry>
						<stentry>Required if statement is not provided. The prepared form of the N1QL
							statement to be executed. If both the prepared and statement parameters are
							present and non-empty, an error is returned.</stentry>
					</strow>

					<strow>
						<stentry>
							<codeph>timeout</codeph>
						</stentry>
						<stentry>string (duration format)</stentry>
						<stentry>Optional. Maximum time to spend on the request before timing out. The
							default value is "0s", which means no timeout is applied, that is, the request
							runs until completion regardless of how long it takes. Its format includes an
							amount and a unit. Valid units are “ns”, “us”, “ms”, “s”, “m”, “h”, for
							nanoseconds, microseconds, milliseconds, seconds, minutes and hours,
							respectively. The unit is mandatory. Examples are “10ms” (which means 10
							milliseconds), “1m” (which means 1 minute), and “0.5s” (which means half a
							second). There is also a server-wide timeout parameter. If both the server-wide
							timeout parameter and this timeout parameter are specified, the minimum of the
							two timeouts is applied. </stentry>
					</strow>

					<strow>
						<stentry>
							<codeph>readonly</codeph>
						</stentry>
						<stentry>Boolean</stentry>
						<stentry>Optional. Always true for GET requests. By default, false for POST requests. If the
							server-wide <codeph>readonly</codeph> parameter is set to true, its setting
							supersedes the request <codeph>readonly</codeph> parameter.</stentry>
					</strow>

					<strow>
						<stentry>
							<codeph>metrics</codeph>
						</stentry>
						<stentry>Boolean</stentry>
						<stentry>Optional. Specifies that metrics should be returned with query results.
							Default value is true.</stentry>
					</strow>
					
<!--					<strow>
						<stentry>
							<codeph>max_parallelism</codeph>
						</stentry>
						<stentry>string</stentry>
						<stentry>Optional. Specifies the maximum parallelism for the query. A zero or negative value means the number of logical CPUs are used as the parallelism for the query. There is also a server wide <codeph>max_parallelism</codeph> parameter which defaults to 1. If a request includes <codeph>max_parallelism</codeph>, it is capped by the server <codeph>max_parallelism</codeph>. If a request does not include <codeph>max_parallelism</codeph>, the server wide <codeph>max_parallelism</codeph> is used.
						</stentry>
					</strow>-->

					<strow>
						<stentry>
							<codeph>$&lt;<i>identifier</i>&gt;</codeph>
						</stentry>
						<stentry>json_value</stentry>
						<stentry>Optional. If the <codeph>statement</codeph> has one or more <i>named
								parameters</i>, there should be one or more named parameters in the request.
							A named parameter consists of the $ character followed by an identifier. An
							identifier is an alphabetical character followed by one or more alphanumeric
							characters. Named parameters apply to <codeph>prepared</codeph> also.</stentry>
					</strow>

					<strow>
						<stentry>
							<codeph>args</codeph>
						</stentry>
						<stentry>list</stentry>
						<stentry>Optional. If the statement has one or more positional parameters, this
							parameter is required in the request. This is a list of JSON values, one for
							each positional parameter in the statement. Positional parameters apply to
								<codeph>prepared</codeph> also. </stentry>
					</strow>

					<strow>
						<stentry>
							<codeph>signature</codeph>
						</stentry>
						<stentry>Boolean</stentry>
						<stentry>Optional. Include a header for the results schema in the response.
							Default value is true.</stentry>
					</strow>

					<strow>
						<stentry>
							<codeph>creds</codeph>
						</stentry>
						<stentry>list</stentry>
						<stentry>Optional. A list of credentials in the form of user/password objects. If
							credentials are supplied in the request header (that is, using HTTP basic
							authentication), then <codeph>creds</codeph> is ignored. See Authentication
							Parameters section for full specification.</stentry>
					</strow>

					<strow>
						<stentry>
							<codeph>client_context_id</codeph>
						</stentry>
						<stentry>string</stentry>
						<stentry>Optional. A piece of data supplied by the client that is echoed in the
							response, if present. N1QL makes no assumptions about the meaning of this data
							and just logs and echoes it. Maximum allowed size is 64 characters. A
								<codeph>client_context_id</codeph> longer than 64 characters is cut off at
							64 characters.</stentry>
					</strow>
				</simpletable>

			</conbody>
		</concept>


		<concept id="concept_vkw_x35_nq">
			<title>Named parameters</title>
			<conbody>
				<p>If the statement in a request contains named parameters, the request should contain
					the parameters described in the following table.</p>
				<p>Here is an example of a statement containing named parameters:</p>
				<codeblock> 
  SELECT detail FROM emp WHERE name = $nval AND age > $aval
  </codeblock>

				<simpletable>
					<sthead>
						<stentry>Parameter Name</stentry>
						<stentry>Value</stentry>
					</sthead>
					<strow>
						<stentry>
							<codeph>statement</codeph>
						</stentry>
						<stentry>
							<codeph>SELECT detail FROM emp WHERE name = $nval AND age > $aval</codeph>
						</stentry>
					</strow>

					<strow>
						<stentry>
							<codeph>$nval</codeph>
						</stentry>
						<stentry>"smith"</stentry>
					</strow>

					<strow>
						<stentry>
							<codeph>$aval</codeph>
						</stentry>
						<stentry>45</stentry>
					</strow>

				</simpletable>

				<p> There should be a named parameter in the request for each query parameter in the
					request’s statement parameter. </p>

			</conbody>
		</concept>


		<concept id="concept_ipg_z35_nq">
			<title>Positional parameters</title>
			<shortdesc />
			<conbody>
				<p>If the statement in a request contains positional parameters, the request should
					contain the parameters described in the following table.</p>
				<p>Here is an example of a statement containing positional parameters:</p>

				<codeblock> SELECT detail FROM emp WHERE name = $1 AND hiredate > $2 
  </codeblock>

				<simpletable>
					<sthead>
						<stentry>Parameter Name</stentry>
						<stentry>Value</stentry>
					</sthead>
					<strow>
						<stentry>
							<codeph>statement</codeph>
						</stentry>
						<stentry>
							<codeph>SELECT detail FROM emp WHERE name = $1 AND age > $2</codeph>
						</stentry>
					</strow>

					<strow>
						<stentry>
							<codeph>args</codeph>
						</stentry>
						<stentry>[ "smith", 45 ]</stentry>
					</strow>

				</simpletable>

				<p> Positional parameters can also be specified in a statement using the question mark
					(?), so the following statement is an alternative way to specify the same query: </p>
				<simpletable>
					<sthead>
						<stentry>Parameter Name</stentry>
						<stentry>Value</stentry>
					</sthead>
					<strow>
						<stentry>
							<codeph>statement</codeph>
						</stentry>
						<stentry>
							<codeph>SELECT detail FROM emp WHERE name = ? AND age > ?</codeph>
						</stentry>
					</strow>

					<strow>
						<stentry>
							<codeph>args</codeph>
						</stentry>
						<stentry>[ "smith", 45 ]</stentry>
					</strow>

				</simpletable>

			</conbody>
		</concept>

		<concept id="concept_csy_r4x_nq">
			<title>Request content type</title>

			<conbody>
				<p> For POST requests, you can specify the parameters in the request body in URL-encoded
					format or JSON format. For GET requests, you specify the parameters in the request
					URL in URL-encoded format. For URL-encoded parameters, the format is consistent with
					the syntax for variables according to the RFC 6570. </p>
			</conbody>
		</concept>


	</concept>



	<concept id="concept_opx_v4x_nq">
		<title>Response</title>

		<conbody>
			<p>This section has two subsections: Response HTTP Status Codes and Response Body.</p>
		</conbody>

		<concept id="concept_uhz_jlb_pq">
			<title>Response HTTP status code</title>

			<conbody>
				<p>
					<b>Normal status code:</b>
				</p>
				<p><b>200 OK</b>- The request completed with or without errors. Any errors or warnings
					that occurred during the request will be in the response body. </p>

				<p>
					<b>Possible error codes:</b>
				</p>

				<p><b>400 Bad Request</b>- The request cannot be processed for one of the following
					reasons: </p>
				<ul>
					<li>The statement contains a N1QL syntax error.</li>
					<li>The request has a missing or unrecognized HTTP parameter.</li>
					<li>The request is badly formatted (for example, the request body contains a JSON syntax
						error).</li>
				</ul>
				<p><b>401 Unauthorized</b>- The credentials provided with the request are missing or
					invalid.</p>
				<p><b>403 Forbidden</b>- There is a read-only violation. Either there was an attempt to create
					or update in a GET request or a POST request where <codeph>readonly</codeph> is set
					or the client does not have the authorization to modify an object (index, keyspace or
					namespace) in the statement.</p>
				<p><b>404 Not Found</b>- The statement in the request references an invalid namespace or
					keyspace.</p>
				<p><b>405 Method Not Allowed</b>- The REST method type in the request is
					unsupported.</p>
				<p><b>409 Conflict</b>- There is an attempt to create an object (keyspace or index) that
					already exists.</p>
				<p><b>410 Gone</b>- The server is shutting down gracefully. Previously made requests are
					being completed, but no new requests are being accepted.</p>
				<p><b>500 Internal Server Error</b>- There was an unforeseen problem processing the
					request.</p>
				<p><b>503 Service Unavailable</b>- There is an issue (that is possibly temporary)
					preventing the request being processed; the request queue is full or the data store
					is not accessible.</p>


			</conbody>
		</concept>

		<concept id="concept_kvm_llb_pq">
			<title>Response body</title>

			<conbody>
				<p>The response body has the following structure: </p>
				<codeblock>
  {
      "requestID": UUID,
      "clientContextID": string,
      "signature": 
         { 
            *.* |
            ( field_name:    field_type,
            ...
            )
         },
  
         "results": 
         [
            json_value,
            …    
         ],
  
       "errors":  
         [ 
             { "code": int, "msg":  string }, ... 
          ],
  
        "warnings":    
         [ 
             { "code": int, "msg": string }, … 
         ],

        "status":  "success",
  
       "metrics":  
        { 
             "elapsedTime": string, 
             "executionTime": string,
             "resultCount": unsigned int, 
             "resultSize": unsigned int,
             "mutationCount": unsigned int, 
             "errorCount": unsigned int,
             "warningCount": unsigned int
         }
  }
 </codeblock>

				<simpletable>
					<sthead>
						<stentry>Parameter name</stentry>
						<stentry>Value</stentry>
						<stentry>Description</stentry>
					</sthead>

					<strow>
						<stentry>
							<codeph>requestID</codeph>
						</stentry>
						<stentry>UUID</stentry>
						<stentry>A unique identifier for the response.</stentry>
					</strow>

					<strow>
						<stentry>
							<codeph>clientContextID</codeph>
						</stentry>
						<stentry>string</stentry>
						<stentry>The clientContextID of the request, if one was supplied (see
							client_context _id in Request Parameters).</stentry>
					</strow>

					<strow>
						<stentry>
							<codeph>signature</codeph>
						</stentry>
						<stentry>object</stentry>
						<stentry>The schema of the results. Present only when the query completes
							successfully.</stentry>
					</strow>

					<strow>
						<stentry>
							<codeph>results</codeph>
						</stentry>
						<stentry>list</stentry>
						<stentry>A list of all the objects returned by the query. An object can be any
							JSON value.</stentry>
					</strow>

					<strow>
						<stentry>
							<codeph>status</codeph>
						</stentry>
						<stentry>enum</stentry>
						<stentry>The status of the request. Possible values are: success, running, errors,
							completed, stopped, timeout, fatal.</stentry>
					</strow>

					<strow>
						<stentry>
							<codeph>errors</codeph>
						</stentry>
						<stentry>list</stentry>
						<stentry>A list of 0 or more error objects. If an error occurred during processing
							of the request, it will be represented by an error object in this
							list.</stentry>
					</strow>

					<strow>
						<stentry>
							<codeph>error.code</codeph>
						</stentry>
						<stentry>int</stentry>
						<stentry>A number that identifies the error.</stentry>
					</strow>

					<strow>
						<stentry>
							<codeph>error.msg</codeph>
						</stentry>
						<stentry>string</stentry>
						<stentry>A message describing the error in detail.</stentry>
					</strow>

					<strow>
						<stentry>
							<codeph>warnings</codeph>
						</stentry>
						<stentry>list </stentry>
						<stentry>A list of 0 or more warning objects. If a warning occurred during
							processing of the request, it is represented by a warning object in this
							list.</stentry>
					</strow>

					<strow>
						<stentry>
							<codeph>warning.code</codeph>
						</stentry>
						<stentry>int</stentry>
						<stentry>A number that identifies the warning.</stentry>
					</strow>

					<strow>
						<stentry>
							<codeph>warning.msg</codeph>
						</stentry>
						<stentry>string</stentry>
						<stentry>A message describing the warning in full.</stentry>
					</strow>

					<strow>
						<stentry>
							<codeph>metrics</codeph>
						</stentry>
						<stentry>object</stentry>
						<stentry>An object containing metrics about the request.</stentry>
					</strow>

					<strow>
						<stentry>
							<codeph>metrics.elapsedTime</codeph>
						</stentry>
						<stentry>string</stentry>
						<stentry>The total time taken for the request, that is the time from when the
							request was received until the results were returned.</stentry>
					</strow>

					<strow>
						<stentry>
							<codeph>metrics.executionTime</codeph>
						</stentry>
						<stentry>string</stentry>
						<stentry>The time taken for the execution of the request, that is the time from
							when query execution started until the results were returned.</stentry>
					</strow>

					<strow>
						<stentry>
							<codeph>metrics.resultCount</codeph>
						</stentry>
						<stentry>unsigned int</stentry>
						<stentry>The total number of objects in the results.</stentry>
					</strow>

					<strow>
						<stentry>
							<codeph>metrics.resultSize</codeph>
						</stentry>
						<stentry>unsigned int</stentry>
						<stentry>The total number of bytes in the results.</stentry>
					</strow>

					<strow>
						<stentry>
							<codeph>metrics.mutationCount</codeph>
						</stentry>
						<stentry>unsigned int</stentry>
						<stentry>The number of mutations that were made during the request.</stentry>
					</strow>

					<strow>
						<stentry>
							<codeph>metrics.errorCount</codeph>
						</stentry>
						<stentry>unsigned int</stentry>
						<stentry>The number of errors that occurred during the request.</stentry>
					</strow>

					<strow>
						<stentry>
							<codeph>metrics.warningCount</codeph>
						</stentry>
						<stentry>unsigned int</stentry>
						<stentry>The number of warnings that occurred during the request.</stentry>
					</strow>



				</simpletable>

			</conbody>
		</concept>

	</concept>

	<concept id="concept_knt_bsx_nq">
		<title>Request error and warning format</title>

		<conbody>
			<p>Errors and warnings have the following format:</p>
			<codeblock>
{
     "code" : int,
     "msg" : string,
     "name": string,
     "sev" : int,
     "temp" : bool
}
  
 </codeblock>
			<p><b>code:</b> A unique number for the error or warning. The code ranges are partitioned
				by component. The codes can also include parts that indicate severity and transience.
					<b>code</b> is always present in every condition returned in the Query REST API or
				captured in a log.</p>
			<p><b>msg:</b>A detailed description of the condition. <b>msg</b> is always present in
				every condition returned in the Query REST API or captured in a log. </p>
			<p> The following elements are optional and can be present in a condition returned in the
				Query REST API or captured in a log. Additional elements not listed here might also be
				present. Clients and consumers of the REST API or the logs must accommodate any
				additional elements. </p>
			<p><b>name:</b>Unique name that has a 1:1 mapping to the <b>code</b>. Uniquely identifies
				the condition. <b>name</b> is helpful for pattern matching and can have meaning making
				it more memorable than the code). The name should be fully qualified. Here are some
				examples:</p>
			<ul>
				<li>
					<codeph>indexing.scan.io_failure</codeph>
				</li>
				<li>
					<codeph>query.execute.index_not_found</codeph>
				</li>
			</ul>

			<p><b>sev:</b>One of the following N1QL severity levels (listed in order of severity):</p>
			<ol>
				<li>Severe</li>
				<li>Error</li>
				<li>Warn</li>
				<li>Info</li>
			</ol>
			<p><b>temp:</b>Indicates if the condition is transient (e.g. queue is full). If the value
				is <b>false</b>, it tells clients and users that a retry without modification produces
				the same condition.</p>

		</conbody>
	</concept>


</concept>
