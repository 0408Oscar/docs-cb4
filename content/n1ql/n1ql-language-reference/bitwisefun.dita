<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="untitled2">
    <title>Bitwise Functions in N1QL</title>
    <body>
        <p>All bitwise functions can take only an integer. All numbers are 64-bit signed integers.
            All non-integer numbers and other data types result in an error.</p>
        <section id="section_f5c_t55_s1b">
            <title>BitAND - BitAND(<varname>num1</varname>, <varname>num2</varname>)</title>
            <p>Returns the result of a bitwise AND operation performed on two integer values, for
                example:<codeblock>3    (0011 in binary)
6    (0110 in binary)

SELECT BitAND(3,6);

results: [
   "$1": 2
]</codeblock></p>
        </section>
        <section id="section_lmd_mv5_s1b">
            <title>BitOR - BitOR(<varname>num1</varname>, <varname>num2</varname>)</title>
            <p>Returns the result of a bitwise OR operation performed on two integer values, for
                example:<codeblock>3    (0011 in binary)
6    (0110 in binary)

SELECT BitOR(3,6);

results: [
   "$1": 7
]</codeblock></p>
        </section>
        <section id="section_rxz_vv5_s1b">
            <title>BitNOT - BitNOT(<varname>num1</varname>)</title>
            <p>Returns the results of a bitwise logical NOT operation performed on one integer
                value, for
                example:<codeblock>3    (0011 in binary)

SELECT BitNOT(3);

results: [
   "$1": -4
]</codeblock></p>
        </section>
        <section id="section_qvr_2w5_s1b">
            <title>BitXOR - BitXOR(<varname>num1</varname>, <varname>num2</varname>)</title>
            <p>Returns the result of a bitwise Exclusive OR operation performed on two integer
                values. The bitwise Exclusive OR operation compares each bit of value1 to the
                corresponding bit of value2. If one bit is zero (0) and the other bit is 1, the
                corresponding result bit is set to 1. Otherwise, the corresponding result bit is set
                to zero
                (0).<codeblock>3    (0011 in binary)
6    (0110 in binary)

SELECT BitXOR(3,6);

results: [
   "$1": 5
]</codeblock></p>
        </section>
        <section id="section_zms_vw5_s1b">
            <title>BitSHIFT - BitSHIFT(<varname>num1</varname>, <varname>shift_amount</varname>,
                    <varname>rotate</varname>)</title>
            <p>Returns the result of a bit logical left shift or right shift operation performed on
                an integer value. If the input<codeph> shift_amount </codeph>is negative, then it
                represents a right shift; otherwise, it represents a left shift.</p>
            <p><codeph>Rotate </codeph>is an optional argument. If not present, then it is assumed
                as FALSE.</p>
            <p><codeph>Rotate </codeph>is a boolean value. If FALSE, then this is a logical shift;
                if TRUE, it is a circular shift (shift-and-rotate operation). Logical shift means
                bits shifted off the end of a value are considered lost. Circular shift means that
                bits shifted off the end of a value are rotated back onto the value at the
                    <i>other</i> end. In other words, the bits rotate in what might be thought of as
                a circular pattern; therefore, no bits are ever lost.  </p>
            <p><b>Example 1</b>:  left
                    shift.<codeblock>6    (0110 in binary)

SELECT BitSHIFT(6,1,FALSE);

results: [
   "$1": 12
]</codeblock><b>Example
                    2</b>:  right
                shift.<codeblock>6    (0110 in binary)

SELECT BitSHIFT(6,-2);

results: [
   "$1": 1
]</codeblock></p>
        </section>
        <section id="section_cmz_k4v_s1b">
            <title>BitSET - BitSET(<varname>num1</varname>, <varname>position</varname> |
                    <varname>position_list</varname>)</title>
            <p>Returns the result after setting the specified bit in a single value or an array of
                positions.</p>
            <p>Specifying a negative or zero bit position does not result in any change to the
                value. If the bit is already set, then it stays set. <note>Bit 1 is on the
                    left.</note><note>Specifying a negative or zero position makes the function
                    return a
                null.</note><codeblock>6    (0110 in binary)

SELECT BitSET(6,1);

results: [
   "$1": 7
]

SELECT BitSET(6,[1,2]);

results: [
   "$1": 7
]

SELECT BitSET(6,[1,4]);

results: [
   "$1": 15
]</codeblock></p>
        </section>
        <section id="section_unf_2sv_s1b">
            <title>IsBitSET / BitTEST - (<varname>num1</varname>, <varname>position</varname> |
                    <varname>position_list</varname>, <varname>all_set</varname>)</title>
            <p>Return TRUE or FALSE depending on whether the bits in the given position or positions
                are set.</p>
            <p><codeph>all_set </codeph>[optional] is a boolean value that is TRUE by default.  TRUE
                means "all" values; and FALSE means "any" value.</p>
            <p>If ANY, then it returns TRUE even if a bit in one of the positions is set.</p>
            <p>If ALL, then bits in all input positions must be set.</p>
            <p>For
                example,<codeblock>6    (0110 in binary)

SELECT IsBitSET(6,1);

results: [
   "$1": FALSE
]

SELECT BitTest(1,[1,2],FALSE);

results: [
   "$1": TRUE

SELECT IsBitSET(6,[2,3],TRUE);

results: [
   "$1": TRUE
]</codeblock></p>
        </section>
        <section id="section_rcg_sbw_s1b">
            <title>BitCLEAR - BitCLEAR(<varname>num1</varname>, <varname>position</varname> |
                    <varname>position_list</varname>)</title>
            <p>Returns the result after clearing the specified bit in a value or array of
                positions.</p>
            <p>Specifying a negative or zero bit position does not result in any change to the
                    value.<note>Bit 1 is on the left.</note><note>Specifying a negative or zero bit
                    position makes the function return a null.</note></p>
            <codeblock>6    (0110 in binary)

SELECT BitCLEAR(6,1);

results: [
   "$1": 6
]

SELECT BitCLEAR(6,[1,2]);

results: [
   "$1": 4
]</codeblock>
        </section>
    </body>
</topic>
