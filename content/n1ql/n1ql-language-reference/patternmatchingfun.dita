<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept
  PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="topic_8_11"  xml:lang="en-US">
  <title id="title__Toc272567381">Pattern-matching Functions</title>
 
<conbody>
    <p>Pattern-matching functions allow you to find regular expression patterns in strings or
      attributes. Regular expressions can formally represent various string search patterns using
      different special characters to indicate wildcards, positional characters, repetition,
      optional or mandatory sequences of letters etc. N1QL functions are available to find matching
      patterns, find position of matching pattern, or replace a pattern with a new string.</p>
    <p>For more information on all supported REGEX patterns, see <xref
        href="https://golang.org/pkg/regexp/syntax/" format="html" scope="external"
        >https://golang.org/pkg/regexp/syntax/</xref><note>Couchbase Server 4.x N1QL supports
        regular expressions supported by The Go Programming Language version 1.4.2.</note></p>
    <p>REGEXP_CONTAINS(expression, pattern)</p>
    <p dir="ltr">Arguments:</p>
    <p dir="ltr">expression: string, or any N1QL expression that evaluates to a string</p>
    <p dir="ltr">pattern: string representing a supported regular expression</p>
  <p>Returns True if the string value contains the regular expression pattern.</p><p>Example:</p>
  <p>
    <codeblock>SELECT name 
FROM `travel-sample` 
WHERE type = "landmark" AND REGEX_CONTAINS(name, ".*In+") 
LIMIT  2;</codeblock>
  </p>
  <p>Results:</p>
  <p>
    <codeblock>[
  {
    "name": "Beijing Inn"
  },
  {
    "name": "Sportsman Inn"
  }
]</codeblock>
  </p>
    
    <p>REGEXP_LIKE(expression, pattern)</p>
    <p dir="ltr">Arguments:</p>
    <p dir="ltr">expression: string, or any N1QL expression that evaluates to a string</p>
    <p dir="ltr">pattern: string representing a supported regular expression</p>
  <p>Returns True if the string value matches the regular expression pattern.</p>
    <p>Example:</p><p>
    <codeblock>SELECT name
FROM `travel-sample` 
WHERE type = "hotel" and REGEX_LIKE(name, "In+.*") 
LIMIT 4;</codeblock>
  </p>
  <p>Results:</p>
  <p>
    <codeblock>[
  {
    "name": "Inveraray Youth Hostel"
  },
  {
    "name": "Inverness Youth Hostel"
  },
  {
    "name": "Indian Cove Campground"
  },
  {
    "name": "Inn at Marina del Rey"
  }
]</codeblock>
  </p>
    <p>REGEXP_POSITION(expression, pattern)</p>
    <p dir="ltr">Arguments:</p>
    <p dir="ltr">expression: string, or any N1QL expression that evaluates to a string</p>
    <p dir="ltr">pattern: string representing a supported regular expression</p>
  <p>Returns first position of the occurrence of the regular expression <i>pattern</i> within the
      input string <i>expression</i>. Returns -1 if no match is found. Position counting starts from
      zero.</p>
    <p>Example:</p>
    <p>The following query finds positions of first occurrence of vowels in each word of the
        <i>name</i> attribute.</p><p>
        <codeblock>SELECT name, ARRAY REGEX_POSITION(x, "[aeiou]") FOR x IN TOKENS(name) END
FROM `travel-sample` 
WHERE type = "hotel" 
LIMIT 2;</codeblock>
  </p>
  <p>Results:</p>
  <p>
    <codeblock>[
  {
    "$1": [
      1,
      1,
      1
    ],
    "name": "Medway Youth Hostel"
  },
  {
    "$1": [
      1,
      2,
      1
    ],
    "name": "The Balmoral Guesthouse"
  }
]</codeblock>
  </p>
    <p>REGEXP_REPLACE(expression, pattern, repl [, n ])</p>
    <p dir="ltr">Arguments:</p>
    <p dir="ltr">expression: string, or any N1QL expression that evaluates to a string</p>
    <p dir="ltr">pattern: string representing a supported regular expression</p>
    <p dir="ltr">repl: string, or any N1QL expression that evaluates to a string</p>
    <p dir="ltr">n: the maximum number of times to find and replace the matching pattern</p>
    <p>Returns new string with occurrences of pattern replaced with <i>repl</i>. If <i>n</i> is
      given, at the most <i>n</i> replacements are performed. If <i>n</i> is not provided, all
      matching occurrences are replaced.</p>
    <p>Example 1:</p><p>
        <codeblock>SELECT REGEX_REPLACE("N1QL is Sql(infact, sql++) for NoSql", "[sS][qQ][lL]", "SQL"),
       REGEX_REPLACE("Winning innings Inn", "[Ii]n+", "Hotel", 6),
       REGEX_REPLACE("Winning innings Inn", "[IiNn]+g", upper("inning"), 2);</codeblock>
      </p>
  <p>Results:</p>
  <p>
    <codeblock>[
  {
    "$1": "N1QL is SQL(infact, SQL++) for NoSQL",
    "$2": "WHotelHotelg HotelHotelgs Hotel",
    "$3": "WINNING INNINGs Inn"
  }
]</codeblock>
  </p>
    <p>Example 2: In this example, the query retrieves first 4 documents and replaces the pattern of
      repeating <i>n</i> with emphasized ‘NNNN’.</p>
    <codeblock>SELECT name, REGEX_REPLACE(name, "n+", "NNNN") as new_name
FROM `travel-sample`
LIMIT 4;</codeblock>
    
    <p>Results:</p>
    <p>
      <codeblock>[
  {
    "name": "40-Mile Air",
    "new_name": "40-Mile Air"
  },
  {
    "name": "Texas Wings",
    "new_name": "Texas WiNNNNgs"
  },
  {
    "name": "Atifly",
    "new_name": "Atifly"
  },
  {
    "name": "Jc royal.britannica",
    "new_name": "Jc royal.britaNNNNica"
  }
]</codeblock>
    </p>
  </conbody>

</concept>
