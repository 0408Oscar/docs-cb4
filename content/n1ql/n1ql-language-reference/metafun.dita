<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept
  PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="topic_8_8" xml:lang="en-US">
  <title id="title__Toc272567350">Miscellaneous Utility Functions</title>
  <conbody >
    <p>Meta functions retrieve information about the document or item as well as perform base64
			encoding. </p>
    <dl>
      <dlentry>
        <dt>BASE64(<varname>expression</varname>)</dt>
        <dd>Returns the base64 encoding of the given <varname>expression</varname>.</dd>
      </dlentry>
      <dlentry>
        <dt>BASE64_ENCODE(<varname>expression</varname>)</dt>
        <dd>Alias of BASE64().</dd>
      </dlentry>
      <dlentry>
        <dt>BASE64_DECODE(<varname>expression</varname>)</dt>
        <dd>It reverses the encoding done by the BASE64() or BASE64_ENCODING() functions.</dd>
      </dlentry>
      <dlentry>
        <dt>META(<varname>expression</varname>)</dt>
        <dd>Returns metadata for the document <varname>expression</varname>. <p>You can use the
            meta() function when creating an index. In this context, the meta() function does not
            require a parameter. It implicitly uses the keyspace being indexed.
            <codeblock outputclass="language-json">CREATE INDEX id_idx on `travel-sample`(meta().id);</codeblock>
            The meta() function in a query is given an expression; if this resolves to a keyspace
            alias, the requested field (id or CAS) is returned.
            <codeblock outputclass="language-json">SELECT b.name, meta(b).id 
FROM `travel-sample` b 
WHERE meta(b).id > "g" 
LIMIT 1;

Results:
[
  {
    "id": "hotel_10025",
    "name": "Medway Youth Hostel"
  }
]</codeblock></p></dd>
      </dlentry>
      <dlentry>
        <dt>Pairs()</dt>
        <dd>This function generates an array of arrays of [<varname>field_name</varname>,
            <varname>value</varname>] pairs of all possible fields in the given JSON object
            <varname>obj</varname>.  </dd>
        <dd>NOTE:  Nested sub-object fields are explored recursively.</dd>
      </dlentry>
      <dlentry>
        <dt>UUID()</dt>
        <dd>Returns a version 4 universally unique identifier (UUID).</dd>
      </dlentry>
    </dl>
    
   </conbody></concept>
