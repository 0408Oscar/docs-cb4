<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_ffr_mth_t5">
  <title>Sub-document API</title>
  <body>
    <p>The sub-document API enables developers to access and operate on parts of a JSON document.
      You no longer need to retrieve an entire document to inspect or modify a field. This improves
      the performance and brings better efficiency to the network IO path, especially when working
      with large documents. </p>
    <p>The existing key-value APIs operate only on entire documents. This means that inspecting a
      single field requires the entire document to be retrieved over the network. Modifying a single
      field involves retrieving the entire document over network, modifying the field locally, and
      then updating the entire locally modified document.  While key-value APIs are well suited for
      binary values and trivially small JSON documents, this can become a challenge when working
      with larger JSON documents. </p>
    <p>With the addition of sub-document API, you can now access and operate on individual JSON
      components, <term>sub-document</term>, within a larger JSON document. For example, consider
      the following JSON document with docId "foo":
      <codeblock>       
        {
        name: {
        "first": John,
        "last": Smith
        },
        ssn: 12345678,
        email: jsmith@abc.com,
        …
        }
       </codeblock>
      You can retrieve John's last name using the following:
      <codeblock>SUBDOC_GET("foo", "name.last")</codeblock> Note that only the requested or modified
      fields are sent over the network as opposed to sending the entire document over network when
      using key-value APIs.</p>
    <p>When using key-value APIs, updates to a single field required CAS to maintain consistency. In
      case of highly contended documents, if a CAS mismatch occurs the operation needs to be restarted even though the modified field remains the same. Sub-document APIs do not require the use of CAS when updating single fields. However, you can still use the CAS protection for the document if your application requires it. <note>Need more info here...</note></p>
    <p>The API uses <xref
        href="http://developer.couchbase.com/documentation/server/4.1/n1ql/n1ql-intro/queriesandresults.html"
        format="html" scope="external">N1QL's path syntax</xref> to refer to individual fields in a document. It uses the dot notation syntax to identify the logical location of an attribute within a document. In the example above, the path to the last name field is "<filepath>name.last</filepath>". </p>
    <p>Updates to a field are atomic and do not collide with updates to a different field on the
      same key. For example, the following operations do not collide although they are updating the
      same
      document.<codeblock>[Thread 1]
        cb.upsert_in(Path("foo", "name.last"), "Lennon")
[Thread 2]
        cb.upsert_in(Path("foo", "email"), "jlennon@abc.com")</codeblock></p>
    
    <p><b>Operations</b>
      <note>List all operations? ()<p>In addition to retrieving and setting fields, the sub document
          API allows true “append” and “prepend” operations on arrays, as well as increment and
          decrement operations on numeric values.</p></note></p>
    <section><title>Multi-path operations</title>
      <p>Sub-document API also supports operating on multiple paths in a single key with potentially
        different commands. For the example document above, you can look up John's last name and
        email in one operation as:
        <codeblock>MULTI_LOOKUP("foo",
        [ GET("name.last"),
          GET("email")
          ]
        )  </codeblock></p></section>
    <p>Use the following syntax to retrieve multiple fields from a single
      key:<codeblock>MULTI_LOOKUP(key, [{command, path}, {command, path}…])</codeblock></p>
      <p> The multi-path operations can retrieve multiple disjoint fields from a single key
      atomically.</p>
    <p>Use the following syntax to modify multiple fields from a single key:</p>
    <codeblock>MULTI_MUTATE(key, [{command, path, value}, {command, path, value}...]</codeblock>
    <p>The multi-path operations can modify multiple disjoint fields from a single key
      atomically.</p>
    <note type="important">A multi-path operation can only perform a retrieval or a mutation, not both.</note>
    <p>For information on using the sub-document API with Couchbase SDK, refer to the individual SDK documentation.</p> 
  </body>
</topic>
