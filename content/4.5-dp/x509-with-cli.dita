<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_tyj_r2n_s5">
  <title>Using CLI</title><shortdesc>There are several new CLI commands that are used to enable authentication and to manage
    certificates.</shortdesc>
 
 <body>
   <p>TLS encryption can be enabled or disabled cluster-wide in Couchbase Server with the command
        <cmdname>enable-servercaauth</cmdname>, which is set to <codeph>false</codeph> by default. </p>
    <p>Couchbase Server uses the following command to verify that all cluster per-node certificates
      are signed by the same root CA certificate. </p>
   
   
   <section><title><cmdname>enable-servercaauth</cmdname></title>
     <p><b>Syntax</b></p>
   <codeblock>couchbase-cli enable-servercaauth -c [host]:8091 -u[admin] -p[password] [options]</codeblock>
  
   <p><b>Options</b></p>  
     <dl>
     <dlentry>
       <dt>--enable=[0|1]</dt>
       <dd>Enables or disables CA authentication. <p>If no valid CA certificate and key file are
              loaded on all nodes this command will fail. </p><p>When you have
                <codeph>--enble=0</codeph>, a self-signed certificate should be used; when  you have
                <codeph>--enble=1</codeph>, Couchbase Server must validate per node certificates for
              the cluster.</p></dd>
     </dlentry>
   </dl>  
     
   </section>
   
   <section><title><cmdname>manage-certificates</cmdname></title>
     
   <p><b>Syntax</b></p>
     <codeblock>couchbase-cli manage-certificates -c [nodehost ip]:8091 -u[admin] -p[password] [options]</codeblock>
    
     
     <p><b>Options</b></p>  
     <dl>
       <dlentry>
         <dt>--node-private-key=PATH</dt>
         <dd>Local file path on the node that contains private key for the node in .key format.
              <p>For example:
              <filepath>/opt/couchbase/var/lib/couchbase/keys/server.key</filepath></p></dd>
       </dlentry>
     </dl> 
     
     <dl>
       <dlentry>
         <dt>--node-cert-file=PATH
         </dt>
         <dd>Local file path on the node that contains certificate for the node in .pem format.
              <p>For example:
              <filepath>/opt/couchbase/var/lib/couchbase/keys/server.pem</filepath></p></dd>
       </dlentry>
     </dl>
    <dl>
      <dlentry>
        <dt>--node-ca-file=PATH</dt>
        <dd>Local file path on the node that contains CA certificate for the cluster in .pem format.
              <p>For example:<filepath>
              /opt/couchbase/var/lib/couchbase/keys/cacert.key</filepath></p></dd>
      </dlentry>
    </dl>
     <dl>
       <dlentry>
         <dt>--node-list-certificates</dt>
         <dd>Produces a list of certificates for the node (For each node, emits the active node certificate, 
           corresponding active CA root certificate, non-active CA certificate,  and thumbprint of the certificate chain.)</dd>
       </dlentry>
     </dl>
     
   </section> 
   
  <section><title>ssl-manage</title>
    
  <p><b>Syntax</b></p>
    <codeblock>couchbase-cli ssl-manage</codeblock>
    <p>This command is already available in Couchbase Server<xref
          href="http://developer.couchbase.com/documentation/server/4.1/cli/cbcli/ssl-manage.html"
          format="html" scope="external">version 4.x.</xref> with two options: </p>
    <ul>
      <li><codeph>--retrieve-cert=[certificate]</codeph></li>
      <li><codeph>--regenerate-cert=[certificate]</codeph></li>
    </ul>
      <p>The new options are used as follows:</p>
    
    
    
    <dl>
      <dlentry>
        <dt>--cert-info</dt>
        <dd>Prints available cluster CA info such as type, subject, expiration date, and
            warnings:</dd>
        <dd><codeblock>couchbase-cli ssl-manage -c [nodehost ip]:8091 -u[admin] -p[password] --cert-info</codeblock></dd>
      </dlentry>
    </dl>
   
   <dl>
     <dlentry>
       <dt>--node-cert</dt>
       <dd>Prints node certificate along with its subject and expiration date:</dd>
       <dd><codeblock>couchbase-cli ssl-manage -c [nodehost ip]:8091 -u[admin] -p[password] --node-cert</codeblock></dd>
     </dlentry>
   </dl>
   
   <dl>
     <dlentry>
       <dt>--upload-cluster-ca=[path to pem encoded root certificate]</dt>
       <dd>Uploads Cluster CA via <codeph>POST /controller/uploadClusterCA</codeph></dd>
       <dd><codeblock>couchbase-cli ssl-manage -c [nodehost ip]:8091 -u[admin] -p[password] \
         --upload-cluster-ca=[path to pem encoded root certificate]</codeblock></dd>
     </dlentry>
   </dl>
   
    <dl>
      <dlentry>
        <dt>--set-node-certificate --chain[path to pem encoded certificate chain] --pkey[path to pem
            encoded private key]</dt>
        <dd>Creates inbox folder, copies <codeph>chain.pem</codeph> and <codeph>pkey.pem</codeph> to
            the inbox folder, calls <codeph>POST /node/controller/reloadCertificate</codeph></dd>
        <dd> <codeblock>couchbase-cli ssl-manage -c [nodehost ip]:8091 -u[admin] -p[password] \
          --set-node-certificate --chain[path to pem encoded certificate chain] \
          --pkey[path to pem encoded private key]</codeblock></dd>
      </dlentry>
    </dl>
    
   
    
  </section> 
   
   
   
   
  </body>
</topic>
