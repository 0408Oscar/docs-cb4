<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_upj_jdq_1v">
  <title>Flexible Commutative JOIN in N1QL</title>
  <body><p>In Couchbase Server 4.5, N1QL introduces a new type of JOIN called <term>index join</term>
        to enable JOIN commutativity. </p>
      <p>The N1QL JOINs supported in earlier versions, henceforth referred to as <term>lookup
        joins</term>, allow only left-to-right JOINs. That means, each qualified document from the
      left hand side (LHS) of the JOIN operator is required to produce primary keys of documents on
      the right hand side (RHS). These keys are subsequently <term>nested-loop-joined</term> to
      access qualified RHS documents. This also means right-to-left JOINs with RHS documents
      containing primary key references to LHS documents cannot be joined efficiently using any
      index. For example, consider the <parmname>beer-sample</parmname> data with beer and brewery
      documents, where <parmname>beer.brewery_id</parmname> is the primary key of brewery documents
      and brewery documents have no reference to beer documents. The following query to get a list
      of beers from brewers in California cannot be efficiently executed without making a Cartesian
      product of all beer documents (LHS) with all brewery documents (RHS):
      <codeblock>SELECT * FROM `beer-sample` beer JOIN `beer-sample` brewery ON KEYS beer.brewery_id 
    WHERE beer.type="beer" AND brewery.type="brewery" AND brewery.state="California”;</codeblock>
      This query cannot use any index on brewery to directly access breweries in California because
      "brewery" is on the RHS. Also, you cannot rewrite the query to put the brewery document on the
      LHS (to use any index) and the beer document on the RHS because the brewery documents (on the
      LHS) have no primary keys to access the beer documents (on the RHS). </p>
      <p>Using the new <term>index joins</term>, the same query can be written as:
      <codeblock>Required Index:
  CREATE INDEX beer_brewery_id ON `beer-sample`(brewery_id) WHERE type="beer”;

Optional index:
  CREATE INDEX brewery_state ON `beer-sample`(state) WHERE type="brewery";
          
SELECT * FROM  `beer-sample` brewery JOIN `beer-sample` beer 
  ON KEY  beer.brewery_id  FOR brewery 
  WHERE  beer.type="beer" AND brewery.type="brewery" AND brewery.state="California";</codeblock></p><p>There are three important changes in the index scan syntax: <ul id="ul_fky_g32_1v">
            <li>CREATE INDEX on the ON KEY expression <parmname>beer_brewery_id</parmname> to access
              beer documents using <parmname>brewery_id</parmname> (which are produced on the
              LHS).</li>
            <li>The ON KEY <parmname>beer.brewery_id</parmname> FOR brewery. This enables N1QL to use
              the index <parmname>beer_brewery_id</parmname>.</li>
            <li>Create any optional index such as <parmname>brewery.state</parmname> that can be used
              on brewery (LHS).</li>
          </ul><note>For index joins, the syntax uses ON KEY (singular) instead of ON KEYS (plural). This is because for index joins, the ON KEY expression must produce a scalar value. For lookup joins, the ON KEYS expression can produce either a scalar or an array value. </note></p><codeblock spectitle="Syntax"> CREATE INDEX <varname>name</varname> rhs(lhs_key);
            
 SELECT <varname>projection_list</varname> FROM  lhs  JOIN  rhs
   ON KEY rhs.lhs_key  FOR  lhs
   [ WHERE <varname>predicates</varname>] ;</codeblock>
  </body>
</topic>
