<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_b4g_4bb_y5">
  <title>Other N1QL Enhancements</title>
  <body>
    <section id="fn-array-insert"><title>Array INSERT function</title>
      <p>Couchbase Server 4.5 introduces the <cmdname>array_insert</cmdname> function to insert a
        value into a specific position in an array and return the new array.
        <codeblock spectitle="Syntax"><varname>array</varname> array_insert( <varname>array-name</varname>, <varname>position</varname>, <varname>value</varname>)</codeblock><codeblock spectitle="Example">go_cbq> SELECT array_insert(schedule, 2, "jsmith")[2]  
              FROM `travel-sample` 
              WHERE type = "route"  
              LIMIT 1;
{
    "requestID": "c0e073ed-5eca-451d-bcc2-57e2e01ab93d",
    "signature": {
                  "$1": "json"
                 },
    "results" : [
                  {
                  "$1": "jsmith"
                  }
                ],
    "status": "success",
    "metrics": {
                "elapsedTime": "4.883422ms",
                "executionTime": "4.849777ms",
                "resultCount": 1,
                "resultSize": 38
                }
}</codeblock></p></section>
    <section id="fn-object-add-put-rem"><title>Functions on Objects</title>
      <p>Couchbase Server 4.5 introduces the following N1QL functions to enable easier manipulation
        of objects: <xref href="#topic_b4g_4bb_y5/obj-add" format="dita">object-add()</xref>, <xref
          href="#topic_b4g_4bb_y5/obj-put" format="dita">object-put()</xref>, and
        <xref href="#topic_b4g_4bb_y5/obj-remove" format="dita">object-remove()</xref>.<ul id="ul_ty5_vw1_1v">
          <li id="obj-add"><b>object_add()</b>
            <p>This function adds new attributes and values to a given object and returns the
              updated object.
              <codeblock>object_add(<varname>object</varname>, <varname>new_attr_key</varname>, <varname>new_attr_value</varname>)</codeblock>
              Note that: <ul id="ul_tb5_z1b_1v">
                <li>This function does not perform key substitution.</li>
                <li>If you add a duplicate attribute (that is, if the key is found), it returns an
                  error or NULL object.</li>
                <li>If <varname>new_attr_key</varname> or <varname>new_attr_value</varname> is
                  MISSING, or if <varname>new_attr_key</varname> is NULL, it returns the
                    <varname>object</varname> unmodified.</li>
                <li>If <varname>object</varname> is not an object or NULL, it returns a NULL value
                  object.</li>
              </ul><codeblock spectitle="Example">go_cbq> SELECT object_add(schedule[0], "day_new", 1) 
             FROM `travel-sample` 
             WHERE type = "route"  
             LIMIT 1;
"results" : [
              {
                "$1": {
                    "day": 0,
                    "day_new": 1,
                    "flight": "AF552",
                    "utc": "14:41:00"
                    }
               }
             ]       </codeblock></p></li>
          <li id="obj-put"><b>object_put()</b>
            <p>This function adds new or updates existing attributes and values to a given object,
              and returns the updated object.
              <codeblock>object_put(<varname>object</varname>, <varname>attr_key</varname>, <varname>attr_value</varname>)</codeblock>
              Note that: <ul id="ul_kck_2db_1v">
                <li>If <varname>attr_key</varname> is found in the object, it replaces the
                  corresponding attribute value by <varname>attr_value</varname>.</li>
                <li>If <varname>attr_value</varname> is MISSING, it deletes the corresponding
                  existing key (if any), like<cmdname> object_remove()</cmdname>.</li>
                <li>If <varname>attr_key</varname> is MISSING, it returns a MISSING value.</li>
                <li>If <varname>attr_key</varname> is not an object, it returns a NULL value.</li>
              </ul><codeblock spectitle="Example">go_cbq> SELECT object_put(schedule[0], "day", 1)  
             FROM `travel-sample` 
             WHERE type = "route"  
             LIMIT 1;
"results" : [
              {
                 "$1": {
                     "day": 1,
                     "flight": "AF552",
                     "utc": "14:41:00"
                     }    
              }
            ]</codeblock></p></li>
          <li id="obj-remove"><b>object_remove()</b>
            <p>This function removes the specified attribute and corresponding values from the given
              object.
              <codeblock>object_remove(<varname>object</varname>, <varname>attr_key</varname>)</codeblock>
              Note that: <ul>
                <li>If the <varname>attr_key</varname> is MISSING, it returns a MISSING value.</li>
                <li>If the <varname>attr_key</varname> is not an object, it returns a NULL value.
                  <codeblock spectitle="Example">go_cbq> SELECT object_remove(schedule[0], "day")  
             FROM `travel-sample` 
             WHERE type = "route"  
             LIMIT 1;
"results" : [
              {
                 "$1": {
                 "flight": "AF552",
                 "utc": "14:41:00"
                 }
               }
             ]         </codeblock></li>
              </ul></p></li>
        </ul></p></section>
    <section id="fn-infer"><title>INFER Statement</title>
      <p>Couchbase Server 4.5 introduces INFER, a N1QL statement that infers the metadata of
        documents in a keyspace, for example the structure of documents, data types of various
        attributes, sample values, and so on. Since a keyspace or bucket can contain documents with
        varying structures, the INFER statement is statistical in nature rather than deterministic.
        You can specify the sample size that must be used to analyze and identify the structure of
        documents in a keyspace or bucket.</p>
      <note>The <cmdname>describe</cmdname> statement introduced in the Couchbase Server 4.1 release
        has been renamed to INFER.</note>
      <p>The statement returns the output in the <xref
          href="http://json-schema.org/documentation.html" format="html" scope="external">JSON
          Schema draft v4</xref> format as specified by <xref href="http://json-schema.org/"
          format="html" scope="external">json-schema.org</xref>. It supports the following data
        types: array, boolean, integer, null, number, and object. For each identified attribute, the
        statement returns the following details: <ul id="ul_fyg_zzz_z5">
          <li><systemoutput>#docs</systemoutput>: Specifies the number of documents in the sample
            that contain this attribute.</li>
          <li><systemoutput>%docs</systemoutput>: Specifies the percentage of documents in the
            sample that contain this attribute.</li>
          <li><systemoutput>minitems</systemoutput>: If the data type is an array, specifies the
            minimum number of elements (array size).</li>
          <li><systemoutput>maxitems</systemoutput>: If the data type is an array, specifies the
            maximum number of elements (array size).</li>
          <li><systemoutput>samples</systemoutput>: Displays a list of sample values for the
            attribute found in the sample population.</li>
          <li><systemoutput>type</systemoutput>: Specifies the identified data type of the
            attribute.</li> </ul></p><p>The Query Workbench in the Couchbase Web console (available under the
          <uicontrol>Query</uicontrol> tab) uses the INFER statement to display the structure of
        documents in the <uicontrol>Bucket Analysis</uicontrol> area when you expand the keyspace or
        bucket name. </p><p><b>Syntax</b>
        <codeblock>INFER &lt;<varname>keyspace_ref</varname>&gt; [ WITH { "<varname>parameter</varname>" : <varname>value</varname>, … } ]</codeblock><ul
          id="ul_rxy_tb1_1v">
          <li><varname>keyspace_ref</varname>: Specifies a simple or fully-qualified keyspace
            name.</li>
          <li><varname>parameter</varname>: Specifies one or more of the following comma separated
            parameters to guide the INFER statement. <p>
              <codeblock>parameter ::= [ "sample_size”: &lt;value&gt;] [ , “num_sample_values”: &lt;value&gt;] [ , “similarity_metric”: &lt;value&gt;]</codeblock>
            </p></li>
          <li><varname>sample_size</varname>: Specifies the number of documents to randomly sample
            in the keyspace or bucket. The default sample size is 1000 documents.</li>
          <li><varname>similarity_metric</varname>: Specifies a real number between 0 and 1
            indicating the percentage match (of attributes) required to establish similarity between
            two documents. The default value is 0.6, which means two documents are considered
            similar if 60% of the attributes at the top-level attributes are the same.</li>
          <li><varname>num_sample_values</varname>: Specifies the number of example values of
            various attributes to return. By default, the statement returns 5 values for each
            attribute.</li></ul></p><p><b>Example</b>
        <codeblock>INFER `beer-sample` WITH {"sample_size":10000,"num_sample_values":1,"similarity_metric":0.0};</codeblock><codeblock>[
  [
    {
      "#docs": 823,
      "$schema": "http://json-schema.org/schema#",
      "Flavor": "type = \"beer\"",
      "properties": {
        "abv": {
          "#docs": 823,
          "%docs": 100,
          "samples": [
            0,
            9,
            9.5,
            8,
            7.7
          ],
          "type": "number"
        },
        "brewery_id": {
          "#docs": 823,
          "%docs": 100,
          "samples": [
            "san_diego_brewing",
            "drake_s_brewing",
            "brouwerij_de_achelse_kluis",
            "niagara_falls_brewing",
            "brasserie_des_cimes"
          ],
          "type": "string"
        },
        "category": {
          "#docs": 612,
          "%docs": 74.36,
          "samples": [
            "North American Ale",
            "British Ale",
            "German Lager",
            "Belgian and French Ale",
            "Irish Ale"
          ],
          "type": "string"
        },
        "description": {
          "#docs": 823,
          "%docs": 100,
          "samples": [
            "“Robust, Dark and Smooth, ho...",
            "\"Pride of Milford\" is a very s...",
            "Mogul is a complex blend of 5 ...",
            "Just like our Porter but multi...",
            ""
          ],
          "type": "string"
        },
        "ibu": {
          "#docs": 823,
          "%docs": 100,
          "samples": [
            0,
            55,
            35,
            20
          ],
          "type": "number"
        },
        "name": {
          "#docs": 823,
          "%docs": 100,
          "samples": [
            "Old 395 Barleywine",
            "Jolly Roger",
            "Trappist Extra",
            "Maple Wheat",
            "Yeti"
          ],
          "type": "string"
        },
        "srm": {
          "#docs": 823,
          "%docs": 100,
          "samples": [
            0,
            6,
            45,
            30
          ],
          "type": "number"
        },
        "style": {
          "#docs": 612,
          "%docs": 74.36,
          "samples": [
            "American-Style Pale Ale",
            "Classic English-Style Pale Ale",
            "American-Style India Pale Ale",
            "German-Style Pilsener",
            "Other Belgian-Style Ales"
          ],
          "type": "string"
        },
        "type": {
          "#docs": 823,
          "%docs": 100,
          "samples": [
            "beer"
          ],
          "type": "string"
        },
        "upc": {
          "#docs": 823,
          "%docs": 100,
          "samples": [
            0,
            2147483647
          ],
          "type": "number"
        },
        "updated": {
          "#docs": 823,
          "%docs": 100,
          "samples": [
            "2010-07-22 20:00:20",
            "2010-12-13 19:33:36",
            "2011-05-17 03:27:08",
            "2011-04-17 12:25:31",
            "2011-04-17 12:33:50"
          ],
          "type": "string"
        }
      }
    },
    {
      "#docs": 177,
      "$schema": "http://json-schema.org/schema#",
      "Flavor": "type = \"brewery\"",
      "properties": {
        ...
      }
    }
  ]
]</codeblock>
      </p></section>
    
  </body>
</topic>
