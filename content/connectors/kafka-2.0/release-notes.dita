<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_cn2_5ck_r5">
    <title>Release Notes</title><shortdesc>Release notes for the 2.0 version of the Kafka connector.</shortdesc>
    <conbody>
    <section>
        <title>Couchbase Kafka Connector 2.0.0 GA (30 March 2016)</title>
        <p>Version 2.0.0 is the general availability (GA) release of the Kafka connector.
            It contains important stability fixes, and also new API.
        </p>

        <p><b>New features and behavioral changes</b></p>
                <p>This release contains the following features:</p>
                <ul>
                    <li>
                    <xref href="https://www.couchbase.com/issues/browse/KAFKAC-27" format="html"
                        scope="external">KAFKAC-27</xref>, <xref
                        href="https://www.couchbase.com/issues/browse/KAFKAC-29" format="html"
                        scope="external">KAFKAC-29</xref>, <xref
                        href="https://www.couchbase.com/issues/browse/KAFKAC-32" format="html"
                        scope="external">KAFKAC-32</xref>, <xref
                        href="https://www.couchbase.com/issues/browse/KAFKAC-30" format="html"
                        scope="external">KAFKAC-30</xref>, <xref
                        href="https://www.couchbase.com/issues/browse/KAFKAC-33" format="html"
                        scope="external">KAFKAC-33</xref>: <p>All these issues share a common
                        problem: the Kafka consumer handles new events at a slower rate than DCP
                        producer can emit data. All additional messages have been dropped silently.
                        Since most of these messages carry native buffers that cannot be freed by
                        GC, the connector eventually died from out-of-memory exceptions.
                        </p><p>Implementation of the DCP handler inside the core was revisited to
                        fix these issues, and some of the classes have been removed (such as
                            <codeph>BucketStreamAggregator</codeph> and
                            <codeph>BucketStreamAggregatorState</codeph>). Instead, cleaner
                        alternatives have been introduced (such as <codeph>ConnectorState</codeph>
                        and <codeph>StreamState</codeph>), which encapsulate only one point in
                        history instead of starting and ending a sequence number. These alternatives
                        allowed the replacement of the unobvious direction and the run-mode API with
                        a method accepting two states, and some helper methods that make it easier
                        to initialize <codeph>ConnectorState</codeph>. For example, the following
                        code: <codeblock outputclass="language-java"><![CDATA[BucketStreamAggregatorState state = connector.buildState(Direction.TO_CURRENT);
connector.run(state, RunMode.RESUME);
]]></codeblock> can be simplified as <codeblock outputclass="language-java"><![CDATA[ConnectorState startState = connector.startState();
ConnectorState currentState = connector.currentState();
connector.run(startState, currentState);
]]></codeblock> and the snippet <codeblock outputclass="language-java"><![CDATA[BucketStreamAggregatorState state = connector.buildState(Direction.FROM_CURRENT);
connector.run(state, RunMode.LOAD_AND_RESUME);
]]></codeblock> will become <codeblock outputclass="language-java"><![CDATA[ConnectorState loadedState = connector.loadState();
ConnectorState endState = connector.endState();
connector.run(loadedState, endState);
]]></codeblock></p>
                </li>
                    <li>
                    <xref href="https://www.couchbase.com/issues/browse/KAFKAC-32" format="html"
                        scope="external">KAFKAC-32</xref>: <p>Zookeeper state serializer now uses
                            <codeph>/</codeph> (forward slash) as a path separator, which makes it
                        platform independent (previously, a  connector running on Windows would use
                        backward slash).</p>
                </li>
                </ul>
            </section>
    </conbody>
</concept>
