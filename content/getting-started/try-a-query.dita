<?xml version="1.0" encoding="utf-8"?>

<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
  
<topic xml:lang="en-us" id="tryAQuery">
	
	<title>
		Run Your First N1QL Query
	</title>
	
	<shortdesc>
		N1QL (pronounced "nickel") is the Couchbase Server query language.
	</shortdesc>
	
	<body> 
		
		<section>
			
			<title>
				About N1QL
			</title>
			
			<p>
				N1QL embraces the JSON document model and uses SQL-like syntax. In N1QL, you operate on JSON
				documents, and the result of your operation is another JSON document. N1QL queries can
				be run on the web from the Couchbase Web Console, or from the command line using the cbq
				tool.
			</p>
			
			<p>
				A basic N1QL query has these parts:
			</p>
			<ul>
				<li>
					<codeph>SELECT</codeph>—the fields of each document to return</li>
				<li>
					<codeph>FROM</codeph>—the data bucket to look in</li>
				<li>
					<codeph>WHERE</codeph>—conditions the document must satisfy</li>
			</ul>
			
			<p>
				Here's an example of a basic N1QL query and the JSON document it returns. 
				The following query asks for the country associated with the airline named
				<i>Excel Airways</i>:
			</p>
			
			<codeblock outputclass="language-sql">SELECT country FROM `travel-sample` WHERE name = "Excel Airways";</codeblock>
			
			<p>
				Note that for all identifiers (bucket names) that contain a hyphen character, you
				need to enclose the name with backtick (`) characters. The result appears as follows:
			</p>
			
			<codeblock outputclass="language-json">{
    "requestID": "9e1cd084-f45e-4059-9e7a-edec30f60dd2",
    "signature": {
        "country": "json"
	},
    "results": [
        {
            "country": "United Kingdom"
        }
    ],
    "status": "success",
	"metrics": {
        "elapsedTime": "7.42097249s",
        "executionTime": "7.420925841s",
        "resultCount": 1,
        "resultSize": 51
    }
}</codeblock>
			
		</section>
			
		<section>
				
			<title>
				Making N1QL queries
			</title>
				<p>
					After you install Couchbase Server, you can start using N1QL right away. You can make N1QL
					requests in your applications or run N1QL queries against your database using either
					the Query Workbench on the Couchbase Web Console or the interactive query shell,
					<cmdname>cbq</cmdname>.
				</p>
			
				<p>
					The <xref href="../tools/query-workbench.dita#topic_prr_nyh_t5">Query Workbench</xref> is
					integrated with the Couchbase Web console and is available on the
					<uicontrol>Query</uicontrol> tab. Note that the Query Workbench only runs on nodes
					which are running the Query service. If the Query service is <i>not </i>running
					on the current node, it provides a link to the nodes in the cluster which
					<i>are</i> running the Query service.
				</p>
			
				<p id="run-cbq">
					The <cmdname>cbq</cmdname> shell is also available. To
					run the cbq shell, bring up a console window on your machine, type
					the following against the prompt, and press the Enter key:
				</p>
			
				<codeblock outputclass="bash">bash -c "clear &amp;&amp; docker exec -it db sh"</codeblock> 
				
				<p>
					Then, navigate to the Couchbase <codeph>bin</codeph> directory, and start <codeph>cbq</codeph>:
				</p>
			
				<codeblock outputclass="bash">cd /opt/couchbase/bin
./cbq</codeblock>	
			
				<p>
					This displays the <codeph>cbq</codeph> shell prompt, against which you can enter N1QL
					commands.
				</p>
			
			</section>
			
			<section>
				
				<title>
					Trying out N1QL with the <codeph>travel-sample</codeph> bucket
				</title>
				
				<p>
					Try N1QL and use <cmdname>cbq</cmdname> to run queries against the
					<codeph>travel-sample</codeph> bucket. The following query returns
					the different values used for the <codeph>country</codeph>
					field, limiting the number of results to 10:
				</p>
						
				<codeblock outputclass="language-sql">cbq> SELECT country FROM `travel-sample` LIMIT 5;</codeblock>
						
						<p>
							Each
							document in the bucket contains a <codeph>type</codeph> field that indicates
							the kind of data the document contains. The <codeph>travel-sample</codeph>
							bucket contains two different kinds of documents, describing different
							travel-related entities: such as <i>airlines</i>, <i>airports</i>, and
							<i>hotels</i>.
						</p>
						
						<p>
							The following query returns one
							<codeph>airport</codeph> document and lists all the fields it
							contains (note the <codeph>LIMIT</codeph> clause, used to ensure this):
						</p>
						
						<codeblock outputclass="language-sql">cbq> SELECT * FROM `beer-sample` WHERE type="airport" LIMIT 1;</codeblock>
				
						<p>
							The query-result is as follows:
						</p>
				
				<codeblock outputclass="language-sql">{
    "requestID": "c49a5885-9fde-40e3-871f-699f211078cc",
    "signature": {
        "*": "*"
    },
    "results": [
        {
            "travel-sample": {
                "airportname": "Calais Dunkerque",
                "city": "Calais",
                "country": "France",
                "faa": "CQF",
                "geo": {
                    "alt": 12,
                    "lat": 50.962097,
                    "lon": 1.954764
                },
                "icao": "LFAC",
                "id": 1254,
                "type": "airport",
                "tz": "Europe/Paris"
            }
        }
    ],
    "status": "success",
    "metrics": {
        "elapsedTime": "16.272029ms",
        "executionTime": "16.216091ms",
        "resultCount": 1,
        "resultSize": 489
    }
}</codeblock>
						
						
						<p>
							The following query returns the names of (at a maximum) ten hotels that accept pets,
							in the city of Medway.
						</p>
								
				<codeblock outputclass="language-sql">cbq> SELECT name FROM `travel-sample` WHERE type="hotel" AND city="Medway" and pets_ok=true LIMIT 10;
{
    "requestID": "b6dc75dd-4ed2-40de-83c8-9aebb3820ad8",
    "signature": {
        "name": "json"
    },
    "results": [
        {
            "name": "Medway Youth Hostel"
        }
    ],
    "status": "success",
    "metrics": {
        "elapsedTime": "45.380072ms",
        "executionTime": "45.326531ms",
        "resultCount": 1,
        "resultSize": 53
    }
}</codeblock>
						
						
						<p>
							The
							following query returns the <codeph>name</codeph> and
							<codeph>phone</codeph> fields from up to 10 documents for hotels in Manchester, where
							directions are not missing; and orders the results by name:
						</p>
				
				<codeblock outputclass="language-sql">cbq> SELECT name,phone FROM `travel-sample` WHERE type="hotel" AND city="Manchester" and directions IS NOT MISSING ORDER BY name LIMIT 10;
{
    "requestID": "a3561cba-2377-4282-9c0f-68fc627950f6",
    "signature": {
        "name": "json",
        "phone": "json"
    },
    "results": [
        {
            "name": "The Mitre Hotel",
            "phone": "+44 161 834-4128"
        },
        {
            "name": "Sachas Hotel",
            "phone": null
        },
        {
            "name": "Hilton Chambers",
            "phone": "+44 161 236-4414"
        }
    ],
    "status": "success",
    "metrics": {
        "elapsedTime": "22.211069ms",
        "executionTime": "22.108582ms",
        "resultCount": 3,
        "resultSize": 253
    }
}</codeblock>
				
			</section>

					
		<section>	
			
			<title>
				Next
			</title>
			
			<p>
				You can execute N1QL queries programmatically, as well as manually. This is demonstrated by means of
				an off-the-shelf code example in the next section,
				<xref href="./run-hello-world.dita" scope="local" format="dita">Run Hello World!</xref>.
			</p>
			
		</section>
		
		<section>
			
			<title>
				Other Destinations
			</title>
			
			<p>
				In addition to following this brief tutorial, you can learn more about N1QL by looking
				at these in-depth resources:
			</p>
			
			<ul>
				<li>
					The <xref href="http://query.pub.couchbase.com/tutorial/#1" format="html"
						scope="external">online interactive tutorial</xref> allows you to learn about N1QL
					without having Couchbase Server installed in your own environment. It's a
					self-contained tutorial that runs in a web browser and lets you modify the sample
					queries. The tutorial covers SELECT statements in detail, including examples of JOIN,
					NEST, GROUP BY, and other typical clauses. 
				</li>
				
				<li>
					The <xref href="http://docs.couchbase.com/files/Couchbase-N1QL-CheatSheet.pdf"
						format="pdf" scope="external">N1QL cheat sheet</xref> provides a concise summary
					of the basic syntax elements. Print it out and keep it on your desk where it'll be
					handy for quick reference.
				</li>
				
				<li>
					The <xref href="../n1ql/n1ql-language-reference/index.dita#n1ql-lang-ref"/> contains
					details about N1QL syntax and usage.
				</li>
				
				<li>
					Live and recorded <xref href="http://www.couchbase.com/nosql-resources/webinar"
						format="html" scope="external">Webinars</xref> presented by Couchbase engineers
					and product managers highlight features and use cases of Couchbase Server, including
					N1QL. Here are some links to webinars devoted entirely to N1QL: <xref
						href="https://event.on24.com/eventRegistration/EventLobbyServlet?target=reg20.jsp&amp;eventid=962567&amp;sessionid=1&amp;key=00929333AAF46D0054877324FBC3CB85&amp;sourcepage=register"
						format="html" scope="external">Couchbase 103: Querying</xref> and <xref
							href="http://info.couchbase.com/webinar-N1QL-ad-hoc-querying-for-NoSQL-applications.html"
							format="html" scope="external">Ad hoc Querying for NoSQL</xref>.
				</li>
				
				<li>
					<xref href="http://blog.couchbase.com" format="html" scope="external">Couchbase
						blogs</xref> include articles written by Couchbase SDK developers.
				</li>
				
				<li>The <xref href="https://forums.couchbase.com/c/n1ql" format="html" scope="external"
					>Couchbase forum</xref> is a community resource where you can ask questions, find
					answers, and discuss N1QL with other developers and the Couchbase team.
				</li>
			</ul>

		</section>
		
	</body>
	
</topic>


	

