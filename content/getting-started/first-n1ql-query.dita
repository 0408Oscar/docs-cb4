<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="first-n1ql">
	<title>Running your first N1QL query</title>
	<shortdesc>N1QL (pronounced "nickel") is the Couchbase Server query language. N1QL embraces the
		JSON document model and uses SQL-like syntax. In N1QL, you operate on JSON documents, and the
		result of your operation is another JSON document.</shortdesc>
	<conbody>

		<p>A basic N1QL query has these parts:</p>
		<ul>
			<li><codeph>SELECT</codeph>—the fields of each document to return</li>
			<li><codeph>FROM</codeph>—the data bucket to look in</li>
			<li><codeph>WHERE</codeph>—conditions the document must satisfy</li>
		</ul>

		<p>Here's an example of a basic N1QL query and the JSON document it returns. The following
			query asks for the names of beers produced by the Mishawaka Brewing Company:</p>
		<codeblock outputclass="language-sql" spectitle="Query">SELECT name FROM `beer-sample` WHERE  brewery_id ="mishawaka_brewing";</codeblock>
		<codeblock outputclass="language-json" spectitle="Result">{
    "requestID": "fb844e2b-0f9a-422c-bda5-1f81cebd7a72",
    "signature": {
        "name": "json"
    },
    "results": [
        {
            "name": "Wall Street Wheat Ale"
        },
        {
            "name": "Lake Effect Pale Ale"
        },
        {
            "name": "Raspberry Wheat Ale"
        },
        {
            "name": "Kolsch"
        },
        {
            "name": "Four Horsemen Ale"
        },
        {
            "name": "INDIAna Pale Ale"
        }
    ],
    "status": "success",
    "metrics": {
        "elapsedTime": "474.080629ms",
        "executionTime": "474.045631ms",
        "resultCount": 6,
        "resultSize": 303
    }
}</codeblock>
		<section>
			<title>Learning about N1QL</title>
			<p>In addition to following this brief tutorial, you can learn more about N1QL by looking
				at these in-depth resources:</p>
			<ul>
				<li>The <xref href="http://query.pub.couchbase.com/tutorial/#1" format="html"
						scope="external">online interactive tutorial</xref> allows you to learn about N1QL
					without having Couchbase Server installed in your own environment. It's a
					self-contained tutorial that runs in a web browser and lets you modify the sample
					queries. The tutorial covers SELECT statements in detail, including examples of JOIN,
					NEST, GROUP BY, and other typical clauses. </li>
				<li>The <xref href="http://docs.couchbase.com/files/Couchbase-N1QL-CheatSheet.pdf"
						format="pdf" scope="external">N1QL cheat sheet</xref> provides a concise summary
					of the basic syntax elements. Print it out and keep it on your desk where it'll be
					handy for quick reference.</li>
				<li>The <xref href="../n1ql/index.dita#n1ql-overview">N1QL reference guide</xref>
					contains details about N1QL syntax and usage.</li>
				<li>Live and recorded <xref href="http://www.couchbase.com/nosql-resources/webinar"
						format="html" scope="external">Webinars</xref> presented by Couchbase engineers
					and product managers highlight features and use cases of Couchbase Server, including
					N1QL. Here are some links to webinars devoted entirely to N1QL: <xref
						href="https://event.on24.com/eventRegistration/EventLobbyServlet?target=reg20.jsp&amp;eventid=962567&amp;sessionid=1&amp;key=00929333AAF46D0054877324FBC3CB85&amp;sourcepage=register"
						format="html" scope="external">Couchbase 103: Querying</xref> and <xref
						href="http://info.couchbase.com/webinar-N1QL-ad-hoc-querying-for-NoSQL-applications.html"
						format="html" scope="external">Ad hoc Querying for NoSQL</xref>.</li>
				<li><xref href="http://blog.couchbase.com" format="html" scope="external">Couchbase
						blogs</xref> include articles written by Couchbase SDK developers.</li>
				<li>The <xref href="https://forums.couchbase.com/c/n1ql" format="html" scope="external"
						>Couchbase forum</xref> is a community resource where you can ask questions, find
					answers, and discuss N1QL with other developers and the Couchbase team.</li>
			</ul>
		</section>
		<section>
			<title>Making N1QL queries</title>
			<p>After you have Couchbase Server installed, you can start using N1QL right away. You can
				make N1QL requests in your applications or run N1QL queries against your database
				through the interactive query shell, <cmdname>cbq</cmdname>.</p>

			<p>To learn how to send N1QL queries from an application, read the N1QL topic in the <xref
					href="../sdks/intro.dita#concept_yqn_tjg_ps">SDK</xref> for the language you are
				using.</p>
			<p id="run-cbq">To run <cmdname>cbq</cmdname> from a node in your Couchbase installation:</p>
			<ol>

				<li>Open a command window on a Couchbase Server node that has the query service
					enabled.</li>
				<li>Enter the command to start the interactive query
					shell:<codeblock outputclass="language-bash"># On Linux systems:
$ /opt/couchbase/bin/cbq

# On OS X systems:
$ /Applications/Couchbase\ Server.app/Contents/Resources/couchbase-core/bin/cbq

# On Windows systems:
$ C:\Program Files\Couchbase\Server\bin\cbq.exe
</codeblock></li>
				<li>If you haven't yet indexed the bucket you want to query, the first thing you need to
					do is create the primary index:
						<codeblock outputclass="language-sql">cbq> CREATE PRIMARY INDEX ON `bucket-name` USING GSI;</codeblock><p>In
						the example command, <codeph>`bucket-name`</codeph> represents the name of the
						bucket you want to work with. Any identifier that has a hyphen character in the
						name must be enclosed in backtick (`) characters.</p><p>You need to end each
						command with a semicolon, and then press enter to execute the query.</p></li>
			</ol>
		</section>

		<section>
			<title>Trying out N1QL with a sample bucket</title>
			<p>To try N1QL right away, you can use <cmdname>cbq</cmdname> to run queries against one of
				the sample buckets that is included with Couchbase Server. You need to know the host
				name of the machine that is running the query service. If you installed Couchbase Server
				on your local computer, the host name is <codeph>localhost</codeph>.</p>
			<p>The following steps show how to run N1QL queries against the
					<codeph>beer-sample</codeph> bucket. If you aren't sure whether the beer-sample
				bucket is installed, you can check for it and install it by using the administrator
				console:</p>
			<ol>
				<li>Open the Couchbase administrator console and log in.</li>
				<li> Choose <menucascade>
						<uicontrol>Settings</uicontrol>
						<uicontrol>Sample Buckets</uicontrol>
					</menucascade> and verify whether the <codeph>beer-sample</codeph> bucket is
					installed. </li>
				<li>If the <codeph>beer-sample</codeph> bucket is not installed, follow the on-screen
					instructions to install it.</li>
			</ol>
			<p>Now you can use <cmdname>cbq</cmdname> to run some queries against the
					<codeph>beer-sample</codeph> bucket:</p>
			<ol>
				<li>
					<p>Start <cmdname>cbq</cmdname>.</p>
					<p>You are now at the <cmdname>cbq</cmdname> command prompt and can start running
						N1QL queries. Remember to end each query with a semicolon.</p>
				</li>
				<li>Run the following command to create the primary index:
					<codeblock outputclass="language-sql">cbq> CREATE PRIMARY INDEX ON `beer-sample` USING GSI;</codeblock>Because
					the bucket name contains a hyphen character, you need to enclose the name of the
					bucket within backtick characters. In fact, for all identifiers that contain the
					hyphen character, you need to enclose the string in backtick characters.</li>
				<li>
					<p>Now that you have the bucket indexed, you can run some queries to explore the data
						in the <codeph>beer-sample</codeph> bucket. Here's a few sample queries to get you
						started.</p>
					<p>The following query returns the different values used for the
							<codeph>type</codeph>
						field:</p>
					<codeblock outputclass="language-sql">cbq> SELECT DISTINCT type FROM `beer-sample`;</codeblock>
					<p>Each document in the bucket contains a <codeph>type</codeph> field that indicates
						the kind of data the document contains. The <codeph>beer-sample</codeph> bucket
						contains two kinds of documents—documents that describe breweries (the value for
							<codeph>type</codeph> is <codeph>brewery</codeph>) and documents that describe
						beers (the value for <codeph>type</codeph> is <codeph>beer</codeph>). </p>
					<p>The following query returns one <codeph>brewery</codeph> document and lists all
						the fields it contains:</p>
					<codeblock outputclass="language-sql">cbq> SELECT * FROM `beer-sample` WHERE type="brewery" LIMIT 1;</codeblock>
					<p>The <codeph>beer-sample</codeph> bucket contains over 7000 documents, so the
						queries shown here contain a LIMIT clause to minimize the number of rows returned. </p>
					<p>The following query returns all fields in one <codeph>beer</codeph> document. The
							<codeph>IS NOT MISSING</codeph> clause on the <codeph>brewery_id </codeph>field
						tells N1QL to only return documents that have a <codeph>brewery_id</codeph>
						field.<codeblock outputclass="language-sql">cbq> SELECT * FROM `beer-sample` WHERE brewery_id IS NOT MISSING 
     AND type="beer" LIMIT 1;</codeblock></p>
					<p>The following query returns the <codeph>brewery_id</codeph> and
							<codeph>name</codeph> fields from 5 beer
						documents:<codeblock outputclass="language-sql">cbq> SELECT brewery_id, name FROM `beer-sample` 
     WHERE brewery_id IS NOT MISSING AND type="beer" LIMIT 5;</codeblock>
					</p>
					<p>The following query returns 5 beer documents, but includes only the
							<codeph>brewery_id</codeph> field for each document. It orders them
						alphabetically by the <codeph>brewery-id</codeph> field and does not include any
						documents that do not have a <codeph>brewery_id</codeph> field.</p>
					<codeblock outputclass="language-sql">cbq> SELECT DISTINCT brewery_id FROM `beer-sample` 
     WHERE brewery_id IS NOT MISSING ORDER BY brewery_id LIMIT 5;</codeblock>
				</li>
				<li>When you are finished, type <codeph>control-D</codeph> to exit
						<cmdname>cbq</cmdname> and return to the command prompt.</li>
			</ol>
		</section>
	</conbody>
</concept>
