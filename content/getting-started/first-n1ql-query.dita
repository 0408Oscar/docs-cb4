<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="first-n1ql">
	<title>Running your first N1QL query</title>
	<shortdesc />
	<conbody>
		
		<section>
			<title>Learning about N1QL</title>
			<p>We have many resources that you can use to learn about N1QL:</p>
			<ul>
				<!--<li>The <xref href="n1ql-tutorial/index.dita#n1ql-tutorial">N1QL tutorial</xref> shows
					you how to work with N1QL queries on a database installed on your own machine.</li>-->
				<li>The <xref href="http://query.pub.couchbase.com/tutorial/#1" format="html"
						scope="external">online interactive tutorial</xref> allows you to learn about N1QL
					without having Couchbase Server installed in your own environment. It's a
					self-contained tutorial that runs in a web browser and lets you modify the sample
					queries. The tutorial covers SELECT statements in detail, including examples of JOIN,
					NEST, GROUP BY, and other typical clauses. </li>
				<!--<li>The N1QL guide contains a section about <xref href="n1ql-basics/index.dita#n1ql-basics">N1QL
						basics</xref> and a <xref href="n1ql-language-reference/index.dita#n1ql-lang-ref"
						>N1QL language reference</xref>.</li>-->
				<li>The <xref href="http://docs.couchbase.com/files/Couchbase-N1QL-CheatSheet.pdf"
						format="pdf" scope="external">N1QL cheat sheet</xref> provides a concise summary
					of the basic syntax elements. Print it out and keep it on your desk where it'll be
					handy for quick reference.</li>

				<li>Live and recorded <xref href="http://www.couchbase.com/nosql-resources/webinar"
						format="html" scope="external">Webinars</xref> are presented by Couchbase
					engineers and product managers. In the webinars they discuss features and use cases
					of Couchbase Server, including N1QL. Here are some links to webinars devoted entirely
					to N1QL: <xref
						href="https://event.on24.com/eventRegistration/EventLobbyServlet?target=reg20.jsp&amp;eventid=962567&amp;sessionid=1&amp;key=00929333AAF46D0054877324FBC3CB85&amp;sourcepage=register"
						format="html" scope="external">Couchbase 103: Querying</xref> and <xref
						href="http://info.couchbase.com/webinar-N1QL-ad-hoc-querying-for-NoSQL-applications.html"
						format="html" scope="external">Ad hoc Querying for NoSQL</xref>.</li>
				<li><xref href="http://blog.couchbase.com" format="html" scope="external">Couchbase
						blogs</xref> include articles written by SDK developers.</li>
				<li>The <xref href="https://forums.couchbase.com/c/n1ql" format="html" scope="external"
						>Couchbase forum</xref> is a community resource where you can ask questions, find
					answers, and discuss N1QL with other developers and the Couchbase team.</li>
			</ul>
		</section>
		<section>
			<title>Working with N1QL</title>
			<p>After you have Couchbase Server installed and the query service enabled, you can start
				using N1QL. You can use N1QL in your applications or by running N1QL queries against
				your database through the interactive query shell, <cmdname>cbq</cmdname>.</p>

			<p>To learn how to send N1QL queries from an application, read the N1QL topic in the
				developer guide for the language you are using: <xref
					href="http://docs.couchbase.com/developer/java-2.1/querying-n1ql.html" format="html"
					scope="external">Java</xref>, <xref
					href="http://docs.couchbase.com/developer/dotnet-2.1/n1ql-queries.html" format="html"
					scope="external">.NET</xref>, <xref
					href="http://docs.couchbase.com/developer/node-2.0/n1ql-queries.html" format="html"
					scope="external">Node.js</xref>, <xref
					href="http://docs.couchbase.com/developer/php-2.0/n1ql-queries.html" format="html"
					scope="external">PHP</xref>, <xref
					href="http://docs.couchbase.com/developer/python-2.0/n1ql-queries.html" format="html"
					scope="external">Python</xref>, or <xref
					href="http://docs.couchbase.com/developer/c-2.4/n1ql-queries.html" format="html"
					scope="external">C</xref>.</p>
			<p>To run the query shell from a node in your Couchbase installation:</p>
			<ol>

				<li>Open a command window.</li>
				<li>Change to the Couchbase tools directory:
					<codeblock>$ cd /opt/couchbase/bin</codeblock></li>
				<li>Enter the command to start the interactive query shell:
						<codeblock>$ ./cbq -engine=http://localhost:8093</codeblock><p>If you are
						connected to the machine that runs the Couchbase query service, the host name is
							<codeph>localhost</codeph> as shown in the command above. If you are connected
						to a node other than the one that hosts the Couchbase query service, you need to
						use the host name or IP address of the query service node rather than
							<codeph>localhost</codeph>.</p></li>
				<li>If you haven't yet indexed the bucket you want to query, the first thing you need to do is
					create the primary index:
						<codeblock>cbq> CREATE PRIMARY INDEX ON `bucket-name` USING GSI;</codeblock><p>In
						the example command, <codeph>`bucket-name`</codeph> represents the name of the
						bucket you want to work with. Any identifier that has a hyphen character in the
						name must be enclosed in backtick (`) characters.</p></li>
			</ol>
		</section>

		<section>
			<title>Trying out N1QL with a sample bucket</title>
			<p>To try N1QL right away, you can use <cmdname>cbq</cmdname> to run queries against one of
				the sample buckets that we include with Couchbase Server. You need to know the host name
				of the machine that is running the query service. If you installed Couchbase Server on
				your local computer, the host name is <codeph>localhost</codeph>.</p>
			<p>The following steps show how to run N1QL queries against the
					<codeph>beer-sample</codeph> bucket. If you aren't sure whether the beer-sample
				bucket is installed, you can check for it and install it by using the administrator
				console:</p> <ol id="ol_vvj_mjr_kr">
				<li>Open the Couchbase administrator console and log in.</li>
				<li> Choose <menucascade>
						<uicontrol>Settings</uicontrol>
						<uicontrol>Sample Buckets</uicontrol>
					</menucascade> and verify whether the <codeph>beer-sample</codeph> bucket is
					installed. </li>
				<li>If the <codeph>beer-sample</codeph> bucket is not installed, follow the on-screen
					instructions to install it.</li>
			</ol>
			<p>Now you can start running queries against the <codeph>beer-sample</codeph> bucket:</p>
			<ol>
				<li>Run the following command to create the primary index:
					<codeblock>cbq> CREATE PRIMARY INDEX ON `beer-sample` USING GSI;</codeblock>Because
					the bucket name contains a hyphen character, you need to enclose the name of the
					bucket within backtick characters. In fact, for all identifiers that contain the
					hyphen character, you need to enclose the string in backtick characters.</li>
				<li>Now that you have the bucket indexed, you can run some queries to explore the data
					in the <codeph>beer-sample</codeph> bucket. Here's a few sample queries to get you
						started.<p>The following query returns the different values used for the
							<codeph>type</codeph>
						field:<codeblock>cbq> SELECT DISTINCT type FROM `beer-sample`;</codeblock></p><p>Each
						document in the bucket contains a <codeph>type</codeph> field that indicates the
						kind of data the document contains. The <codeph>beer-sample</codeph> bucket
						contains two kinds of documentsâ€”documents that describe breweries (the value for
							<codeph>type</codeph> is <codeph>brewery</codeph>) and documents that describe
						beers (the value for <codeph>type</codeph> is <codeph>beer</codeph>). </p><p>The
						following query returns one <codeph>brewery</codeph> document and lists all the
						fields it contains:</p><codeblock>cbq> SELECT * FROM `beer-sample` WHERE type="brewery" LIMIT 1;</codeblock>
					<p>The <codeph>beer-sample</codeph> bucket contains over 7000 documents, so the
						queries shown here contain a LIMIT clause to minimize the number of rows returned.
						</p><p>The following query returns all fields in one <codeph>beer</codeph>
						document. The <codeph>IS NOT MISSING</codeph> clause on the <codeph>brewery_id
						</codeph>field tells N1QL to only return documents that have a
							<codeph>brewery_id</codeph>
						field.<codeblock>cbq> SELECT * FROM `beer-sample` WHERE brewery_id IS NOT MISSING 
     AND type="beer" LIMIT 1;</codeblock></p><p>The
						following query returns the <codeph>brewery_id</codeph> and <codeph>name</codeph>
						fields from 5 beer
						documents:<codeblock>cbq> SELECT brewery_id, name FROM `beer-sample` 
     WHERE brewery_id IS NOT MISSING AND type="beer" LIMIT 5;</codeblock>
					</p><p>The following query returns 5 beer documents, but includes only the
							<codeph>brewery_id</codeph> field for each document. It orders them
						alphabetically by the <codeph>brewery-id</codeph> field and does not include any
						documents that do not have a <codeph>brewery_id</codeph>
					field.</p><codeblock>cbq> SELECT DISTINCT brewery_id FROM `beer-sample` 
     WHERE brewery_id IS NOT MISSING ORDER BY brewery_id LIMIT 5;</codeblock></li>
				<li>When you are finished, type <codeph>control-D</codeph> to exit
						<cmdname>cbq</cmdname> and return to the command prompt.</li>
			</ol>
		</section>
	</conbody>
</concept>
