<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="security-admin-access">
  <title>Secure administrative access</title>
  <shortdesc>Encrypted administrative access enables HTTPS access for the Couchbase Web Console and
    the REST API using SSL/TLS.</shortdesc>
  <conbody>
    
    
    
    <p>Couchbase Server client libraries support client-side encryption using the SSL/TLS protocol
      by encrypting data in-flight between the client and the server. This encryption establishes a
      secure channel between the remote machine and the server.</p>
    
    
    
    <p>Couchbase Server generates a self-signed certificate for the initial node, which is
      propagated throughout the server nodes in the cluster. If the self-signed certificate is
      regenerated or updated, it must be obtained again before secure server communication is
      re-established. The secure connection is on the cluster level rather than on the bucket level.
      It is established through the dedicated HTTPS REST port <codeph>18091</codeph> or the HTTPS
      CAPI port <codeph>18092</codeph>. </p>
  
      <p>In case you want to force an SSL connection to the Couchbase cluster, you have to lock the
        non-SSL ports. </p>
    
    <section> <title>Connecting to the Couchbase Web Console</title>
      <p>While an administrative console is typically protected via an HTTPS connection, the new
        administrative access on port <codeph>18091</codeph> allows connection to the Couchbase Web
        Console over SSL/TLS, which is enabled by default. </p>
      <p>To talk over SSL/TLS to the Couchbase Web Console, connect to the following URL with your
        web browser: <userinput>https://couchbase_server:18091</userinput></p>
     <p>Select <menucascade>
          <uicontrol>Settings</uicontrol>
          <uicontrol>Cluster</uicontrol>
        </menucascade>.</p>
      <p><image href="../images/security-ssl-cert.png" id="image_idl_2j1_1s" align="left" width="720"
        /></p>
    
      <p>The <wintitle>Cluster</wintitle> tab shows that a self-signed certificate has been deployed
        across the cluster. This certificate can be regenerated or replaced.</p>
    </section> 
    
    <section><title>Configuring a secure administrative access to the web browser</title>    
      <ol>
        <li>Connect to Couchbase Server through an encrypted port to communicate on a secure channel
            (<codeph>18091</codeph> for REST HTTP or <codeph>18092</codeph> for CAPI HTTP). </li>
        <li>Log in with the administrator's name and password. </li>
          <li>Once you are logged in, the URL shows a secure
          connection. 
          <p>The following is an example URL of a secure connection using the
            Safari web browser:</p>                
          <p><image href="../images/ui-ssl-ip.png" width="420" id="image_tp1_2r1_mp"/>
          </p>          
        </li>
      </ol>  
    </section>
    <example><title>SSL certificate</title>
      <codeblock>-----BEGIN CERTIFICATE-----
MIIC/jCCAeigAwIBAgIIE3jc9BofgigwCwYJKoZIhvcNAQEFMCQxIjAgBgNVBAMT
GUNvdWNoYmFzZSBTZXJ2ZXIgOTRmYTE3YTUwHhcNMTMwMTAxMDAwMDAwWhcNNDkx
MjMxMjM1OTU5WjAkMSIwIAYDVQQDExlDb3VjaGJhc2UgU2VydmVyIDk0ZmExN2E1
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxaaXsKm06xxzzYqejDAO
3qW1x6vLz9jcLdZkNQgxGk4+/ulrfK4PSLHARf4vml8Ev3bcOzCwfyDCp2/TCSX0
qDTn4iBRp9CJtxVyY/xqWkYkld+GGtj28P0CtZ1UKOHCRB7KInzxesxITg/a0vsL
M8GrcwFpmZEJjeY7HGdUuBRcoMfm2Yn28drmr92SNSsz+npdfEFkQloYStqemOOG
h1Jn7ldU5rBj/B2zcvh6guDXKKz/bMMeCTX84BmkG3rmiKQwxyizuxtYi5u1BthC
X3aO58lC9uRMja1lA5TrJnZOCRT24G6VTh2bYhN98W6YmvF9l4ESDR4I7nE8E6Gt
eQIDAQABozgwNjAOBgNVHQ8BAf8EBAMCAKQwEwYDVR0lBAwwCgYIKwYBBQUHAwEw
DwYDVR0TAQH/BAUwAwEB/zALBgkqhkiG9w0BAQUDggEBAF0Bz2MpQoBEdOdDRix3
j0/XGKjH7kI5zDFiOlUvANMeErVZf9kM8xqS7Yd3bCa2rjT1Y8BM3Sciurtrd/Cy
iTVzpXjQOR/K1AFtiBtuNb2Hx5SXvgeW4p4uNmK74u1UUNmAyb3mwSQ+duuqK/Ef
D4wTolPTZP5gcricyWI3qUCi3pTeCz/2jcAWn3DI4KVtlAsOy9sFFo4RxBDgmOuS
klUAb8eu4e2XxcLJ++geYoum0VIKa3ygjpZ800PupwZZetjD8/6tfbYFuoBTXL+r
27M9ArsOxkVbh3fDQ8b8qnr5sam1P7IfSzqq/Lq4vjh1mvred62zuJlMvY9KmNJU
rqw=
-----END CERTIFICATE-----</codeblock></example>
    
    <section><title>Using REST for encrypted access</title>
      <p>GET filepath <filepath>/pools/default/certificate</filepath> REST API HTTP method and URI
        retrieves the self-signed certificate from the cluster.</p>
  
    <p>The following shows REST syntax with <cmdname>curl</cmdname> for retrieving the certificate:</p>
      <codeblock>curl -X GET  -u adminName:adminPassword
    http://localHost:Port/pools/default/certificate > ./&lt;certificate_name></codeblock>
      <p>The following examples use <cmdname>curl</cmdname> and <cmdname>wget</cmdname> to retrieve the certificate</p>
      <codeblock>curl http://10.5.2.54:8091/pools/default/certificate > clusterCertificate</codeblock>
      <codeblock>wget http://10.5.2.54:8091/pools/default/certificate -O clusterCertificate</codeblock>
      <p>The following examples use <cmdname>curl</cmdname> and <cmdname>wget</cmdname> with the
        certificate to retrieve cluster information over an encrypted connection. The port used is
        the encrypted REST port <codeph>18091</codeph>.</p>
    
    <codeblock>curl --cacert clusterCertificate https://10.5.2.54:18091/pools/default</codeblock>
    <codeblock>wget --ca-certificate clusterCertificate  https://10.5.2.54:18091/pools/default -O output</codeblock>        
    </section> 
    <!-- We need to provide information how to move from a self-signed to a X.509 certificate
      -->
  </conbody>
</concept>
