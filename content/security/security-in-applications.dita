<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Concept//EN" "topic.dtd">
<topic xml:lang="en-us" id="security-in-applications">
 
 <title>
  Encryption in Applications
 </title>
 
 <shortdesc>
  You can encrypt data <i>inside your application</i>, even before it is
  sent to the server. This allows encryption to be used selectively; and thereby, only
  for the most sensitive information that you intend to put on the wire.
 </shortdesc>
 
 <body>
  
  <section>
   
   <title>
    Best Practices
   </title>
   
   <p>
    You are strongly recommended:
   </p>
  
   <ul>
    
    <li>
     Always to maintain the secrecy of your <i>encryption key</i>: by means of either a <i>secure key ring</i>, or a 
     <i>hardware security module</i> (HSM). 
     
     <p>
      <!-- Vertical space -->
     </p>
     
    </li>
   
    <li>
     Always to use a <i>standard encryption library</i> to encrypt data; and never to rely on
     in-house encryption or key-management solutions. 
     
     <p>
      <!-- Vertical space -->
     </p>
     
    </li>
    
    <li>
     Never, when managing documents, to include sensitive information in the document ID.
     
     <p>
      <!-- Vertical space -->
     </p>
     
    </li>
     
   </ul>

  </section>
  
  <!-- Almost certainly, the following section does not belong here. Should perhaps be moved to
       the SDK area.
    -->
  <section id="client-configuration-cache">
   
   <title>
    Configuration Cache-File
   </title>
   
   <p>
    Client applications use <i>libcouchbase</i> to connect to Couchbase Server. By means of libcouchbase,
    the client can react to changes in cluster-topology. Whenever the client is started, libcouchbase is
    instantiated, and checks the local filesystem for a <i>configuration cache-file</i>, containing information on the
    cluster-toplogy. If no such file exists, libcouchbase
    connects to the cluster by means of a REST API method, in order to receive the latest topology-details.
    Once acquired, these details are written to the configuration cache-file, locally. 
   </p>
   
   <p>
    Subsequently, when starting, the client uses the local configuration cache-file to acquire its topology-data. If at any time, when
    using this data, the client
    attempts to access a data-item on a node, and is informed by Couchbase Server that the node is
    incorrect (due to the cluster-configuration having changed), the current configuration cache-file is duly invalidated. The 
    client then requests an updated set of
    toplogy-details from Couchbase Server; which are themselves then saved locally by the client, as a 
    new configuration cache-file.
   </p>
    
    <p>
     For example, to use the configuration cache-file from PHP, add the following
     toÂ the file <codeph>php.ini</codeph>:
    </p>
   
    <codeblock>couchbase.config_cache = /tmp </codeblock>
  
  </section>
  
  <!-- Almost certainly, the following section does not belong here. Should perhaps be moved to
       the SDK area.
    -->
  <section>
   
   <title id="user-input-validation">
    User Input Validation
   </title>
   
   <p>
    User input should be validated by the client application, before the input is sent
    to Couchbase Server: this constitutes protection against the malicious replacement, insertion, and
    erasure of data. Common forms of attack include:
   </p>
   
   <ul>
    <li>
     Injecting arbitrary key-value pairs into an existing document. 
     
     <p>
      <!-- Vertical space -->
     </p>
    
    </li>
    
    <li>
     Changing the user-specified document-type from <i>private</i> to <i>public</i>; and thereby
     generalizing the possibility of illicit access. 
     
     <p>
      <!-- Vertical space -->
     </p>
    
    </li>
    
    <li>
     Overriding important document fields. 
     
     <p>
      <!-- Vertical space -->
     </p>
    
    </li>
   </ul>

   <p>
    For example, a malicious user might attempt to overwrite an existing password by generating
    the following JSON document:
   </p>
   
   <codeblock>{"user": "will","password":"<varname>0asd21$1%</varname>", "created":"2012-06-12", "password":"<varname>password</varname>"}</codeblock>
   
   <p>
    In this document, the first password-field contains <codeph>0asd21$1%</codeph>, which is the intended value.
    Note however, that an additional <codeph>password</codeph> name-value pair has been maliciously concatenated
    onto the document-content. Submission of this modified document would result in the plain <codeph>password</codeph> 
    value overwriting the earlier specified, intended password.
   </p>
   
   <p>
    Malicious user-input of this kind is most effectively protected against by client applications
    that do not permit unconstrained document-configuration by users; and instead impose a limited interface,
    whereby specific values or name-value pairs can be accepted and properly validated. (A document-model featuring
    Java POJOs or .NET POCOs might be used for such purposes.)
   </p>
   
  </section>
 </body>
</topic>
