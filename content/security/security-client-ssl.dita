<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="security-client-ssl">
	<title>Secure Data Access and X.509 Certificates</title>
	<shortdesc>Couchbase Server client libraries support client-side encryption using the Secure
		Sockets Layer (SSL) and Transport Layer Security (TLS).</shortdesc>
	
		
	<conbody>
		<note>Couchbase Server and SDKs support TLS v1.0 - 1.2 by default. Which version is used depends
			on the client and server version. Older versions might still use SSL and should be
			upgraded to newer version of the SDK.</note>
		<p>Encryption for data access is performed through client-server communication and view
			access.</p>
		

		<section><title>SSL/TLS Based Client-server Communication </title><p>Couchbase Server client
				libraries support client-side encryption using the SSL/TLS protocol by encrypting
				data in-flight between the client and the server. For Couchbase clients released
				after version 2.0, Couchbase Server provides secure client-server communication that
				does not require configuration. </p><p>When a TLS connection is established, a
				handshaking, known as the <term>TLS Handshake Protocol</term>, occurs. Within this
				handshake, a client hello (<codeph>ClientHello</codeph>) and a server hello
					(<codeph>ServerHello</codeph>) message are passed (RFC 5246). First, the client
				sends a cipher suite list, a list of the cipher suites that it supports, in order of
				preference. Then the server replies with the cipher suite that it has selected from
				the client cipher suite list. Check whether your clients support TLS. </p><p>To
				enable SSL/TLS on the client side, you need to get a certificate from Couchbase
				Server and then follow the steps specific to the client you are using.  </p><p>To
				obtain the certificate, access the Couchbase Web Console, navigate to <menucascade>
					<uicontrol>Settings</uicontrol>
					<uicontrol>Certificate</uicontrol>
					<uicontrol>Show certificate</uicontrol>
				</menucascade> and copy the certificate. </p><note type="note">The certificate that
				is obtained is a self-signed server-generated certificate. </note><note type="note"
				>If the Couchbase Server certificate is re-generated, you must obtain a new
				certificate. </note><p>The following clients support SSL/TLS: </p><ul>
				<li>Java</li>
				<li>.NET</li>
				<li>Node.js</li>
				<li>PHP</li>
				<li>C</li>
				<li>Go </li>
			</ul><note type="note">Use the Couchbase network port <codeph>11207</codeph> for data
				communication between the client and the data nodes using SSL/TLS.
					</note><p><b>SSL/TLS Based View Access</b>
			</p><p>A new port <codeph>18092</codeph> is established for view access:
					<codeph>https://couchbase_server:18092</codeph>
			</p><p><b>Supported Ciphers</b></p> Couchbase Server uses the ciphers that are accepted
			by default by OpenSSL. <p>The default is to have high-security ciphers built in with
				openSSL. For example, on the MAC OS these are: <ul>
					<li>AES256-SHA...YES</li>
					<li>AES128-SHA...YES</li>
					<li>DES-CBC3-SHA...YES </li>
				</ul></p><p>You can override this selection by setting the environment variable
				before starting Couchbase as follows:
					</p><p><codeph>COUCHBASE_SSL_CIPHER_LIST</codeph>= &lt;<varname>list of ciphers
					to accept</varname>&gt; </p><p>Set the variable to
					<codeph>COUCHBASE_SSL_CIPHER_LIST= MEDIUM, HIGH</codeph> to include only medium-
				and high-security ciphers for your installation.</p> For example, on the MAC OS
			these are: <ul>
				<li>SEED-SHA...YES</li>
				<li>AES256-SHA...YES</li>
				<li>AES128-SHA...YES</li>
				<li>DES-CBC3-SHA...YES</li>
				<li>RC4-SHA...YES</li>
				<li>RC4-MD5...YES</li>
				<li>RC4-MD5...YES </li>
			</ul></section>
		<section><title>X.509 Certificates for TLS</title>
			<p>Couchbase Server 4.5 Enterprise Edition supports X.509 certificates for Transport Layer
				Security (TLS).</p>
			<p>With X.509 certificates, Couchbase Server can strongly encrypt client-server communications
				and <xref href="http://developer.couchbase.com/documentation/server/4.1/xdcr/xdcr-intro.html"
					format="html" scope="external">XDCR</xref> (Cross Data Center Replication).</p>
			<p><image href="pict/ca_sys_diagram.png" id="image_gnp_5mk_y5" width="570"/></p>
			<p>With CA-based certificates, you also get simplified certificate management and certificate
				rotation without client downtime. Full administrators in Couchbase can manage certificates
				using the Couchbase CLI tools (as described in <xref
					href="../cli/cbcli/ssl-manage.dita#cbcli-xdcr-ssl"/>) or REST SPI (as described in  <xref
						href="../rest-api/rest-x509.dita#reference_ytt_hdx_hv"/>).</p>
			<note type="note">Your prior knowledge of TLS/SSL, PKI certificates including X.509
				certificates, and Certificate Authorities (CAs) is assumed for this overview. </note>
			
			<p><b>When to use X.509 Certificates</b></p>
			<p>An X.509 certificate does more than just
				distribute the public key: it is signed by a trusted (internal or third-party) CA and
				verifies the identity of the server so that clients know their information is not being sent
				to a rogue
				server.</p>
				<p>Some common scenarios which may require use of X.509 certificates are:</p>
				<ul id="ul_j3z_b1k_1v">
					<li>In production where clients have to go through the internet.</li>
					<li>When transferring sensitive data on the wire between application and Couchbase Server,
						or between data centers (XDCR).</li>
					<li>When mandated by regulatory compliance regulations.</li>
				</ul>
			<p><b>CA Hierarchies Supported by Couchbase</b></p>
				<p>Couchbase customers can tie Couchbase Server with their CA hierarchies. The CA at the top
					of a hierarchy is called the root authority, or root CA. There are two types of CA
					hierarchies supported by Couchbase: single- or n-tier. </p>
				
				<dl>
					<dlentry>
						<dt>Single-Tier Hierarchy</dt>
						<dd>In its simplest form, the single-tier hierarchy starts with a root CA. <p><image
							href="pict/ca_single_tier.png" id="image_my1_wmk_y5" align="left"/></p><p>For
								example, as shown in the figure above, the root CA is also the issuing CA. All
								certificates immediately below the root certificate inherit its trustworthiness and
								can be used to secure systems. </p><p>Although this is the simplest form of CA
									hierarchy, most enterprises use an N-tier CA hierarchy as described next.</p></dd>
					</dlentry>
				</dl>
				<dl>
					<dlentry>
						<dt>N-Tier Hierarchy</dt>
						<dd>Typically, in many production deployments, a hierarchy will have multiple
							CAs.<p><image href="pict/ca_n_tier.png" id="image_t1g_ymk_y5" align="left" width="570"/>
							</p></dd>
						<dd>In a multi-tier hierarchy, the root CA issues certificates to the intermediate CAs, which
						in turn generate intermediate certificates used to sign the client
						certificates such as a cluster certificate:<ul>
							<li>Trusted root CA > Intermediate CA > Cluster certificate</li>
							<li>Trusted root CA > Intermediate CA 1 > Intermediate CA 2.... >
								Intermediate CA N > Cluster certificate </li>
						</ul><p>When you need to regenerate the intermediate certificate, ensure
							that the chain can be verified up to the root CA. </p><p>If all
							intermediate certificates are not installed on your server, some clients
							might think you are on an insecure connection. This results in
							'untrusted' warnings like the following:</p><p><image
								href="pict/back-to-safety.png" id="image_ofr_hg1_z5" align="left"
								width="450"/>
						</p><p>To avoid such warnings, a server should always send a complete trust
							chain. The trust chain contains your certificate concatenated with all
							intermediate certificates.</p>
					</dd>
					</dlentry>
				</dl>
		
		</section></conbody></concept>
