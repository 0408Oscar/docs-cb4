<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_xh5_l3j_vs">
 <title>Connectivity architecture</title>
 <shortdesc>Couchbase Server is a fully distributed database, thus connection management and efficient communication is a key component of the architecture. In this section we will cover the client to cluster, node to node, cluster to cluster and cluster to external products communications.</shortdesc>
 <conbody>
  
  <section> <title>Client to cluster communication </title>
   <p><b>Connectivity Phases</b></p>
   <p>When a connection request comes in from the client side, the connection is established in 3 phases. 
  <ol>
   <li>Authentication</li>
   <li>Discovery</li>
   <li>Service connection</li>
  </ol>
   </p>
  </section>
  <section> <title>Node to node communication </title>
   <p>Nodes of the cluster communicate with each other to replicate data, maintain indexes, check health of nodes, communicate changes to the configuration of the cluster that the admins perform and more.</p>
   <p>Node to node communication is optimized for high efficiency operations, thus it may not go through all the phases described above.</p>
  </section>
  <section><title>Cluster to cluster communication </title>
   <p>Couchbase Server clusters can communicate with each other using the Cross Datacenter Replication (XDCR) capability. XDCR communication is set up from a source cluster to a destination cluster. You can find detailed discussion on XDCR in the Cross Datacenter Replication (XDCR) section</p>
  </section>
  <section><title>External connector communication </title>
   <p>Couchbase Server also communicates with external products through connectors. There are a number of connectors that are built and supported by Couchbase (Spark, Kafka, Elasticsearch, SOLR, etc) and many that are built by the community or other companies (ODBC driver, JDBC driver, flume, storm, nagios connectors for couchbase, etc).</p>
   <p>External connectors are typically built over existing client SDKs, the direct service or admin APIs listed in the client to cluster communication section or feed directly from the internal APIs such as the Database Change Protocol (DCP) API. You can find more details on DCP in the Database Change Protocols section.</p>
  </section>
 </conbody>
</concept>
