<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_x13_xlj_vs">
 <title>Storage architecture</title>
 <shortdesc>Couchbase Server consists of various services and components that have different storage requirements. Each component uses the optimized storage engine purpose-built and configured for the workload of relevant components.</shortdesc>
 <conbody>
  <section><title>Data Service and Couchstore</title>
   <p>For core data operations, Couchbase Server uses Couchstore. Each vBucket is represented as a separate Couchstore file in the filesystem. Couchstore uses a B+tree structure to quickly access items through their keys. For efficient writes, Couchstore uses an append-only write model for each file. With append-only write model, a compaction process is needed to clean up the orphaned or fragmented space in the file. The compaction process reads the existing file and writes a new contiguous file that no longer contains the orphaned items. The  compaction process runs in the background and is designed to minimize the impact on the front end performance. The compaction process can be manual, scheduled, or automated based on percentage of fragmentation.</p>
    <p>As an administrator, you can independently control data and index storage path within the filesystem, per cluster or per node. This ensures data and index storage can utilize separate I/O subsystems to allow independent tuning.</p>
  </section>
  <section><title>Index Service and ForestDB</title>
   <p>For indexing with GSI in the Index service, Couchbase Server uses ForestDB. With ForestDB, each index is represented as a separate ForestDB file in the filesystem. Unlike Couchstore, ForestDB uses a B+trie structure to quickly access item through its index key. B+trie provides a more efficient tree structure compared to B+trees and ensures a shallower tree hierarchy to better scale large item counts and very large index keys. ForestDB, like Couchstore, uses an append-only write model for each file for efficient writes which also requires compaction for cleanup. For more information on ForestDB and B+Trie, see <xref href="https://github.com/couchbase/forestdb/wiki.html" format="html" scope="external">https://github.com/couchbase/forestdb</xref>. </p>
  </section>
 </conbody>
</concept>
