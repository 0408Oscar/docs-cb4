<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_v4w_zmj_vs">
 <title>Services architecture and multi dimensional scaling</title>
 <shortdesc>Need introduction here</shortdesc>
 <conbody>
  <p>Couchbase Server, like other databases, optimizes your interaction with the data. However, different interactions with data can have competing needs on the computational resources. There are three (3) main types of database workloads: <ul>
   <li>Core data operations - These are the high velocity updates to your data.</li>
   <li>Indexing operations - Indexing provides faster access to data. Indexes keep up with high velocity updates to the data while responding to query requests.</li>
   <li>Query execution - Queries reshape and summarize data in various ways. Depending on the query, query engine uses indexes or directly scans data to get the final result. </li>
  </ul>
   </p>
  <p>Relational databases tightly couple these workloads and depend on scaling up as the workloads
   increase. NoSQL and big data platforms typically partition these three (3) workloads across their
   pool of machines using symmetric scale-out, giving each node an equal share of the work.
   Couchbase Server does this symmetric scaling as well. <fig id="fig_dc5_ll2_xs">
    <title>Symmetric scaling with Couchbase Server</title>
    <image placement="break" href="images/symmetric-scaling-with-cbserver.png" width="400"
     id="image_ec5_ll2_xs"/>
   </fig></p>
  <p>Symmetric scale-out is simple. However, there are some drawbacks to this architecture: <ul>
   <li>The core data operations, indexing, and query execution workloads receive concurrent requests and compete for the same computational resources when they reside on the same node. For example, as the velocity of updates to the data increases, indexing has to work harder to maintain the indexes, which in turn takes away resources from core data operations. </li>
   <li>Scale-out works against query latencies as it results in a wider fan-out in workloads. As query workload increases, computing the new aggregates requires scatter-gather index lookups, which takes away resources from all the nodes at once making scale-out unfit as a scalability model. </li>
  </ul></p>
  <p>With Multidimensional Scaling (MDS), Couchbase Server allows each of the workloads to
   independently scale, thus addressing these issues. With MDS, some or all services can choose to
   independently scale up and scale out within the same Couchbase Server cluster. For example, <ul>
    <li>Core data operations can scale out and add more capacity to process data mutations. Core
     data operations is a perfectly partitionable workload and scaleout brings great benefits.</li>
    <li>Query and index services can scale-up with fewer nodes to eliminate scatter-gather and favor
     more local processing for queries. As an Administrator, you can fine tune the hardware
     resources for each service separately. You can add more cores to parallelize query computation
     in query service and also add more memory to cache more indexes in the index service. </li>
   </ul>
   <fig id="fig_ltw_nq2_xs">
    <title>Independent scaling with Couchbase Server</title>
    <image placement="break" href="images/independent-scaling.png" width="400" id="image_mtw_nq2_xs"
    />
   </fig></p>
  <p>Multidimensional Scaling (MDS) separates the three distince workloads: <ul>
   <li>Data Service, which performs core data operations and Views in Couchbase Server. All clusters are required to have the core data service enabled.
   </li>
   <li>Index Service, which performs indexing with Global Secondary Indexes (GSI). Indexing Service is optional.</li>
   <li>Query Service, which performs N1QL query execution. Query Service is optional.
   </li>
  </ul> When you create a new cluster or add new nodes, as an Administrator you can choose to enable or disable the services on each node and create a topology.</p>
 </conbody>
</concept>
