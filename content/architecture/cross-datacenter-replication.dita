<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_csn_h4v_vs">
 <title>Cross datacenter replication</title>
 <shortdesc>Using the cross datacenter replication (XDCR) capability you can set up replication of data between clusters. XDCR helps protect against data center failures and also helps maintain data locality in globally distributed mission critical applications. </shortdesc>
 <conbody>
  <p>As as administrator, you can use XDCR to create replication relationships that replicate data from a source cluster’s bucket to a destination cluster’s bucket. You can also set up complex topologies across many clusters such as bidirectional topologies, ring topologies, tree structured topologies, and more. </p>
  <p>XDCR uses DCP to stream mutations with an agent. The XDCR agent is tuned to function with low latency and high reliability over WAN type latencies and efficiently handle frequent connectivity
   issues between clusters. <fig id="fig_m4y_g3d_ws">
    <title>Cross datacenter replication (XDCR)</title>
    <image placement="break" href="images/xdcr.png" width="600" align="left" id="image_n4y_g3d_ws">
     <alt>Cross datacenter replication (XDCR) with Couchbase Server</alt>
    </image>
   </fig>
  </p>
  <p>In XDCR, each replication definition is set up between a source and destination cluster. Every cluster can be a source or a destination cluster for many replication definitions in XDCR. With each replication, the source cluster runs XDCR agents on each of its nodes to push mutations to the destination cluster.</p>
  <p>The XDCR agent on the source cluster node uses direct access communication (XMem) to propagate
   mutations from the source vBucket to the matching vBucket on the destination cluster. Since there
   are equal number of  vBuckets (typically 1024) on both the source and the destination clusters,
   there is a one-to-one match for each source and destination vBucket.</p>
  <p>It is important to note that XDCR does not require source and destination clusters to have identical topology. XDCR agents are smart enough to always find the matching vBucket at the destination and propagate the mutations to the destination node that owns the matching destination vBucket using the cluster maps on source and destination clusters.</p>
 </conbody>
</concept>
