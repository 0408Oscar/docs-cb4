<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_p4j_ghj_vs">
 <title>Terminology</title>
 <shortdesc>This section defines the key terms and concepts used in the Couchbase Server
  architecture documentation.</shortdesc>
 <conbody><dl>
  <dlentry>
   <dt>Node</dt>
   <dd>A single Couchbase Server instance running on a physical server, virtual machine, or a container.  <p>All nodes are identical: they consist of the same components and services and provide the same interfaces.</p></dd>
  </dlentry>
  <dlentry>
   <dt>Cluster</dt>
   <dd>Cluster is a collection of nodes that are accessed and managed as a single group. Each node is an equal partner in orchestrating the cluster to provide facilities such as monitoring the health of nodes, providing operational information, or managing cluster membership of nodes. 
    <p>Clusters are scalable. You can expand a cluster by adding new nodes and shrink a cluster by removing nodes.</p>
    <p>Cluster Manager is the main component that orchestrates the cluster level operations. For more information, see <xref href="cluster-manager.dita">Cluster Manager</xref>. </p> </dd>
  </dlentry>
  <dlentry>
   <dt>Bucket</dt>
   <dd>Bucket is a logical container for a related set of items such as key-value pairs or documents. Buckets are similar to databases in relational databases. They provide a resource management facility for the group of data that they contain. Applications can use one or more buckets to contain their data.</dd>
  </dlentry>
  <dlentry>
   <dt>Item</dt>
   <dd>Item is the basic unit of data in a Couchbase Server. An item is a key-value pair where each
     stored value is identified by a unique key within the bucket. <p>This is different from
      relational databases which store data in databases grouped by tables. Tables have a strict
      schema (set of columns) and data is stored in rows in tables. </p>Values for an item can be
     anything from a single bit, to a decimal measurement, to JSON documents. Storing data as a JSON
     document allows the Couchbase Server to provide extended features such as indexing and
     querying. Items are also referred to as documents, objects, or key-value pairs.  </dd>
  </dlentry>
  <dlentry>
   <dt>vBucket</dt>
   <dd>vBuckets are physical partitions of the bucket data. By default, Couchbase Server creates 1024 master vBuckets per bucket to store the bucket data. Buckets may store redundant copies of data called <i>replicas</i>. Each replica also creates another set of vBuckets to mirror the master vBucket. The vBuckets that maintain replica data are called replica vBuckets.
   </dd>
  </dlentry>
  <dlentry>
   <dt>Replication</dt>
   <dd>Replication is the process of creating additional copies of active data on alternate nodes. Replication is at the heart of the Couchbase Server architecture enabling high availability, disaster recovery, and data exchange with other big data products. It is the core enabler for <ul>
    <li>Moving data between nodes to maintain replicas. </li>
     <li>Geo-distribution of data with cross datacenter replication (XDCR)</li>
     <li>Queries with incremental map-reduce and spatial views </li>
     <li>Backups with full or incremental snapshots of data</li>
     <li>Integration with Hadoop, Kafka and text search engines based on Lucene like Solr</li>
   </ul>
    <p>For more information, see <xref href="high-availability-replication-architecture.dita"> High availability and replication architecture</xref>.</p> </dd>
  </dlentry>
  <dlentry>
   <dt>Rebalance</dt>
   <dd>Topology of a cluster can change as nodes are added or removed due to capacity requirements or node failures. As the number of nodes changes, <i>rebalance</i> is used to redistribute the load and adapt to the new topology of nodes. Cluster Manager coordinates the movement of vBbuckets and data index and query service traffic during rebalance. Rebalance is performed completely online and with minimal impact to the incoming workload.</dd>
  </dlentry>
  <dlentry>
   <dt>Failover</dt>
   <dd>Failover is the process that diverts traffic away from failing nodes to the remaining healthy nodes. Failover can be done automatically based on the health status of a node or can be done manually by the administrator. A node that is failed over does not accept any new traffic.</dd>
  </dlentry>
  <dlentry>
   <dt>Node lifecycle</dt>
   <dd>As a node joins or drops out of the cluster, it goes through a set of state transitions.
     Operations such as Add Node, Remove Node, Rebalance, and Failover cause state transitions. The
     following diagram lists the states and state transitions of the nodes in the cluster. <fig
      id="fig_x5h_k1c_ws">
      <title>Node lifecycle</title>
      <image placement="break" href="images/node-lifecycle.png" width="350" align="left"
       id="image_y5h_k1c_ws"/>
     </fig></dd>
  </dlentry>
  <dlentry>
   <dt>Services</dt>
   <dd> Couchbase services are components that run specific independent workloads within the
     cluster. Databases handle three distinct workloads: core data operations, indexing, and query
     processing. Couchbase Server includes Data, Index, and Query Services to enable independent
     deployment of these workloads within a cluster. <p>Each node can run all services or a subset
      of the services. As an administrator, you can create unique topologies using these independent
      services and independently scale the three workloads. For more information, see <xref
       href="services-archi-multi-dimensional-scaling.dita">Services architecture and multi
       dimensional scaling</xref>.</p>
     <dl>
      <dlentry>
       <dt>Core data access and data service</dt>
       <dd>Data Service provides the key-value API that you can use to perform CRUD operations
        (create, retrieve, update, and delete) on items with keys within buckets. For more
        information, see <xref href="data-service-core-data-access.dita">Data service and core data
         access</xref>. </dd>
      </dlentry>
      <dlentry>
       <dt>Indexing and index service</dt>
       <dd>Indexes provide faster access to data in a bucket. Couchbase Server supports the
        following three indexers: <ul>
         <li>Incremental Map-Reduce View indexer </li>
         <li>Global Secondary Index (GSI) indexer</li>
         <li>Spatial Views indexer</li>
        </ul>
        <p>Using these indexers, you can create two types of indexes: <ul>
          <li><i>Primary indexes</i> which index all the keys in a given bucket and are used when a
           secondary index cannot be used to satisfy a query and a full bucket scan is required. </li>
          <li><i>Secondary indexes</i> can index a subset of the items in a given bucket and are
           used to make queries targeting a specific subset of fields more efficient.</li>
         </ul></p>
        <p>In Couchbase Server, Views (both Incremental Map-Reduce Views and Spatial Views) are
         placed within the data service as they are partition-aligned to the core data distribution.
         The Global Secondary Indexes (GSI) are deployed on nodes hosting the index service and can
         be independently partitioned for better performance and throughput with N1QL queries. For
         more information, see <xref href="views-indexing-index-service.dita">Views, indexing, and
          index services</xref>. For more information about N1QL, see <xref
          href="querying-data-and-query-data-service.dita"> Querying data and query
         service</xref>.</p></dd>
      </dlentry>
      <dlentry>
       <dt>Querying data and query service</dt>
       <dd>You can retrieve data in a number of ways in Couchbase Server depending on the type of
        query. <ul>
         <li>Querying with keys <p>Data service and core data operations provide a key based lookup.
           You can retrieve items based on the item key using the key-value API. </p></li>
         <li>Querying with value, document, or document attribute <p>
           <ul>
            <li>With N1QL, you can query JSON documents using SQL-like syntax. You can also run
             ad-hoc queries with filters and aggregates over JSON data and reshape the JSON output.
             N1QL API is available through the query service.</li>
            <li>Incremental Map-Reduce views provide a View API that can query data based on the
             keys defined by a view. Views can define the keys using the MapReduce functions in
             JavaScript. Incremental Map-Reduce view API are available through data service.</li>
            <li>Spatial views provide a Spatial View API that can query data based on a bounding box
             (rectangle with coordinates). Spatial views define the attributes that signify the
             coordinates a given item represents using the MapReduce functions in JavaScript.
             Spatial view API is available through the data service. </li>
           </ul>
          </p>
         </li>
        </ul>
        <p>For more information, see <xref href="querying-data-and-query-data-service.dita">
          Querying data and query service</xref>.</p>
       </dd>
      </dlentry>
     </dl>
    </dd>
  </dlentry>
 </dl>
 </conbody>
</concept>
