<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_qqk_4r2_xs">
 <title>
  Buckets
 </title>
 
 <shortdesc>
  Buckets are logical groups of items, each item consisting of a key and a corresponding value. 
  Buckets facilitate the creation, retrieval, and management of the items they contain. 
 </shortdesc>
 
 <conbody>
  
  <section>
   
   <title>
    Bucket Types
   </title>
   
   <p>
    Three types of bucket are provided: 
   </p>
    
    <ul>
     <li>
      <b>Couchbase buckets</b>: These use <i>vBuckets</i> (virtual buckets): to organize items per node, in
      memory and on disk; and also to
      distribute items across the multiple nodes of a cluster. Bucket-data can be indexed, by means of
      <i>Views</i> and <i>Indexes</i>; and can also be replicated
      across nodes and clusters, using the <i>Database Change Protocol</i> (DCP) and <i>Cross Datacenter
      Replication</i> (XDCR). 
      

      
      <p>
       <!-- Vertical space -->
      </p>
      
     </li>
     
     <li>
      <b>Ephemeral buckets</b>: These are nearly identical to Couchbase buckets, but are <i>not persistent on
      disk</i> (and in that respect, are similar to Memcached buckets, described below). Ephemeral buckets 
      are designed to be used
      as an alternative to Couchbase buckets whenever persistence is not appropriate: for example, when repeated disk-access 
      involves too much overhead.
      
      <p>
       If an Ephemeral bucket's RAM-quota is exceeded, either no additional data can be added, 
       or the <i>Not Recently Used</i> algorithm is employed, in order to <i>evict</i> items: which means that the
       key, metadata, and all other data for the item is removed from RAM, with no persistent copy retained.
      </p>
      
      <p>
       <!-- Vertical space -->
      </p>
      
     </li>
     
     <li>
      <b>Memcached buckets</b>: These are designed to be used alongside other database platforms, such as ones
      employing relational database technology. By caching frequently used data, Memcached buckets reduce the number
      of queries a database-server must perform. Each 
      Memcached bucket provides a directly addressable, distributed, in-memory key-value cache.
      
      <p>
       Memcached buckets are <i>not persistent on disk</i>: they only exist in RAM. If a Memcached bucket's
       RAM-quota is exceeded, Couchbase Server uses the <i>Least Recently Used</i> algorithm to evict items: the key,
       metadata, and all other data for the item is removed from RAM, with no persistent copy retained.
      </p>
      
      <p>
       <!-- Vertical space -->
      </p>
      
     </li>

    </ul>
   
   <p>
    All bucket types are fully compatible with the Memcached open source distributed key-value cache.
   </p>
   
  </section>
  
  <section>
   
   <title>
    Bucket Capabilities
   </title>
   
   <p>
    Each bucket type supports a different set of capabilities; as shown by the following
    table. 
   </p>
    
    <table frame="all" rowsep="1" colsep="1" id="table_whf_lhl_xs">
     
     <title>Bucket types and associated capabilities</title>
     
     <tgroup cols="4">
      <colspec colname="c1" colnum="1" colwidth="0.6*"/>
      <colspec colname="c2" colnum="2" colwidth="0.6*"/>
      <colspec colname="c3" colnum="3" colwidth="0.6*"/>
      <colspec colname="c4" colnum="4" colwidth="0.6*"/>
      
      <thead>
       <row>
        <entry>Capability</entry>
        <entry>Memcached buckets</entry>
        <entry>Couchbase buckets</entry>
        <entry>Ephemeral buckets</entry>
       </row>
      </thead>
      
      <tbody>
       
       <row>
        <entry>Item size limit</entry>
        <entry>1 MB</entry>
        <entry>20 MB</entry>
        <entry>20 MB</entry>
       </row>
       
       <row>
        <entry>Persistence</entry>
        <entry>No</entry>
        <entry>Yes</entry>
        <entry>No</entry>
       </row>
       
       <row>
        <entry>Replication</entry>
        <entry>No</entry>
        <entry>Yes</entry>
        <entry>Yes</entry>
       </row>
       
       <row>
        <entry>Rebalance</entry>
        <entry>No</entry>
        <entry>Yes</entry>
        <entry>Yes</entry>
       </row>
       
       <row>
        <entry>Statistics</entry>
        <entry>In-memory only</entry>
        <entry>Full suite</entry>
        <entry>In-memory only</entry>
       </row>
       
       <row>
        <entry>Client support</entry>
        <entry>Ketama consistent hashing</entry>
        <entry>Full smart client support</entry>
        <entry>Full smart client support</entry>
       </row>
       
       <row>
        <entry>XDCR</entry>
        <entry>No</entry>
        <entry>Yes</entry>
        <entry>Yes</entry>
       </row>
       
       <row>
        <entry>Backup</entry>
        <entry>No</entry>
        <entry>Yes</entry>
        <entry>No</entry>
       </row>
       
       <row>
        <entry>Querying via N1QL</entry>
        <entry>No</entry>
        <entry>Yes</entry>
        <entry>Yes</entry>
       </row>
       
       <row>
        <entry>Map-reduce &amp; spatial views</entry>
        <entry>No</entry>
        <entry>Yes</entry>
        <entry>Yes</entry>
       </row>
       
       <row>
        <entry>Global secondary indexes</entry>
        <entry>No</entry>
        <entry>Yes</entry>
        <entry>Yes</entry>
       </row>
       
       <row>
        <entry>Full-text search</entry>
        <entry>No</entry>
        <entry>Yes</entry>
        <entry>Yes</entry>
       </row>
       
       <row>
        <entry>External connectors</entry>
        <entry>No</entry>
        <entry>Yes</entry>
        <entry>Yes</entry>
       </row>
       
       <row>
        <entry>TAP</entry>
        <entry>No</entry>
        <entry>Yes</entry>
        <entry>No</entry>
       </row>
       
       <row>
        <entry>DCP</entry>
        <entry>No</entry>
        <entry>Yes</entry>
        <entry>Yes</entry>
       </row>
       
       <row>
        <entry>Encrypted data access</entry>
        <entry>Yes </entry>
        <entry>Yes</entry>
        <entry>Yes</entry>
       </row>
      </tbody>
     </tgroup>
    </table>
   
  </section>
  
  <section>
   <title>
    Couchbase vs Ephemeral Buckets
   </title>
   
   <p>
    Couchbase and Ephemeral buckets both provide a highly available, dynamically reconfigurable, distributed 
    data-store; which survives node failures, and allows cluster-reconfiguration to occur while service-requests
    continue to be serviced. The similarities and differences between these bucket-types are described in the following
    table.
   </p> 
   
   <table frame="all" rowsep="1" colsep="1" id="table_dcd_m3l_xs">
    
     <title>
      Couchbase and Ephemeral bucket-capabilities
     </title>
    
     <tgroup cols="3" align="left">
      <colspec colname="c1" colnum="1" colwidth="0.6*"/>
      <colspec colname="c2" colnum="2" colwidth="1.0*"/>
      <colspec colname="c2" colnum="3" colwidth="1.0*"/>
      <thead>
       <row>
        <entry>Capability</entry>
        <entry>Couchbase Buckets</entry>
        <entry>Ephemeral Buckets</entry>
       </row>
      </thead>
      
      <tbody>
       
       <row>
        <entry>
         Caching
        </entry>
        
        <entry>
         Couchbase buckets operate through RAM. The data is stored in RAM and persisted to
         disk. The data is cached in RAM until RAM-capacity is exhausted; at which point data is <i>ejected</i>
         from RAM. Following ejection, or at any other time when not in RAM, requested bucket-data is loaded
         automatically from disk.
        </entry>
        
        <entry>
         Ephemeral buckets operate exclusively within RAM. The data is not persisted to
         disk: it is cached in RAM until RAM-capacity is exhausted; at which point,
         in accordance with an administrator's previously selected set-up options,
         either no additional data can be added, or the <i>Not Recently Used</i> algorithm is
         employed, in order to <i>evict</i> data. Evicted data <i>may</i> continue to be available due to
         prior replication, but otherwise is not retrievable from Couchbase Server.
        </entry>
        
       </row>
       
       <row>
        
        <entry>
         Persistence
        </entry>
        
        <entry>
         Couchbase buckets are persisted asynchronously, from memory to disk. This
         provides protection from server-restarts. You can set persistence-properties at the bucket
         level. 
        </entry>
        
        <entry>
         Ephemeral buckets are not persisted to disk: they are retained temporarily, in RAM only.
        </entry>
        
       </row>
       
       <row>
        
        <entry>
         Replication
        </entry>
        
        <entry>
         Couchbase buckets can be replicated across a configurable number of servers.
         If the host machine fails, a replica server is promoted to be the host server,
         providing high availability cluster operations via failover. You can configure replication
         at the bucket level.
        </entry>
        
        <entry>
         Ephemeral buckets can be replicated across a configurable number of servers,
         exactly as can Couchbase buckets; but without being persisted to disk.
        </entry>
        
       </row>
       
       <row>
        
        <entry>
         Rebalancing
        </entry>
        
        <entry>
         By means of rebalancing, the load constituted by Couchbase buckets is distributed
         evenly across nodes within the cluster. Buckets and nodes can be dynamically added and
         removed.
        </entry>
        
        <entry>
         Rebalancing redistributes Ephemeral buckets, exactly as it does Couchbase buckets; but
         without the data being persisted to disk.
        </entry>
        
       </row>
      </tbody>
     </tgroup>
    </table>

   
  </section>
  
  <section>
   
   <title>
    Bucket Authentication
   </title>
   
  <p>
   Couchbase, Memcached, and Ephemeral buckets can all be configured either for authenticated access, via
   SASL authentication, on a Couchbase-specified port; or for unauthenticated access, on an 
   administrator-specified port.
  </p>
   
   <ul>
    
   <li>
    <b>Authenticated Access</b>: You can define a bucket to require a specified password, before being
    accessible. The port must be 11210. The authentication mechanism will be the strongest 
    Couchbase-supported variant of
    SASL that is available to both the client and Couchbase Server. vBucket-aware smart 
    clients (SDKs) can be used to access a SASL bucket. You cannot use legacy ASCII clients to reach these 
    buckets. 
    
    <p>
     <!-- Vertical space -->
     
    </p>
   </li>
    
   <li>
    <b>Unauthenticated Access</b>: You can place non-SASL buckets on any available port except port 
    11211, which is reserved for the default bucket. Only one non-authenticating bucket can be
    placed on any individual port. You can access 
    non-SASL buckets using vBucket-aware smart-client SDKs, an ASCII client, or a
    binary client that does not use SASL authentication.
   </li>
    
  </ul>
   
   <p>
    Smart clients discover changes in the cluster using the Couchbase REST API. Using SASL 
    buckets, you can isolate individual applications to provide multi-tenancy, or isolate data-types in 
    the cache to enhance performance and visibility. Using Couchbase Server, you can configure 
    different ports to access one of the following: 
   </p>
   
    <ul>
     
    <li>Non-SASL buckets</li>
     
    <li>Isolated buckets using the binary protocol with SASL authentication</li>
     
    <li>Isolated buckets using the ASCII protocol with no authentication</li>
     
   </ul>
   
   <p>
    You can use a mix of bucket types (Couchbase, Ephemeral, and Memcached) in your environment. Buckets of 
    different types share the same resource pool and cluster resources.
   </p>
   
   <p>
    You can configure the quotas for RAM and disk usage per bucket, enabling you to manage resource 
    usage across the cluster. As an administrator, you can modify quotas on a running cluster and re-allocate 
    resources when usage patterns or priorities change.
   </p>
   
  </section>
  
  <section>
   
   <title>
    The Default Bucket
   </title>
   
   <p>
    The <i>default bucket</i> is a special bucket, optionally set up during initial configuration
    of Couchbase Server. It is a non-SASL authenticating bucket that always resides on port 11211. 
    You can remove the
    default bucket after installation, and re-add it at a later time. When re-adding the default
    bucket, ensure that you place it on port 11211, and specify it as a non-authenticating bucket.
    You can access the default bucket using vBucket-aware smart-client SDKs, an ASCII client, or a
    binary client that does not use SASL authentication.
   </p>
   
  </section>
 </conbody>
</concept>
