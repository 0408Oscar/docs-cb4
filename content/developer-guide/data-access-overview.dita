<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_r5s_c2m_zs">
 <title>Data Access</title>
 <shortdesc>Getting data in and out of Couchbase</shortdesc>
 <conbody>
        <p>Couchbase is a database. Developing against a database involves storing items within the
            database and retrieving them. Storing and retrieving data is collectively referred to as
            data access. Data access is primarily done via a Couchbase [SDK]. [Command line] and
            [web-based] tools are also available to help you access data.</p>
    </conbody>
    <concept id="concept_mq1_xfm_zs">
        <title>Create-Read-Update-Delete (CRUD)</title>
        <conbody>
            <p>Every item in a database will go through the basic <i>CRUD</i> cycle which is typical
                of an application’s use of data.</p>
            <ul id="ul_r1j_1gm_zs">
                <li>
                    <p><b>C</b>reate: when data is first inserted into the cluster</p>
                </li>
                <li>
                    <p><b>R</b>ead: when an application retrieves the data</p>
                </li>
                <li>
                    <p><b>U</b>pdate: when data is modified to reflect a change in the state
                        represented by the data</p>
                </li>
                <li>
                    <p><b>D</b>elete: when the data is no longer needed</p>
                </li>
            </ul>
            <p>We’ll use the [command line] interface to demonstrate these features. If you don’t
                know how to use or install our command line client, don’t worry - we’ll walk through
                the steps in the next chapter.</p>
            <section><title>Creating documents</title>Create the document <i>mnunberg.json</i>. It can
                be anywhere on your
                filesystem:<codeblock outputclass="language-javascript">{
    "name": "Mark Nunberg",
    "email": "mark.nunberg@couchbase.com",
    "privs": ["admin"],
    "location": {
        "country": "United States",
        "state": "NV",
        "city": "Reno"
    },
    "following": [
        "u:tgreenstein", "u:ingenthr", "u:potus"
    ],
    "likes": ["doge", "pastries"]
}</codeblock>Now,
                insert the document into Couchbase using the <i><codeph>cbc</codeph></i>
                utility:<screen>$ cbc create --mode insert mnunberg &lt; mnunberg.json</screen><codeph>mnunberg</codeph>
                is the document’s ID. We’ve piped the document’s contents to the <codeph>cbc</codeph>
                command’s standard input.</section>
            <section><title>Reading documents by ID</title>Documents can be retrieved using their IDs.
                Retrieving a document by ID is extremely fast. This query took about 1
                millisecond.<screen>$ cbc cat mnunberg
{
    "name": "Mark Nunberg",
    "email": "mark.nunberg@couchbase.com",
    "privs": ["admin"],
    "location": {
        "country": "United States",
        "state": "NV",
        "city": "Reno"
    },
    "following": [
        "u:tgreenstein", "u:ingenthr", "u:potus"
    ],
    "likes": ["doge", "pastries"]
}</screen></section>
            <section><title>Reading documents by querying</title>Retrieving a document may be done using
                a unique identifier (ID) (assigned by the application at the document’s creation), or by
                inspecting its contents to see if it matches a certain criteria. ID lookups are quicker
                but querying documents allows for richer search capabilities ("Give me all likes and
                followed users located in the US?" versus "Give me a user with the ID
                e3d882a4").<screen>$ cbc n1ql \
  'SELECT following, likes FROM default WHERE location.country = "United States"'
       {
            "following": [
                "u:tgreenstein",
                "u:ingenthr",
                "u:potus"
            ],
            "likes": [
                "doge",
                "pastries"
            ]
</screen></section>
            <section><title>Updating documents</title>Updating a document means changing the existing
                document. Let’s take the file above and add a
                <i>like</i>:<screen>    ...
    "likes": ["doge", "pastries", "couchbase"]
    ....</screen>Then
                use the <i>cbc</i> tool to update the document in
                Couchbase:<screen>$ cbc create --mode replace mnunberg &lt; mnunberg.json</screen></section>
            <section>
                <title>Deleting documents</title>
                <screen>$ cbc rm mnunberg</screen>
            </section>
        </conbody>
    </concept>
    <concept id="concept_vsc_cgm_zs">
        <title>Couchbase Clients</title>
        <conbody>
            <p>Clients access data by connecting to a Couchbase cluster over the network. The most
                common type of client is a Couchbase SDK which is a full programmatic API that
                enables applications to take the best advantage of Couchbase. The command line
                client provides a quick and streamlined interface for simple access and is suitable
                if you just want to access an item without writing any code. [Setting up SDK]
                [Setting up Command line].</p>
        </conbody>
    </concept>
</concept>
