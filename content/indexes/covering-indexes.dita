<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_yv4_c2z_wt">
 <title>Covering indexes</title>
 <shortdesc>Indexes help locate data in a database and do not retrieve the data itself. Covering
  indexes are special cases where the index includes all the information needed to satisfy a query
  and do not require an additional step to access the data. As a result, covered queries, that is,
  queries that get all their information from the index, are faster and deliver better
  performance.</shortdesc>
 <conbody>
  <p>The following diagram illustrates the query execution work flow without covering indexes. </p>
  <p> </p>
  <p>Covering indexes are only applicable to secondary index scans and can be used with views and
   global secondary indexes (GSI). Consider is a simple index, <userinput>coveridx1</userinput>, on
   the <codeph>beer-sample</codeph> sample bucket that includes the <parmname>brewery_id</parmname>,
    <parmname>name</parmname>, <parmname>state</parmname>, and <parmname>category</parmname>:
   <codeblock>create index coveridx1 on `beer-sample` (brewery_id, name, state, category) using gsi;</codeblock>The
   following EXPLAIN statement illustrates how the query gets all the information from the index
    <userinput>coveridx1</userinput>. In this case, the query is called a <term>covered query</term>
   and the index <userinput>coveridx1</userinput> is called a <term>covering index</term>. <codeblock spectitle="Query">cbq> EXPLAIN select brewery_id, name, category from `beer-sample` where brewery_id = "cedar_brewing" limit 1;</codeblock>
   <codeblock spectitle="Response">{
    "requestID": "5b4f0505-2a41-4fae-b170-746ec5ebcc8c",
    "signature": {
    "brewery_id": "json",
    "category": "json",
    "name": "json"
    },
    "results": [
    {
    "brewery_id": "cedar_brewing",
    "category": "North American Ale",
    "name": "Black Cobra Stout"
    }
    ],
    "status": "success",
    "metrics": {
    "elapsedTime": "4.202182ms",
    "executionTime": "4.13965ms",
    "resultCount": 1,
    "resultSize": 140
    }
    }</codeblock></p>
 </conbody>
</concept>
