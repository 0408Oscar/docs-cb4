<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_ul5_45f_ps">
 <title>Data access</title>
	<shortdesc>
	 Couchbase offers multiple ways to access data: by issuing N1QL queries, by querying MapReduce views, by querying spatial views, and by key-value operations that allow fast direct access to documents using their unique identifiers. You are not restricted to choose a single access method as N1QL queries, key-value, and MapReduce data access can all co-exist within the same application and Couchbase SDK. </shortdesc>
 <conbody>
  <section> <title> SQL Query Support (N1QL)</title>
   <p>Couchbase Server can be programmed using SQL. Given that nearly all programmers already know SQL, most developers will be able to get started quickly on Couchbase. And since most organizations already have significant amounts of SQL code, Couchbase Server fits into the technology landscape more easily.  Support for SQL by JDBC and ODBC drivers opens the ecosystem of tools for analytics and data integration such as Microsoft Excel, Tableau, and Informatica.</p>
   <p>Couchbase created its own SQL dialect called N1QL in order to give developers and enterprises an expressive, powerful, and complete language for querying, transforming, and manipulating JSON data. The N1QL query engine is optimized for modern, highly parallel multi-core execution. N1QL has special extensions that allow it to deal with documents with variable and/or nested structures.  Just as SQL operates on rows, columns and tables of an RDBMS and returns rows and columns to the application, N1QL operates on JSON and returns JSON to the application.
   </p>
   <p>N1QL provides a full range of functionality immediately familiar to anyone who has used SQL. N1QL can even query across document relationships. 
    <ul>
     <li>SELECT statements for queries and sub-queries</li>
    <li>UPDATE, UPSERT, INSERT, DELETE statements</li>
    <li>JOIN clauses to combine results from multiple documents into a single set</li>
    <li>WHERE clauses to define filters that narrow query selectivity and constrain UPDATE, UPSERT, INSERT and DELETE statements</li>
    <li>Aliases to rename elements for convenience and clarity</li>
    <li>Transformations such as GROUP BY, ORDER BY, LIMIT and OFFSET</li>
    <li>Both distinct and non-distinct set operators UNION,</li> 
    <li>Aggregate functions such as AVG, SUM, MAX, and COUNT</li>
    <li>A full range of expressions including string comparisons with LIKE and string operators such as UPPER and SUBSTR</li>
    <li>Prepared statements that get and cache a query plan independently of query execution, eliminating unnecessary work and therefore lowering query latency</li>
   </ul>
   
   </p></section>
  <section> <title> Key-Value operations</title></section>
  <section> <title> JavaScript-based Local Views</title></section>
  <section> <title> MapReduce Queries</title></section>
  <section> <title> Spatial Queries</title></section>
  <section> <title> Full Text Search</title></section>
  
 </conbody>
</concept>
