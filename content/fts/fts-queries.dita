<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_q2x_tl4_1v">
  <title>Queries</title>
  <body>
   <p><b>Queries Using the Web Console</b></p>
   <p>Once you have created a full text index, you can search it using the Couchbase Server Web
                Console (<filepath>http://<varname>your-Couchbase</varname>:8091</filepath>). Go to
                    <uicontrol>Indexes</uicontrol> > <uicontrol>Full Text</uicontrol>. Select your
                index from the dropdown and then enter your query using the <xref
                    href="fts-query-types.dita#topic_jfq_fn4_1v/query-string-query-syntax">query
                    string syntax</xref>. </p>
      <p><b>Queries Using the REST API</b></p>
      <p>You can also use the REST API to perform queries. The easiest way to get started is to
                perform a query using the Web Console. Then, click the
                    “<uicontrol>Advanced</uicontrol>” checkbox. You will see the JSON payload to
                pass to the REST API. Click the nearby checkbox to get the CURL command. See the
                    <xref href="../rest-api/rest-fts.dita#topic_ytp_sx4_1v">REST reference</xref> for more
                information.
                <codeblock spectitle="Example CURL command to query the index 'beer-idx'">curl -X POST -H "Content-Type: application/json" \
http://127.0.0.1:9110/api/index/beer-idx/query \
-d '{
        "indexName": "beer-idx",
        "size": 10,
        "from": 0,
        "explain": true,
        "highlight": {},
        "query": {
            "boost": 1,
            "query": "geo.accuracy:rooftop"
        },
        "fields": [
            "*"
        ],
        "ctl": {
            "consistency": {
                "level": "",
                "vectors": {}
            },
            "timeout": 0
        }
    }'</codeblock></p>
      <p><b>Query Counts</b></p>
          <p>All queries return a result count. To get just the count of documents that match a
                particular query without returning documents or ids, execute the query as usual but
                specify size “<userinput>0</userinput>” to return no results, as in the following
                example:
                <codeblock>curl -X POST -H "Content-Type: application/json" \
http://127.0.0.1:9110/api/index/beer-idx/query \
-d '{
         "indexName": "beer-idx",
         "size": 0,
         "from": 0,
         "explain": true,
         "highlight": {},
         "query": {
             "boost": 1,
             "query": "geo.accuracy:rooftop"
         },
         "fields": [
             "*"
         ],
         "ctl": {
             "consistency": {
                  "level": "",
                  "vectors": {}
             },
             "timeout": 0
         }
    }'</codeblock></p>
          <p>You can get a count of entries in an index overall by using the REST API:
              <codeblock>http://localhost:9110/api/index/beer-idx/count</codeblock></p>
      <section><title>Types of Queries</title>
         <p>See <xref href="fts-query-types.dita"></xref> for details.</p> 
      </section>
      <section><title>Search Facets</title>
          <p>Facets are aggregate information collected on a particular result set. So, you have to
              already have a search in mind, and then you collect additional facet information along with
              it. All of the facet examples below are for the query "<codeph>water</codeph>" on the
              beer-sample dataset.</p>
          <p>FTS supports 3 types of facets: <ul>
              <li>Term Facet - A term facet counts up how many of the matching documents have a particular
                  term in a particular field. Most of the time this only makes sense for relatively low
                  cardinality fields, like a type or tags. It would not make sense to use it on a unique
                  field like an ID.</li>
              <li>Numeric Range Facet - A numeric range facet works by the user defining their own buckets
                  (numeric ranges). The facet then counts how many of the matching documents fall into a
                  particular bucket for a particular field.</li>
              <li>Date Range Facet - same as numeric, but on dates instead of numbers <note>For Developer
                  Preview, Date Range Facets are not supported.</note></li>
          </ul><note>Most of the time, when building a term facet you want to use the keyword analyzer.
              Otherwise multi-term values get tokenized and the results are not what you
              expect.</note></p>
          <p><b>Examples</b></p>
              <ol>
                  <li>Term Facet - computes facet on the type field which has 2 values: <codeph>beer</codeph>
                      and <codeph>brewery</codeph>.
                      <codeblock>curl -X POST -H "Content-Type: application/json" \
                          http://localhost:9110/api/index/bix/query \
                          -d '{
                          "size": 10,
                          "query": {
                          "boost": 1,
                          "query": "water"
                          },
                          "facets": {
                          "type": {
                          "size": 5,
                          "field": "type"
                          }
                          }
                          }'</codeblock>
                      The result snippet below only shows the facet section for clarity. Run the curl command to
                      see the HTTP response containing the full results.
                      <codeblock>"facets": {
                          "type": {
                          "field": "type",
                          "total": 91,
                          "missing": 0,
                          "other": 0,
                          "terms": [
                          {
                          "term": "beer",
                          "count": 70
                          },
                          {
                          "term": "brewery",
                          "count": 21
                          }
                          ]
                          }
                          }</codeblock></li>
                  <li>Numeric Range Facet - computes facet on the <codeph>abv</codeph> field with 2 buckets
                      describing <codeph>high</codeph> (greater than 7) and <codeph>low</codeph> (less than 7).
                      <codeblock>curl -X POST -H "Content-Type: application/json" \
                          http://localhost:9110/api/index/bix/query \
                          -d '{
                          "size": 10,
                          "query": {
                          "boost": 1,
                          "query": "water"
                          },
                          "facets": {
                          "abv": {
                          "size": 5,
                          "field": "abv",
                          "numeric_ranges": [
                          {
                          "name": "high",
                          "max": 7
                          },
                          {
                          "name": "low",
                          "min": 7
                          }
                          ]
                          }
                          }
                          }'</codeblock>
                      Results:
                      <codeblock>facets": {
                          "abv": {
                          "field": "abv",
                          "total": 70,
                          "missing": 21,
                          "other": 0,
                          "numeric_ranges": [
                          {
                          "name": "high",
                          "max": 7,
                          "count": 57
                          },
                          {
                          "name": "low",
                          "min": 7,
                          "count": 13
                          }
                          ]
                          }
                          }</codeblock></li>
              </ol>
      </section>
      </body>
</topic>
