<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_l2x_pkx_vx">
  <title>Full Text Search Enhancements</title>
  <body>
    <p>This topic provides information about the new features in FTS introduced in this release.</p>
    <section id="index-type-mapping-by-keys"><title>Index Type Mapping By Keys</title>
      <p>You can now create custom index mappings by document type when the type is specified in the document key. Previously, you could create custom index mappings for different types of objects, but only when the type was indicated by an attribute in the JSON document body. (By default, FTS looks for an attribute named “type”). With this enhancement, it’s easier to support the common data modeling style in which the document type is indicated by a portion of the key, for example, “user::will.gardella”.</p>
      <p>To use this, create a new index. You see three options for type identifier: “JSON type field”, “Doc ID up to separator”, and “Doc ID with regex”. FTS uses the type identifier that you specify to determine where to find the type of each document. The type mapping then uses the value of type identifier for each document to determine which index mapping rules to apply.<ul>
        <li><b>JSON type field</b>: Specify the field in the JSON document whose value determines the type of the document. Defaults to “type”. </li>
        <li><b>DOC ID up to separator</b>: The type identifier is the prefix of the document key, up to but not including the given character.</li>
        <li><b>DOC ID with regex</b>: For advanced users, you can specify a regular expression that matches the type identifier. </li>
      </ul></p>
      <p>In the example below, the DOC ID up to the first underscore is considered the type
        identifier, so airline, airport, flight, hotel, landmark etc could be specified as type
        mappings. <image placement="break" href="images/fts-index-type-mapping.png" width="570"
          id="image_cvp_lmx_vx"/></p>
    </section>
    <section id="fts-sorting"><title>Sorting</title>
      <p>You can now sort search results by any indexed field. In previous releases, search results are always sorted by descending score so that highest scoring results are listed first. This is still the default sort order, so if you don’t specify a sort order, you’re unlikely to notice any difference.</p>
      <p>The argument is an array of strings, where each string refers to the name of a field. <codeph>"sort": ["name"]</codeph></p>
      <p>You can prefix any field name with the ‘-’ character, which causes that field to sorted in descending order. Items will first be sorted by the first field. Any items with the same value for that field, are then also sorted by the next field, and so on. All fields in the sort order MUST be indexed.</p>
      <p>There are two special fields:<ul>
        <li>‘_id’ - refers to the document identifier</li>
        <li>‘_score’ - refers to the relevance score computed by Bleve</li>
      </ul></p>
      <p>Here is a more complex example: <codeblock>"sort": ["country", “state”, "city","-_score"]</codeblock></p>
      <p>Results will first be sorted by country. If documents have the same value for country, they will be sorted by state, and then, if country and state are the same, matches will be sorted by city. Finally, if all other fields are equal, results will be sorted by score descending. </p>
      <p>Here is a full query example that performs a query string query and demonstrates the proper
        place to add the sort
        property.<codeblock>{
  "explain": false,
  "fields": [
    "title"
  ],
  "highlight": {},
  "sort": ["country", "-_score","-_id"],
  "query":{ 
"query": "beautiful pool" 
}
}</codeblock></p>
    </section>
  </body>
</topic>
