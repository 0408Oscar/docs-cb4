<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_eqq_rmd_yv">
  <title>SDK Operations</title><shortdesc>This topic covers the basic CRUD operations of creating, retrieving, updating, and deleting documents. >It also describes how to do bulk operations and atomic operations.</shortdesc>
  <body>
 
    <section id="operationbasics"><title>Operation Basics</title>
    <p>Operations use basic PHP data types.</p>
   <sectiondiv id="datatypes">
      
     <p><b>Data types</b></p>
        <p>Most PHP data types that can be serialized via the JSON functions are supported by
          default. Recursive structures cannot be serialized. All textual data is represented
          by UTF-8 when stored to Couchbase Server. You may alternatively implement your own
          transcoders which modify the method by which your documents are serialized to
          Couchbase. The following is an example of a transcoder which will transcode all
          documents as UTF-8 encoded JSON documents.</p>
        <codeblock outputclass="language-php">$bucket->setTranscoder(function($value) {
          return array(json_encode($value), 0, 0);
          }, function($value, $flags, $datatype) {
          return json_decode($value, true);
          });</codeblock>
   </sectiondiv>
      </section>
    
    <section id="creatingdocuments"><title>Creating Documents</title>
     
    <p> You can create a document by using  the <codeph>insert()</codeph> or <codeph>upsert()</codeph>
      methods.</p>
     
        <p>Performing an insert  succeeds only if no document with that name exists. In
          contrast, an upsert overwrites any existing matching document.</p>
        <p>The following example shows how to create a new document with the <codeph>insert()</codeph>
          method:</p>
        <codeblock outputclass="language-php">$myBucket = $myCluster->openBucket();
          $res = $myBucket->insert('document_name', array('some'=>'value'));
          var_dump($res);</codeblock>
        
        <p>Sample output from the example:</p>
        <codeblock>object(CouchbaseMetaDoc)#4 (4) {
          ["cas"]=>
          resource(5) of type (CAS)
          }</codeblock>
      
      
      
    </section>    
    
   
    <section><title>Retrieving Documents</title>
   
   <p>You can retrieve documents by using regular reads or replica reads.</p>
     
        
   <sectiondiv id="regularreads">
          <p><b>Regular reads</b></p>
          
          <p>You will perform regular reads by using the <codeph>get()</codeph> method. Regular reads enable you
            to retrieve a previously stored document from your active data set. </p>
          <p>The following example shows a regular read:</p>
          <codeblock outputclass="language-php">$myBucket = $myCluster->openBucket();
            $res = $myBucket->get(‘document_name’);
            var_dump($res);</codeblock>
          
          <p>Sample output from the example:</p>
          <codeblock>object(CouchbaseMetaDoc)#4 (4) {
            ["value"]=>
            array(1) {
            ["name"]=>
            string(5) "Frank"
            }
            ["flags"]=>
            int(4)
            ["cas"]=>
            resource(5) of type (CAS)
            }</codeblock>
   </sectiondiv> 
        
 <sectiondiv id="replicareads">
          <p><b>Replica reads</b></p>
          <p>You perform replica reads by using the <codeph>getReplica()</codeph> method. Replica reads
            enable you to retrieve a previously stored document by querying the replica copies of
            this document rather than the active one. This is not guaranteed to be consistent, but
            does permit a level of recovery in case the primary server is not reachable.</p>
 </sectiondiv>
      
    </section>    
    
    <section><title>Updating Documents</title>
    
   <p> You can update a document by using the <codeph>upsert()</codeph> or
     <codeph>replace()</codeph> methods.</p> 
    
        <p>The <codeph>replace()</codeph> method replaces a document that already exists with new
          contents. The <codeph>upsert()</codeph> method creates the document if it does not already
          exist. </p>
        <p>The following example shows how to update a document by using the
          <codeph>replace()</codeph> method:</p>
        <p>
          <codeblock outputclass="language-php">$myBucket = $myCluster->openBucket();
            $res = $myBucket->replace('document_name', array('some'=>'value'));
            var_dump($res);</codeblock>
        </p>
        
        <p>Sample output from the example:</p>
        <codeblock>object(CouchbaseMetaDoc)#4 (4) {
          ["cas"]=>
          resource(5) of type (CAS)
          }</codeblock>
      
      
    </section>    
    
    <section><title>Deleting Documents</title>
    
 <p>You can delete documents by using the <codeph>remove()</codeph> method.</p> 
   
        <p>This method immediately removes the document from your bucket. </p>
        <p>The following example shows how to delete a
          document:<codeblock outputclass="language-php">$myBucket = $myCluster->openBucket();
            $res = $myBucket->remove('document_name');
            var_dump($res);</codeblock></p>
        
        <p>Sample output from the example:</p>
        <codeblock>object(CouchbaseMetaDoc)#4 (4) {
          ["cas"]=>
          resource(5) of type (CAS)
          }</codeblock>
      
      
      
    </section>    
    
    <section><title>Bulk Operations</title>
   
    <p>You can perform bulk retrieval operations by using the multi key variant of the `get`
      method.</p> 
    
        <p>This method works identically to its singular counterpart but instead accepts an array of keys
          to retrieve and returns an object where the object key matches your document ID and the object
          value is the result that you would normally expect to see from a singular operation.</p>
        
        <p>Here's an example that shows how to use the <codeph>getMulti()</codeph> method:</p>
        <codeblock outputclass="language-php">$myBucket = $myCluster->openBucket();
          $res = $myBucket->get(array('document_name_1', 'document_name_2'));
          var_dump($res);</codeblock>
        
        <p>Sample output from the example:</p>
        <codeblock>array(2) {
          ["document_name_1"]=>
          object(CouchbaseMetaDoc)#4 (4) {
          ["value"]=>
          array(1) {
          ["name"]=>
          string(5) "Frank"
          }
          ["flags"]=>
          int(4)
          ["cas"]=>
          resource(5) of type (CAS)
          }
          ["document_name_2"]=>
          object(CouchbaseMetaDoc)#4 (4) {
          ["value"]=>
          array(1) {
          ["name"]=>
          string(5) "George"
          }
          ["flags"]=>
          int(4)
          ["cas"]=>
          resource(5) of type (CAS)
          }
          }</codeblock>
        
      
      
    </section>    
    
    <section><title>Atomic Operations</title>
     
    <p>The Node.js Couchbase SDK supports several operations that allow one-step, atomic
      changes to documents. These operations include counter, prepend, and append
      functions.</p>
 
        
       <sectiondiv id="counteroperation">
       <p><b>Counter operation</b></p>
          <p>The <codeph>counter()</codeph> method enables you to implement an atomic counter as a
            Couchbase document. These operations expect UTF-8 encoded string representations of
            the number. You can either execute this operation against a previously created
            document, or create a new document by using the <codeph>initial</codeph> property
            passed as an option.  More information about the initial property is available
            below.</p>
          <p>The following example shows how to use the <codeph>counter()</codeph> method to increment your
            counter and get the value back:</p>
          <p>
            <codeblock outputclass="language-php">$myBucket = $myCluster->openBucket();
              $myBucket->insert('document_name', 10);
              $res = $myBucket->counter('document_name', 1);
              var_dump($res);</codeblock>
          </p>		
          <p>Sample output from the example:</p>
          <codeblock>object(CouchbaseMetaDoc)#4 (4) {
            ["value"]=>
            int(11)
            ["flags"]=>
            int(0)
            ["cas"]=>
            resource(5) of type (CAS)
            }</codeblock>
          <p>The following example shows how to use the <codeph>counter()</codeph> method to decrement your
            counter and get the value back:</p>
          <p>
            <codeblock outputclass="language-php">$myBucket = $myCluster->openBucket();
              $myBucket->set('document_name', 10);
              $res = $myBucket->counter('document_name', -1);
              var_dump($res);</codeblock>
          </p>		
          <p>Sample output from the example:</p>
          <codeblock outputclass="">object(CouchbaseMetaDoc)#4 (4) {
            ["value"]=>
            int(9)
            ["flags"]=>
            int(0)
            ["cas"]=>
            resource(5) of type (CAS)
            }</codeblock>
          <p>You can additionally perform a counter operation with an initial value specified. In this
            case, the document will be created if it does not exist. The <codeph>initial</codeph>
            property will do nothing if the document already
            exists.<codeblock outputclass="language-php">$myBucket = $myCluster->openBucket();
              $res = $myBucket->counter('document_name', 1, array('initial'=>10));</codeblock></p>
          <p>Sample output from the example:</p>
          <codeblock>object(CouchbaseMetaDoc)#4 (4) {
            ["value"]=>
            int(10)
            ["flags"]=>
            int(0)
            ["cas"]=>
            resource(5) of type (CAS)
            }</codeblock>
          <note>If a new counter document is created by using the <codeph>initial</codeph>
            property, the counter is set to the value of <codeph>initial</codeph>, not
            <codeph>initial+offset</codeph>. </note>
       </sectiondiv> 
        
        
     <sectiondiv id="appendandprepend">
     <p><b>Append and prepend operations</b></p>
          <p>The append and prepend operations allow you to perform a binary append or prepend to
            a Couchbase document.</p>
          
          <note> This operation is performed without any consideration
            for data type, thus appending a JSON document to a JSON document will result in
            an invalid object (for instance: <codeph>{}{}</codeph>).</note>
          
          <p>The following is an example of how to use the append() method to add further text to
            an already existing
            document:</p><codeblock outputclass="language-php">$myBucket = $myCluster->openBucket();
              // Insert a starting document
              $myBucket->insert('document_name', 'Beautiful');
              // Append some content to it
              $myBucket->append('document_name', 'World!');
              // Prepend some more text
              $myBucket->prepend('document_name', 'Hello ');
              // Retrieve its updated contents
              $res = $myBucket->get('document_name');
              var_dump($res);</codeblock>
          <p>Sample output from the example:</p>
          <codeblock>object(CouchbaseMetaDoc)#4 (4) {
            ["value"]=>
            string("Hello Beautiful World!")
            ["flags"]=>
            int(0)
            ["cas"]=>
            resource(5) of type (CAS)
            }</codeblock>
        
     </sectiondiv>   
      
    </section>    
  </body>
</topic>