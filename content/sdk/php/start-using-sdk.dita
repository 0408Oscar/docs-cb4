<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_qkc_cnm_qv">
    <title>Install and Start Using the PHP SDK with Couchbase Server</title>
    <titlealts><navtitle>Start Using the SDK</navtitle></titlealts>
    <shortdesc>The Couchbase PHP SDK allows you to connect to a Couchbase cluster from PHP. The
        Couchbase PHP SDK is a native PHP extension and uses the Couchbase high-performance C
        library to handle communicating to the cluster over Couchbase binary protocols. The
        Couchbase PHP SDK is compatible with both PHP 5.6 and 7.0.</shortdesc>
    <body>
        <section><title>Installing on Linux</title>For installation on Linux, install the
                <i>couchbase-release</i> repository, and then install the <i>libcouchbase</i>
            packages. The following examples download and install <i>couchbase-release</i>
            repsitory, a C and C++ compiler, the C SDK development files (<i>libcouchbase-devel</i>
            [RPM] or <i>libcouchbase-dev</i> [DEB]), PHP development files, and finally the PHP SDK
            using
            <i>pecl</i>.<codeblock spectitle="Debian and Ubuntu" outputclass="language-bash"># Only needed during first-time setup:
wget http://packages.couchbase.com/releases/couchbase-release/couchbase-release-1.0-2-amd64.deb
sudo dpkg -i couchbase-release-1.0-2-amd64.deb
# Will install or upgrade packages
sudo apt-get update
sudo apt-get install libcouchbase-dev build-essential php-dev zlib1g-dev
sudo pecl install pcs-1.3.3 # since couchbase-2.2.4
sudo pecl install couchbase</codeblock><codeblock spectitle="RHEL and CentOS" outputclass="language-bash"># Only needed during first-time setup:
wget http://packages.couchbase.com/releases/couchbase-release/couchbase-release-1.0-2-x86_64.rpm
sudo rpm -iv couchbase-release-1.0-2-x86_64.rpm
# Will install or upgrade existing packages
sudo yum install libcouchbase-devel gcc gcc-c++ php-devel zlib-devel
sudo pecl install pcs-1.3.3 # since couchbase-2.2.4
sudo pecl install couchbase</codeblock></section>
        <section><title>Installation on Mac OS X</title><p>To install the library on Mac OS X, first install the de-facto package manager for OS X: <xref
                    href="http://brew.sh/" format="html" scope="external">homebrew</xref>. Once
                    <i>homebrew</i> is
                configured:<codeblock outputclass="language-bash">brew update # get list of latest packages
brew install libcouchbase
# brew install homebrew/php/php{XY}-couchbase, where XY is your version of PHP
brew install homebrew/php/php70-couchbase # for PHP 7.0</codeblock></p>If
            you have PECL installed, you may use <codeph>pecl install couchbase</codeph> to install
            the Couchbase PHP SDK.</section>
        <section><title>Installing on Microsoft Windows</title><p>When using Microsoft Windows,
            download one of the pre-built binaries at
            <xref href="http://developer.couchbase.com/server/other-products/release-notes-archives/php-sdk" format="html" scope="external">Archives</xref>,
            matching your environment or at <xref href="http://pecl.php.net/package/couchbase" format="html" scope="external">PECL</xref>.
            You also have the option of downloading the <xref href="https://github.com/couchbaselabs/php-couchbase"
                format="html" scope="external">source</xref> for the SDK and building it
            directly. </p></section>
        <section><title>Post Installation - Setting up the php.ini</title><p>Once the PHP SDK has been installed, you need to specify
            that the PHP interpreter should load the Couchbase SDK as an extension. To do
            this:<ol id="ol_rr1_cpz_zv">
                <li>Locate the location of your php.ini file. This can be done by <codeph>php
                    --ini</codeph><codeblock outputclass="language-bash">$ php --ini
Configuration File (php.ini) Path: /usr/local/etc/php/7.0
Loaded Configuration File:         /usr/local/etc/php/7.0/php.ini
Scan for additional .ini files in: /usr/local/etc/php/7.0/conf.d
Additional .ini files parsed:      (none)</codeblock></li>
                <li>Insert the following line in the <codeph>php.ini</codeph> file; this should be
                        in the <codeph>[PHP]</codeph> section. If you don't know where that is,
                        simply search for existing commented or uncommented
                            <codeph>extension=</codeph> entries in the
                        file.<codeblock spectitle="Linux and Mac OS">extension=couchbase.so</codeblock><codeblock spectitle="Windows">extension=couchbase.dll</codeblock>
                        The Couchbase SDK (as of 2.2.4) depends on
                        both the JSON and <xref
                        href="https://pecl.php.net/package/pcs"
                        format="html" scope="external">PCS (PHP Code
                        Service) extensions</xref>.  Releases from 2.0.0 through
                        2.2.3 depend only on the JSON extension. Make sure that the load order is correct. For example, if your distribution has just a single
                            <codeph>php.ini</codeph> file, just insert the line after
                            <codeph>extension=json.so</codeph>. If your distribution uses a
                            <codeph>conf.d</codeph>-style, name the file with the Couchbase SDK ini
                        so that it will be alphabetically ordered after the JSON extension. <note
                            type="important">Because the extension depends on the C library
                            (libcouchbase), the shared object <codeph>libcouchbase.so</codeph> or
                                <codeph>libcouchbase.dll</codeph> has to be accessible by the PHP
                            process when loading the extension. On UNIX-like systems no additional
                            steps are necessary, because the libcouchbase package installs shared
                            objects into a common system location. For Windows though, it must be
                            copied into either into a location from the <codeph>PATH</codeph> for
                            the PHP executable or into a directory with like executables (like
                            apache2, IIS or php.exe). This is controlled by your PHP distribution's
                            setup, so see its documentation for further information.</note></li>
            </ol></p></section>
        <p>Information on
            new features, fixes, known issues as well as information on how to install
            older release versions is <xref
                href="/server/other-products/release-notes-archives/php-sdk"
                format="html" scope="peer">in the release notes</xref>.
        </p>
        <section>
            <title>Hello Couchbase</title>
            <p>The Hello Couchbase example consists of one PHP file,
                <filepath>hello-couchbase.php</filepath>. The code opens a connection to
                Couchbase Server, retrieves a document, modifies the document, and stores the
                updated document in the database. The
                <filepath>hello-couchbase.php</filepath> code is below. Note that to connect to a
                Couchbase bucket, you must use Couchbase <i>Role-Based Access Control</i> (RBAC).
                This is fully described in the section
                <xref href="../../security/security-authorization.dita" scope="local" format="dita">Authorization</xref>.
                A username and password for the current user must be specified. 
                Following successful authentication, the bucket is opened. 
            </p>
            
            <codeblock outputclass="language-php" spectitle="hello-couchbase.php"><![CDATA[<?php
$bucketName = "bucket-name";

// Establish username and password for bucket-access
$authenticator = new \Couchbase\PasswordAuthenticator();
$authenticator->username('username')->password('password');

// Connect to Couchbase Server
$cluster = new CouchbaseCluster("couchbase://127.0.0.1");

// Authenticate, then open bucket
$cluster->authenticate($authenticator);
$bucket = $cluster->openBucket($bucketName);

// Store a document
echo "Storing u:king_arthur\n";
$result = $bucket->upsert('u:king_arthur', array(
    "email" => "kingarthur@couchbase.com",
    "interests" => array("African Swallows")
));

var_dump($result);

// Retrieve a document
echo "Getting back u:king_arthur\n";
$result = $bucket->get("u:king_arthur");
var_dump($result->value);

// Replace a document
echo "Replacing u:king_arthur\n";
$doc = $result->value;
array_push($doc->interests, 'PHP 7');
$bucket->replace("u:king_arthur", $doc);
var_dump($result);

echo "Creating primary index\n";
// Before issuing a N1QL Query, ensure that there is
// is actually a primary index.
try {
    // Do not override default name, fail if it is exists already, and wait for completion
    $bucket->manager()->createN1qlPrimaryIndex('', false, false);
    echo "Primary index has been created\n";
} catch (CouchbaseException $e) {
    printf("Couldn't create index. Maybe it already exists? (code: %d)\n", $e->getCode());
}

// Query with parameters
$query = CouchbaseN1qlQuery::fromString("SELECT * FROM `$bucketName` WHERE \$p IN interests");
$query->namedParams(array("p" => "African Swallows"));
echo "Parameterized query:\n";
var_dump($query);
$rows = $bucket->query($query);
echo "Results:\n";
var_dump($rows);]]></codeblock>
            <p>The console output should look similar to this:</p>
            <screen><![CDATA[Storing u:king_arthur
object(CouchbaseMetaDoc)#4 (5) {
  ["error"]=>
  NULL
  ["value"]=>
  NULL
  ["flags"]=>
  NULL
  ["cas"]=>
  string(10) "eldhjkkzcw"
  ["token"]=>
  NULL
}
Getting back u:king_arthur
object(stdClass)#5 (2) {
  ["email"]=>
  string(24) "kingarthur@couchbase.com"
  ["interests"]=>
  array(1) {
    [0]=>
    string(16) "African Swallows"
  }
}
Replacing u:king_arthur
object(CouchbaseMetaDoc)#6 (5) {
  ["error"]=>
  NULL
  ["value"]=>
  object(stdClass)#5 (2) {
    ["email"]=>
    string(24) "kingarthur@couchbase.com"
    ["interests"]=>
    array(2) {
      [0]=>
      string(16) "African Swallows"
      [1]=>
      string(5) "PHP 7"
    }
  }
  ["flags"]=>
  int(33554438)
  ["cas"]=>
  string(10) "eldhjkkzcw"
  ["token"]=>
  NULL
}
Creating primary index
Primary index has been created
Parameterized query:
object(CouchbaseN1qlQuery)#8 (2) {
  ["options"]=>
  array(2) {
    ["statement"]=>
    string(45) "SELECT * FROM `bucket-name` WHERE $p IN interests"
    ["$p"]=>
    string(16) "African Swallows"
  }
  ["adhoc"]=>
  bool(true)
}
Results:
object(stdClass)#11 (3) {
  ["rows"]=>
  array(1) {
    [0]=>
    object(stdClass)#10 (1) {
      ["bucket-name"]=>
      object(stdClass)#9 (2) {
        ["email"]=>
        string(24) "kingarthur@couchbase.com"
        ["interests"]=>
        array(2) {
          [0]=>
          string(16) "African Swallows"
          [1]=>
          string(5) "PHP 7"
        }
      }
    }
  }
  ["status"]=>
  string(7) "success"
  ["metrics"]=>
  array(4) {
    ["elapsedTime"]=>
    string(11) "11.623318ms"
    ["executionTime"]=>
    string(11) "11.605128ms"
    ["resultCount"]=>
    int(1)
    ["resultSize"]=>
    int(220)
  }
}]]></screen>
        </section>
    
    
        <section>
            <title>
                Managing Users
            </title>
            
            <p>
                Couchbase Server 5.0 Enterprise Edition introduces <i>Role-Based
                    Access Control</i> (RBAC) for applications. This ensures that <i>resources</i>
                on a Couchbase cluster can only be accessed by a specified <i>user</i>, recognized
                by the cluster through either a <i>local</i> or an <i>external</i> definition.
                The SDK now lets you create <i>users</i>, assign them <i>roles</i> and 
                associated <i>privileges</i>, and remove them from the system. Note that you
                require full administrative privileges for these activities: these privileges are granted
                by default to the administrator who sets up the cluster; and may subsequently be assigned
                to other administrators, by means of the <b>Admin</b> role.
            </p>
            
            <p>
                An overview of SDK APIs provided in support of user-management can be found in
                <xref href="../sdk-user-management.dita" scope="local" format="dita">SDK User-Management</xref>.
                For detailed information on RBAC, see
                <xref href="../../security/security-authorization.dita" scope="local" format="dita">Authorization</xref>.
            </p>
            
            <p>
                The following code-example demonstrates how the user-management APIs can be used. It assumes that Couchbase Server is
                established on <codeph>localhost</codeph>; that the Full Administrator username and
                password are <codeph>Administrator</codeph> and <codeph>password</codeph> respectively;
                and that the <codeph>travel-sample</codeph> bucket is 
                installed. For information on installing the <codeph>travel-sample</codeph> bucket, see
                <xref href="../../settings/install-sample-buckets.dita" scope="local" format="dita">Install Sample Buckets</xref>.
            </p>
            
            <codeblock outputclass="language-php"><![CDATA[<?php

// Access the cluster that is running on the local host, authenticating with
// the username and password of the Full Administrator. This
// provides all privileges.

$cluster = new \Couchbase\Cluster('couchbase://localhost');

// Make sure that 'default' bucket exists.
echo("Authenticating as administrator.\n");
$cluster->authenticateAs("Administrator", "password");

// Create a user and assign roles.
echo("Upserting new user.\n");
$userSettings = new \Couchbase\UserSettings();
$userSettings
    ->password('cbtestuserpwd')
    // Roles required for the reading of data from the bucket.
    ->role('data_reader', 'travel-sample')
    ->role('query_select', 'travel-sample')
    // Roles required for the writing data into the bucket.
    ->role('data_writer', 'travel-sample')
    ->role('query_insert', 'travel-sample')
    ->role('query_delete', 'travel-sample')
    // Role required for the creation of indexes on the bucket.
    ->role('query_manage_index', 'travel-sample');
$cluster->manager()->upsertUser('cbtestuser', $userSettings);

// List current users.
echo("Listing current users.\n");
$listOfUsers = $cluster->manager()->listUsers();
for ($j = 0; $j < count($listOfUsers); $j++) {
    $currentUser = $listOfUsers[$j];

    echo("\n\nUSER #" . $j .":\n\n");

    if (array_key_exists('name', $currentUser)) {
        echo("User's name is: " . $currentUser['name'] . "\n");
    }
    echo("User's id is: " . $currentUser['id'] . "\n");
    echo("User's domain is: " . $currentUser['domain'] . "\n");

    $currentRoles = $currentUser['roles'];

    for ($i = 0; $i < count($currentRoles); $i++) {
        echo("User has the role: " . $currentRoles[$i]['role'] . ", applicable to bucket " .
             $currentRoles[$i]['bucket_name'] . "\n");
    }
}

// Access the cluster that is running on the local host, specifying
// the username and password already assigned by the administrator
echo("Authenticating as user.\n");
$cluster->authenticateAs("cbtestuser", "cbtestuserpwd");

// Open a known, existing bucket (created by the administrator).
echo("Opening travel-sample bucket as user.\n");
$travelSample = $cluster->openBucket("travel-sample");

// Create a N1QL Primary Index (but ignore if one already exists).
$travelSample->manager()->createN1qlPrimaryIndex('', true, false);

// Read out a known, existing document within the bucket (created
// by the administrator).
echo("Reading out airline_10 document\n");
$returnedAirline10doc = $travelSample->get("airline_10");
echo("Found: \n");
print_r($returnedAirline10doc);

// Create a new document.
echo("Creating new document as user.\n");
$airline11Object = [
    "callsign" => "MILE-AIR",
    "iata" => "Q5",
    "icao" => "MLA",
    "id" => 11,
    "name" => "40-Mile Air",
    "type" => "airline"
];

// Upsert the document to the bucket.
echo("Upserting new document as user.\n");
$travelSample->upsert("airline_11", $airline11Object);

echo("Reading out airline11Document as user.\n");
$returnedAirline11Doc = $travelSample->get("airline_11");
echo("Found: \n");
print_r($returnedAirline11Doc);

// Perform a N1QL Query.
echo("Performing query as user.\n");

$result = $travelSample->query(
    \Couchbase\N1qlQuery::fromString("SELECT * FROM `travel-sample` LIMIT 5")
);

echo("Query-results are:\n");
// Print each row returned by the query.
foreach ($result->rows as $row) {
    print_r($row);
}

// Access the cluster that is running on the local host, authenticating with
// the username and password of the Full Administrator. This
// provides all privileges.
echo("Re-authenticating as administrator.\n");
$cluster->authenticateAs("Administrator", "password");

// Remove known user.
echo("Removing user as administrator.\n");
$userToBeRemoved = "cbtestuser";
try {
    $cluster->manager()->removeUser($userToBeRemoved);
    echo("Deleted user " . $userToBeRemoved . ".\n");
} catch (\Couchbase\Exception $ex) {
    echo("Could not delete user " . $userToBeRemoved . ".\n");
}]]></codeblock>
            
            
        </section>
        
        <section>
            <title>
            API Reference
            </title>
            
            <p>
                The API reference is generated for each version. The API reference for version
                <keyword keyref="php-current-version"/> is at <xref keyref="php-api-link"/>
            </p>
            
        </section>
    </body>
</topic>
