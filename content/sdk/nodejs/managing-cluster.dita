<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_jk4_mhq_44">
    <title>Managing Clusters</title>
    <shortdesc>You can manage Couchbase clusters by using the <codeph>ClusterManager</codeph> and
      <codeph>BucketManager</codeph> interfaces that are available through the
      <apiname>manager()</apiname> methods exposed in <codeph>Bucket</codeph> and
      <codeph>Cluster</codeph> instances.</shortdesc>
    <conbody>
        
    <section><title>Cluster Management</title>
    <p>TBA</p>  
      
      
    </section>
      <section><title>Bucket Management</title>
        <p>Creating buckets and destorying buckets is performed, for example,  when running unit
        tests.</p>
      <p>To manage buckets, use the design documents. </p>
        <sectiondiv><b>Creating a Design Document</b>
      <p>To create a view, you can use the
          <codeph>manager()</codeph> method of your bucket instance to retrieve a
          <codeph>BucketManager</codeph> instance. After you have a <codeph>BucketManager</codeph>
        instance, invoke the <codeph>upsertDesignDocument</codeph> method to store the design
        document for later
      querying.</p><codeblock outputclass="language-javascript">var bucket = cluster.openBucket();
var bucketMgr = bucket.manager();

var ddocdata = {
  views: {
    by_name: {
      map: [ 'function(doc, meta) {',
             '  if (doc.type &amp;&amp; doc.type == "beer") {',
             '    emit(doc.name, null);',
             '  }',
             '}'
           ].join('\n')
    },
  }
};
bucketMgr.upsertDesignDocument('ddocname', ddocdata, function(err) {
  console.log('Insertion of design document completed with error:', err);
});</codeblock>Alternatively,
      you can just pass a JavaScript function into the design document manipulation methods and they
      will automatically be serialized to JavaScript. For instance, the following code snippets are
      functionally
      equivalent:<codeblock>// Using a string
var ddocdata = {
  views: {
    by_name: {
      map: [ 'function(doc, meta) {',
             '  if (doc.type &amp;&amp; doc.type == "beer") {',
             '    emit(doc.name, null);',
             '  }',
             '}'
           ].join('\n')
    },
  }
};

// Using a function
var ddocdata = {
  views: {
    by_name: {
      map: function(doc, meta) {
             if (doc.type &amp;&amp; doc.type == "beer") {
               emit(doc.name, null);
             }
           }
    },
  }
};</codeblock></sectiondiv>
      
    <sectiondiv><b>Deleting a Design Document</b>
            <p>To delete a design document, pass the name of the design document to delete to the
                <codeph>removeDesignDocument</codeph>
                method.<codeblock>var bucket = cluster.openBucket();
var bucketMgr = bucket.manager();

bucketMgr.removeDesignDocument('ddocname', function(err) {
  console.log('Insertion of design document completed with error:', err);
});</codeblock></p></sectiondiv>
        
<sectiondiv><b>Removing a Single View</b>
            <p>Removing a single view involves retrieving the full design document, removing the specific
                view and then replacing the existing design document with the version without your
                targeted view. Here is an
                example:<codeblock>var bucket = cluster.openBucket();
var bucketMgr = bucket.manager();

function deleteView(ddocname, viewname, callback) {
  bucketMgr.getDesignDocument(ddocname, function(err, ddoc, meta) {
    if (err) {
      return callback(err);
    }

    delete ddoc.views[viewname];

    bucketMgr.upsertDesignDocument(ddocname, ddoc, function(err) {
      if (err) {
        return callback(err);
      }

      callback(null);
    });
  });
}

deleteView('ddoc', 'view', function(err) {
  console.log('Deletion completed with error:', err);
});</codeblock></p></sectiondiv>
        </section>
    </conbody>
</concept>
