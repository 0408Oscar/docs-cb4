<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_snv_gnd_3v">
  <title>Multiprocessing and Threads</title>
  <body>
        <p>The C SDK does not create any threads or perform any internal locking. The library
            assumes a single threaded event loop (or reactive) model.</p>
        <section>
            <title>Using a handle in a Single Thread</title>
            <p>You may use a single handle (<apiname>lcb_t</apiname> object) within a single thread
                without any additional code or settings. All <apiname>lcb_t</apiname> objects are
                independent, and multiple <apiname>lcb_t</apiname> objects can exist in multiple
                threads.</p>
            <p>The bundled <codeph>cbc-pillowfight</codeph> uses multiple threads, creating a single
                    <apiname>lcb_t</apiname> per thread.</p>
            <p>You should use a single handle per thread (and per-bucket) if your application makes
                heavy use of Couchbase and you wish to parallelize over several concurrent TCP
                connections.</p>
        </section>
        <section><title>Using a Handle from Different Threads</title>It is possible to use a single
            handle from multiple threads, however the handle may not be accessed by multiple threads
            at the same time. This means that you must ensure that any C SDK call with the same
                <apiname>lcb_t</apiname> is guarded by a lock (or similar mechanism) ensuring that
            other threads do not also attempt to access the handle at the same time. This means, for
            example, that additional operations cannot be added (e.g. <apiname>lcb_store3</apiname>)
            while the library is waiting for responses to arrive
            (<apiname>lcb_wait</apiname>).<codeblock>pthread_mutex_lock(lock);
lcb_wait(instance);
pthread_mutex_unlock(lock);</codeblock>You
            should create a single library handle (per bucket) if your application does not make
            heavy use of Couchbase. If you find that your application's threads are often blocked on
                <apiname>lcb_wait</apiname> calls, then consider using a single handle per
            thread.</section>
        <section><title>Using with <apiname>fork()</apiname></title><p>If your process forks, beware
                that <apiname>lcb_t</apiname> instances are <i>not</i> usable from both child and
                parent and processes. Each library instance will still maintain the parent's open
                sockets and file descriptors. In the event that both instances are used
                concurrently, the TCP stream will end up sending data from both instances, causing
                strange behavior and often crashes.</p><p>In order to ensure that parent and child
                processes work with the C SDK:<ul id="ul_xt5_bpd_3v">
                    <li>If possible, ensure that any <apiname>fork()</apiname> is called
                            <i>before</i> any invocation to <apiname>lcb_create</apiname></li>
                    <li>If you wish to use the <apiname>lcb_t</apiname> in the child process, then
                        you may not use the parent instance. This also means that you will not be
                        able to call <apiname>lcb_destroy</apiname>, effectively leaking memory for
                        the given <apiname>lcb_t</apiname></li>
                    <li>If you wish to use the <apiname>lcb_t</apiname> in the parent process then
                        you may not use the child instance. As above, this also means that you will
                        not be able to call <apiname>lcb_destroy</apiname> in the child, effectively
                        leaking memory.</li>
                </ul></p>Often, it may <i>seem</i> like <apiname>lcb_destroy</apiname> can properly
            reclaim the memory by the unused handle, but it is possible for
                <apiname>lcb_destroy</apiname> and some I/O implementations to flush any pending I/O
            operations before cleanup.</section>
    </body>
</topic>
