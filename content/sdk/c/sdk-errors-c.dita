<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_vqw_djq_44">
	<title>SDK Errors</title>
	<shortdesc>Most functions in the C SDK return an error code of type <apiname>lcb_error_t</apiname>.
        As an application developer, you should be prepared to handle non-successful error codes and
        treat them appropriately. If the library is not behaving as expected then your first action
        should be to determine if your application is properly handling (and checking) any error
        codes returned by the library. Remember that error codes are only significant when there is
        an error condition!</shortdesc>
<conbody>
        <section><title>SDK Error types</title>A successful operation is defined by the return code
            of <codeph>LCB_SUCCESS</codeph>, while any other code indicates an error condition. You
            can find a full list of error codes in the
                <filepath>&lt;libcouchbase/error.h></filepath> header.<note>New applications are
                advised to enable extended error codes by using the
                    <codeph>LCB_CNTL_DETAILED_ERRCODES</codeph> setting (see <xref
                    href="tuning.dita#concept_wtt_2jq_44"/>). Extended error codes are not enabled
                by default to avoid sending older applications error codes that they cannot handle.
                    </note><p><i>Data errors</i> (link) include <apiname>LCB_KEY_ENOENT</apiname>
                (item not found), <apiname>LCB_KEY_EEXISTS</apiname> (item already exists, or a
                mismatched CAS). You can check if a given error code is a data error by using the
                    <apiname>LCB_EIFDATA</apiname>
                    macro:</p><codeblock>LCB_EIFDATA(LCB_KEY_ENOENT); // true
LCB_EIFDATA(LCB_EINVAL); // false</codeblock><p><i>Transient
                    errors</i> (link) include <apiname>LCB_ETMPFAIL</apiname> and
                    <apiname>LCB_ETIMEDOUT</apiname>. You can check if an error code is transient or
                not by using the <apiname>LCB_EIFTMP</apiname> macro.</p><p><i>Network errors</i>
                (link) include <apiname>LCB_NETWORK_ERROR</apiname>,
                    <apiname>LCB_ECONNREFUSED</apiname>, <apiname>LCB_ESOCKSHUTDOWN</apiname>, and
                so on. You can check if an error is a network error by using the
                    <apiname>LCB_EIFNET</apiname> macro. Use of the <apiname>LCB_EIFNET</apiname>
                macro is recommended over checking specific error codes because network errors may
                be varied across different operations system and event loop
                implementations.</p><p>The <codeph>LCB_EIF_${TYPE}</codeph> macros, where
                    <codeph>${TYPE}</codeph> represents one of the <codeph>lcb_errflags_t</codeph>
                flags, can be used to check whether an error is of a specific type. The following
                example shows how to check the return codes:
                <codeblock outputclass="language-c">static void get_callback(lcb_t instance,
  const void *cookie, lcb_error_t err, const lcb_get_resp_t *resp)
{
  if (err == LCB_SUCCESS) {
    printf("Successfuly retrieved key!\n");
  } else if (LCB_EIFDATA(err)) {
    switch (err) {
    case LCB_KEY_ENOENT:
      printf("Key not found!\n");
      break;
    default:
      printf("Received other unhandled data error\n");
      break;
    }
  } else if (LCB_EIFTMP(err)) {
    printf("Transient error received. May retry\n");
  }
}</codeblock></p></section>
        <section>
            <title>When to check for errors, and what they mean</title>
            <p>Success and failure depend on the context. A successful return code for one of the
                data operation APIs (for example, <apiname>lcb_store3()</apiname>) does not mean the
                operation itself succeeded and the key was successfully stored. Rather, it means the
                key was successfully placed inside the libraryâ€™s internal queue. The actual error
                code is delivered as the <apiname>lcb_RESPBASE::rc</apiname> parameter in the
                operation callback itself (that is, the callback installed with
                    <apiname>lcb_install_callback3()</apiname>).</p>
            <p>Non-successful error codes received in callbacks are <i>usually</i> a result of a
                negative server reply or a network connectivity issue.</p>
            <p>If an error was returned from a scheduling function (e.g.
                    <apiname>lcb_get3())</apiname>, it may be the result of a bad input (see
                    <apiname>LCB_EIFINPUT</apiname>). Scheduling functions may also return
                    <apiname>LCB_NOT_SUPPORTED</apiname> or
                    <apiname>LCB_CLIENT_FEATURE_UNAVAILABLE</apiname> which suggest that the server
                or the client do not support the given API.</p>
            <p>If a scheduling API returns anything but <codeph>LCB_SUCCESS</codeph>, the callback
                for that specific request will <i>not</i> be delivered. Conversely, it is guaranteed
                that the callback will always be delivered if the return code for the scheduling
                function is <codeph>LCB_SUCCESS</codeph>.</p>
            <p>You can print a textual representation of the error by using
                    <apiname>lcb_strerror</apiname>. This function is always guaranteed to return a
                valid
                    string<codeblock>lcb_strerror(NULL, LCB_OPTIONS_CONFLICT);</codeblock><note>The
                    first argument to <apiname>lcb_strerror</apiname> is ignored and has never been
                    used.</note></p>
        </section>
        <section>
            <title>Handling unresponsive servers</title>
            <p>If a server is unresponsive action should be taken to determine the cause and either
                fix the server or fail it over, depending on available replicas and the type of
                problem caused. The client SDK cannot determine if a server is unresponsive and by
                default assumes that any network or server failure is extremely temporary in nature
                and will attempt to reconnect as required.</p>
            <p>If a cluster node is unresponsive and the application determines (through a mechanism
                outside Couchbase) that the node may be unresponsive for some time, it is possible
                to avoid sending operations to that node:</p>
            <p>In Couchbase architecture, keys are mapped to [vBuckets], which in turn are mapped to
                cluster nodes. To avoid sending operations to a specific server, you need to
                retrieve the server index for the key and then the hostname corresponding to that
                index. This is done by using the <i>vBucket</i>
                API:<codeblock>bool maybe_skip_host(lcb_t instance,
                     const std::string&amp; key,
                     const std::vector&lt;std::string>&amp; badhosts) {
    lcbvb_CONFIG *vbc;
    lcb_cntl(instance, LCB_CNTL_GET, &amp;vbc);
    int ix, vbtmp;
    lcbvb_map_key(vbc, keybuf, keylen, &amp;vbtmp, &amp;ix);
    if (ix &lt; 0) {
        // Missing node. See next section!
        return false;
    } else {
        std::string hostname = lcbvb_get_hostname(ix);
        for (size_t ii = 0; ii &lt; badhosts.size(); ++ii) {
            if (hostname == badhosts[ii]) {
                return true;
            }
        }
    }
    return false;
}</codeblock></p>
            <title>Program crashes and pitfalls</title>
            <p>If your application abnormally terminates while invoking a function with the library,
                you may have either encountered a bug or passed the library an invalid pointer. Keep
                in mind the following points:<ul id="ul_dyk_2vj_p4">
                    <li>The library is <i>not</i> thread safe. While you may use multiple
                            <i>lcb_t</i> handles in different threads, you must never access the
                        same handle from multiple threads without using external synchronization
                        functions (such as mutexes).</li>
                    <li>The response structures within the callback are valid <i>only</i> in the
                        scope of the callback function itself. This means you must copy the
                        structure (and any contained keys and values) into another location in
                        memory if you wish to use it outside the callback.</li>
                    <li>Callbacks will <i>not</i> be invoked if the scheduling function returns a
                        failure status. This means that the following code will result in accessing
                        uninitialized
                        memory:<codeblock outputclass="language-c">struct myresult {
  char *value;
  lcb_error_t err;
}
static void get_callback(lcb_t instance, int cbtype, const lcb_RESPGET *resp)
{
  struct myresult *mr = (struct myresult *)resp->cookie;
  mr->err = resp->rc;
  if (mr->err == LCB_SUCCESS) {
    mr->value = malloc(resp->nkey + 1);
    memcpy(mr->value, resp->key, resp->nkey);
    mr->value[resp->nkey] = '\0';
  } else {
    mr->value = NULL;
  }
}

// Some lines later
struct myresult mr;
lcb_get3(instance, &amp;mr, &amp;cmd);
lcb_wait(instance);
if (mr.value) {
  // If lcb_get() returned an error, this will be uninitialized access!
  // ...
}</codeblock></li>
                </ul></p>
            <p>A crash can also be a result of a bug in the library. Sometimes the library will call
                abort when it detects an inconsistent state. If you think you have found a bug in
                the library you should file a bug in our <xref
                    href="http://www.couchbase.com/issues/browse/CCBC" format="html"
                    scope="external">issue tracker</xref>. When filing a bug, please be sure to
                include the library version and any relevant code samples.</p>
        </section>
        <section>
            <title>Diagnosing Issues</title>
            <p>Diagnosing issues can typically be done by enabling logging (see <xref
                    href="collecting-information-c.dita#concept_ff3_2jq_44"/>).</p>
        </section>
    </conbody>
</concept>
