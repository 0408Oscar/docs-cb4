<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_vpj_dh5_xv">
  <title>Install and Start Using the Java SDK with Couchbase Server</title>
  <titlealts><navtitle>Start Using the SDK</navtitle></titlealts>
  <shortdesc>The Couchbase Java SDK allows Java applications to access a
    Couchbase cluster. It offers traditional synchronous APIs as well as
    scalable asynchronous APIs to maximize performance.</shortdesc>
    <body>
        <section conref="../shared/install-couchbase.dita#ReusableComponent_fb4_psc_kv/section_gb4_psc_kv"/>

    <section id="java-installing-sdk">
      <title>Installing the SDK</title>


        <note type="important">At least Java 6 is required, all newer Java versions are supported (and encouraged). Especially
          Java 8 is recommended since it brings performance enhancements and lambda expressions which are very
          convenient when used in an asynchronous context.</note>

        <p>All stable releases of the Java SDK are primarily distributed through Maven. As a result
        the dependency can be included easily using your favorite package manager. For Maven itself,
        it typically looks like this:</p>

<codeblock outputclass="language-xml"><![CDATA[<dependencies>
  <dependency>
    <groupId>com.couchbase.client</groupId>
    <artifactId>java-client</artifactId>
    <version>2.4.6</version>
  </dependency>
</dependencies>]]></codeblock>

      <p>The <codeph>java-client</codeph> dependency will pull in two more transitive dependencies. One is called <codeph>com.couchbase.client.core-io</codeph> and is a internal dependency which performs all the underlying tasks like IO and cluster management. The other dependency is <codeph>RxJava</codeph> which is both used internally and exposed as a first-class API to the user in order to perform scalable and performant asynchronous, reactive operations.</p>

			<p>Information on new features, fixes, known issues as well as information on how to install
        older release versions is <xref
          href="/server/other-products/release-notes-archives/java-sdk" format="html" scope="peer"
          >in the release notes</xref>. You will also find other install options there, including a
        zip file which includes all transitive dependencies and Javadocs.</p>
    </section>

    <section id="java-using-sdk">
      <title>Using the SDK</title>

          <p>The code snippet below shows how the Java SDK may be used for some common operations:</p>

<codeblock outputclass="language-java"><![CDATA[import com.couchbase.client.java.*;
import com.couchbase.client.java.document.*;
import com.couchbase.client.java.document.json.*;
import com.couchbase.client.java.query.*;

public class Example {

    public static void main(String... args) throws Exception {
    
        // Initialize the Connection
        Cluster cluster = CouchbaseCluster.create("localhost");
        cluster.authenticate("username", "password");
        Bucket bucket = cluster.openBucket("bucketname");

        // Create a JSON Document
        JsonObject arthur = JsonObject.create()
            .put("name", "Arthur")
            .put("email", "kingarthur@couchbase.com")
            .put("interests", JsonArray.from("Holy Grail", "African Swallows"));

        // Store the Document
        bucket.upsert(JsonDocument.create("u:king_arthur", arthur));

        // Load the Document and print it
        // Prints Content and Metadata of the stored Document
        System.out.println(bucket.get("u:king_arthur"));

        // Create a N1QL Primary Index (but ignore if it exists)
        bucket.bucketManager().createN1qlPrimaryIndex(true, false);

        // Perform a N1QL Query
        N1qlQueryResult result = bucket.query(
            N1qlQuery.parameterized("SELECT name FROM bucketname WHERE $1 IN interests",
            JsonArray.from("African Swallows"))
        );

        // Print each found Row
        for (N1qlQueryRow row : result) {
            // Prints {"name":"Arthur"}
            System.out.println(row);
        }
    }
}]]></codeblock>

    </section>
      
      <section>
        <title>
          Managing Users
        </title>
        
        <p>
          Couchbase Server 5.0 Enterprise Edition introduces <i>Role-Based
          Access Control</i> (RBAC) for applications. This ensures that <i>resources</i>
          on a Couchbase cluster can only be accessed by a specified <i>user</i>, recognized
          by the cluster through either a <i>local</i> or an <i>external</i> definition.
          The SDK now lets you create <i>users</i>, assign them <i>roles</i> and 
          associated <i>privileges</i>, and remove them from the system. Note that you
          require full administrative privileges for these activities: these privileges are granted
          by default to the administrator who sets up the cluster; and may subsequently be assigned
          to other administrators, by means of the <b>Admin</b> role.
        </p>
        
        <p>
          An overview of SDK APIs provided in support of user-management can be found in
          <xref href="../sdk-user-management.dita" scope="local" format="dita">SDK User-Management</xref>.
          For detailed information on RBAC, see
          <xref href="../../security/security-authorization.dita" scope="local" format="dita">Authorization</xref>.
        </p>
        
        <p>
          The following code-example demonstrates how the user-management APIs can be used. It assumes that Couchbase Server is
          established on <codeph>localhost</codeph>; that the Full Administrator username and
          password are <codeph>Administrator</codeph> and <codeph>password</codeph> respectively;
          and that the <codeph>travel-sample</codeph> bucket is 
          installed. For information on installing the <codeph>travel-sample</codeph> bucket, see
          <xref href="../../settings/install-sample-buckets.dita" scope="local" format="dita">Install Sample Buckets</xref>.
        </p>
        
        <codeblock outputclass="language-java">package com.cb.cbusermgmntall;
          
import java.lang.reflect.Array;
import java.util.Arrays;
import java.util.List;

import com.couchbase.client.java.Bucket;
import com.couchbase.client.java.Cluster;
import com.couchbase.client.java.CouchbaseCluster;
import com.couchbase.client.java.cluster.User;
import com.couchbase.client.java.cluster.UserRole;
import com.couchbase.client.java.cluster.UserSettings;
import com.couchbase.client.java.document.JsonDocument;
import com.couchbase.client.java.document.json.JsonArray;
import com.couchbase.client.java.document.json.JsonObject;
import com.couchbase.client.java.query.N1qlQuery;
import com.couchbase.client.java.query.N1qlQueryResult;
import com.couchbase.client.java.query.N1qlQueryRow;

public class main 
{
    public static void main(String [] args)
    {
        // Access the cluster that is running on the local host, authenticating with
        // the username and password of the Full Administrator. This
        // provides all privileges.
        //
        Cluster cluster = CouchbaseCluster.create("localhost");

        System.out.print("Authenticating as administrator." + "\n");
        cluster.authenticate("Administrator", "password");

        // Create a user and assign roles.
        //
        System.out.print("Upserting new user." + "\n");
        cluster.clusterManager().upsertUser("cbtestuser", UserSettings
            .build()
            .password("cbtestuserpwd")
            .roles(Arrays.asList(

                // Roles required for the reading of data from
                // the travel-sample bucket.
                //
                new UserRole("data_reader", "travel-sample"),
                new UserRole("query_select", "travel-sample"),

                // Roles required for the writing of data into
                // the bucket.
                //
                new UserRole("data_writer", "travel-sample"),
                new UserRole("query_insert", "travel-sample"),
                new UserRole("query_delete", "travel-sample"),

                // Role required for the creation of indexes
                // on the bucket.
                //
                new UserRole("query_manage_index", "travel-sample")
        )));

        // List current users.
        //
        System.out.print("Listing current users." + "\n");
        List&lt;User&gt; listOfUsers = cluster.clusterManager().getUsers();
  
        UserRole currentRoles[] = null;
        User currentUser = null;
  
        for (int j = 0; j &lt; listOfUsers.size(); j++)
        {
            currentUser = listOfUsers.get(j);

            System.out.print("\n" + "\n" + "USER #" + j + ": " + "\n" + "\n");

            System.out.println("User's name is: " + currentUser.name() + '\n');
            System.out.println("User's id is: " + currentUser.userId() + '\n');
            System.out.println("User's domain is: " + currentUser.domain() + '\n');

            currentRoles = currentUser.roles();
            int arraySize = Array.getLength(currentRoles);

            for (int i = 0; i &lt; arraySize; i++)
            {
                System.out.println("User has the role: " + currentRoles[i].role() 
                    + ", applicable to bucket " +
                    
                currentRoles[i].bucket() + '\n');
            }
        }

        // Access the cluster that is running on the local host, specifying
        // the username and password already assigned by the administrator.
        //
        System.out.print("Authenticating as user." + "\n");
        cluster.authenticate("cbtestuser", "cbtestuserpwd");

        // Open the travel-sample bucket.
        //
        System.out.print("Opening travel-sample bucket as user." + "\n");
        Bucket travelSample = cluster.openBucket("travel-sample");

        // Create a N1QL Primary Index (but ignore if one already exists).
        //
        travelSample.bucketManager().createN1qlPrimaryIndex(true, false);

        // Read out a known, existing document within the bucket.
        //
        System.out.println("Reading out airline_10 document" + "\n");
        JsonDocument returnedAirline10doc = travelSample.get("airline_10");
        System.out.println("Found: " + returnedAirline10doc);

        // Create a new document.
        //
        System.out.print("Creating new document as user." + "\n");
        JsonObject airline11Object = JsonObject.empty()
            .put("callsign", "MILE-AIR")
            .put("iata", "Q5")
            .put("icao", "MLA")
            .put("id", 11)
            .put("name", "40-Mile Air")
            .put("type", "airline");

        JsonDocument airline11Document = JsonDocument.create("airline_11", airline11Object);

        // Upsert the document to the bucket.
        //
        System.out.print("Upserting new document as user." + "\n");
        travelSample.upsert(airline11Document);

        System.out.println("Reading out airline11Document as user." + "\n");
        JsonDocument returnedAirline11Doc = travelSample.get("airline_11");
        System.out.println("Found: " + returnedAirline11Doc);

        // Perform a N1QL Query.
        //
        System.out.println("Performing query as user.\n");
        String returnedValues = "Query-results are: \n\t";

        N1qlQueryResult result = travelSample.query(
            N1qlQuery.simple("SELECT * FROM `travel-sample` LIMIT 5")
        );

        // Print each row returned by the query.
        //
        for (N1qlQueryRow row : result) 
        {
            returnedValues = returnedValues + row + '\n' + '\n' + '\t';
        }

        System.out.println(returnedValues);

        // Re-authenticate with the username and password of 
        // the Full Administrator.
        //
        System.out.println("Re-authenticating as administrator.\n");
        cluster.authenticate("Administrator", "password");

        // Remove the user previously created.
        //
        System.out.println("Removing user as administrator.\n");
        String userToBeRemoved = "cbtestuser";
        boolean WhetherOrNotUserWasRemoved = cluster.clusterManager().removeUser(userToBeRemoved);

        if (!WhetherOrNotUserWasRemoved)
        {
            System.out.println("Could not delete user " + userToBeRemoved + "." + "\n");
        }
        else
        {
            System.out.println("Deleted user " + userToBeRemoved + "." + "\n");    	
        }  

        // Disconnect from the cluster.
        //
        cluster.disconnect();
    }
}</codeblock>
        
        
      </section>
      
        <section id="java-connect-disconnect">
            <title>
              Connecting &amp; Disconnecting
            </title>

            <p>Most of the operations performed against Couchbase are done against a
              <apiname>Bucket</apiname> instance. A <apiname>Bucket</apiname> reference
              can be obtained through a <apiname>Cluster</apiname> reference which allows
              you to manage more buckets at the same time and reuse the underlying IO
              and computation resources efficiently.</p>

            <p>To obtain a <apiname>Cluster</apiname> the <apiname>CouchbaseCluster#create</apiname>
            method needs to be called. If no arguments are provided it will connect to a cluster
            listening on <codeph>localhost</codeph>. Note that not all nodes of the cluster need to
            be passed it, just a few to allow it to bootstrap itself are enough. We recommend more
            than one though since if one of the nodes happens to be not available during application
            startup it still has a chance to try another one and bootstrap properly.</p>
          
          <p>
            To connect to a Couchbase bucket, you must use Couchbase <i>Role-Based Access Control</i> (RBAC).
            This is fully described in the section
            <xref href="../../security/security-authorization.dita" scope="local" format="dita">Authorization</xref>.
            A username and password for the current user must be specified. 
            Following successful authentication, the bucket can be opened. 
          </p>

            <p>Once the SDK has successfully reached one node it will throw your bootstrap list
              away and replace it with a complete up-to-date list of nodes in the cluster.</p>

            <p>Here is how you can create a <apiname>Cluster</apiname> reference in a few different
            ways:</p>

        <codeblock outputclass="language-java"><![CDATA[// Connects to localhost
Cluster cluster = CouchbaseCluster.create();

// Connects to a cluster on 10.0.0.1 and tries 10.0.0.2
// if the other one does not respond during bootstrap.
Cluster cluster = CouchbaseCluster.create("10.0.0.1", "10.0.0.2");]]></codeblock>

            <p>
              Once a <apiname>Cluster</apiname> reference is available, you can open
              <apiname>Bucket</apiname> instances and then perform operations on them:
            </p>

        <codeblock outputclass="language-java"><![CDATA[// Connects to localhost
Cluster cluster = CouchbaseCluster.create();

// Authenticates
cluster.authenticate("username", "password");

// Opens the "myTestBucket" bucket
Bucket myTestBucket = cluster.openBucket("myTestBucket");
]]></codeblock>

          <note type="important">It is very important that cluster and bucket instances are
          created during startup and are then reused until the application shuts down. Connection
          setup is expensive and the SDK is designed to be thread safe and can be efficiently used
          across all your application threads.</note>

          <p>Finally you need to close the buckets and/or disconnect from the <apiname>Cluster</apiname>. If
          a cluster disconnect is issued, all buckets will be automatically closed.</p>

        <codeblock outputclass="language-java"><![CDATA[// Just close a single bucket
bucket.close();

// Disconnect and close all buckets
cluster.disconnect();]]></codeblock>

            <p>More information on managing connections including error handling can be found <xref
                href="managing-connections.dita">here</xref>.</p>
        </section>

        <section id="java-api-reference">
          <title>API Reference</title>
          <p>Each stable Java SDK version has the Javadocs API reference published. The reference for the latest version can be found <xref href="http://docs.couchbase.com/sdk-api/couchbase-java-client-2.4.6/" format="html" scope="external">here</xref>.</p>
        </section>
        <section id="java-contributing">
          <title>Contributing</title>
          <p>Couchbase welcomes community contributions to the Java SDK. The <xref
              href="https://github.com/couchbase/couchbase-java-client" format="html"
              scope="external">Java SDK source code</xref> is available on GitHub. Please see the <xref
              href="https://github.com/couchbase/couchbase-java-client/blob/master/CONTRIBUTING.md" format="html"
              scope="external">CONTRIBUTING</xref> file for further information.</p>
        </section>

    </body>
</topic>
